-- phpMyAdmin SQL Dump
-- version 4.4.15.10
-- https://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Апр 30 2020 г., 19:53
-- Версия сервера: 5.7.23-24
-- Версия PHP: 7.4.2

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `php7lessons`
--

-- --------------------------------------------------------

--
-- Структура таблицы `articles`
--

DROP TABLE IF EXISTS `articles`;
CREATE TABLE IF NOT EXISTS `articles` (
  `article_id` varchar(255) CHARACTER SET utf8 NOT NULL,
  `container_id` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `article_title` text CHARACTER SET utf8,
  `content` mediumtext CHARACTER SET utf8,
  `article_sort_order` int(11) DEFAULT NULL,
  `datetime_created` datetime DEFAULT NULL,
  `datetime_modified` datetime DEFAULT NULL,
  `content_size` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `articles`
--

INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('01e7b51f8a8f11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Объекты и ссылки', '<h1><strong>Объекты и ссылки</strong></h1>\n\n<p>Одним из ключевых моментов объектно-ориентированной парадигмы PHP 5, который часто обсуждается, является &quot;передача объектов по ссылке по умолчанию&quot;. Это не совсем верно. Этот раздел уточняет это понятие используя некоторые примеры.</p>\n\n<p><strong>Ссылка</strong> в PHP - это псевдоним (алиас), который позволяет присвоить двум переменным одинаковое значение. Начиная с PHP 5 объектная переменная больше не содержит сам объект как значение. Такая переменная содержит только идентификатор объекта, который позволяет найти конкретный объект при обращении к нему. Когда объект передается как аргумент функции, возвращается или присваивается другой переменной, то эти разные переменные не являются псевдонимами (алиасами): они содержат копию идентификатора, который указывает на один и тот же объект.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass A {\n    public $foo = 1;\n}  \n\n$a = new A;\n$b = $a;     // $a и $b копии одного идентификатора\n             // ($a) = ($b) = &lt;id&gt;\n$b-&gt;foo = 2;\necho $a-&gt;foo."\\n";\n\n\n$c = new A;\n$d = &amp;$c;    // $c и $d ссылки\n             // ($c,$d) = &lt;id&gt;\n\n$d-&gt;foo = 2;\necho $c-&gt;foo."\\n";\n\n\n$e = new A;\n\nfunction foo($obj) {\n    // ($obj) = ($e) = &lt;id&gt;\n    $obj-&gt;foo = 2;\n}\n\nfoo($e);\necho $e-&gt;foo."\\n";\n\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">2<br />\n2<br />\n2</div>\n', 56, '2020-04-30 06:02:20', '2020-04-30 06:02:20', 2313),
('1a2cc9eb8a4b11eab1430cc47aaabd6c', 'cc51dca689b711eab1430cc47aaabd6c', 'Общие сведения', '<div>\n<h1><strong><span style="color:#2a2a2a">Общие сведения о выражениях и операциях в PHP</span></strong></h1>\n</div>\n\n<div><span style="color:#2a2a2a">Практически все из чего состоит PHP-скрипт и имеет определенное значение является&nbsp;<em>выражением.</em>&nbsp;Справедливо и обратное утверждение: если &quot;что-то&quot; имеет значение, то это &quot;что-то&quot; -&nbsp;<em>выражение</em>. Самый простой пример выражения - это константа или определенная ранее переменная, стоящая в правой части оператора присвоения, например:</span>\n\n<pre>\n<code class="language-php">$e = 2.72;\n$ln = $e;</code></pre>\n<span style="color:#2a2a2a">Здесь 2.72 и $e - выражения. Но, кроме этого, $ln=$e тоже является выражением.</span></div>\n\n<div><span style="color:#2a2a2a">Исходя из этого, рассмотренные выше записи можно переписать следующим образом (в виде следующих выражений):</span>\n\n<pre>\n<code class="language-php">$ln = ($e = 2.72); или $ln = $e = 2.72;</code></pre>\n<span style="color:#2a2a2a">Иными словами, более простые выражения могут быть частью сложных, например:</span>\n\n<pre>\n<code class="language-php">$i = $Im * sin(($omega = 2 * $pi * $f) * $t + $psi);\n</code></pre>\n\n<p><span style="color:#2a2a2a">Обобщая все выше сказанное, можно утверждать, что&nbsp;выражение это комбинация переменных, значений и операторов, в результате вычисления которой получается одно единственное значение, которое может быть числовым (целым или вещественным), строковым или логическим (булевым).</span></p>\n</div>\n\n<div><span style="color:#2a2a2a">Среди большого спектра различных выражений PHP, определенный интерес представляют следующие два</span>\n\n<ul>\n	<li><span style="color:#2a2a2a"><strong>Логические выражения</strong>&nbsp;- это выражения, значением которых являются данные типа&nbsp;<em>boolean</em>&nbsp;(истина или ложь). На самом деле, абсолютно любое выражением при необходимости (например, как условие конструкции if-else), может рассматриваться как логическое. Для логических выражений справедливы все те рассуждения, которые были приведены выше при рассмотрении переменных логического типа данных. Обычно эти выражения формируются при использовании операций сравнения и логических операций (И, ИЛИ, НЕ).</span></li>\n	<li><span style="color:#2a2a2a"><strong>Строковые выражения</strong>&nbsp;- это операции с одним из основных объектов PHP - строками. Как уже говорилось, строки могут содержать текст вместе с символами форматирования или даже бинарные данные. Операциям над строками в данном курсе посвящем целый раздел, который мы будем рассматривать несколько позже.</span></li>\n</ul>\n</div>\n\n<div>\n<div><span style="color:#2a2a2a">Как уже отмечалось в начале данного раздела, синтаксис языка PHP весьма схож с синтаксисом языка С, да и с синтаксисом языка JavaScript (по крайней мере в разделе основных операций). Поэтому, подробно рассматривать основные операции PHP, особого смысла нет. Ниже, в качестве справочного материала, приведена сводная таблица основных операция языка PHP:</span></div>\n\n<h2><span style="color:#2a2a2a"><strong>Основные операции PHP</strong></span></h2>\n\n<table align="center" border="2" cellpadding="10" cellspacing="0" style="border-collapse:collapse">\n	<tbody>\n		<tr>\n			<th style="background-color:yellow; text-align:left"><span style="color:#2a2a2a">Операция</span></th>\n			<th style="background-color:yellow; text-align:left"><span style="color:#2a2a2a">Описание и примеры</span></th>\n		</tr>\n		<tr>\n			<th colspan="2" style="background-color:#ffe4c4; text-align:left"><span style="color:#2a2a2a">Арифметические операции</span></th>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">+</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Сложение</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">-</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Вычитание</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">*</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Умножение</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">/</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Деление</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">%</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Остаток от деления целых чисел</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">++</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Увеличение значения переменной на единицу (инкремент, постфиксный и префиксный)</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">--</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Уменьшение значения переменной на единицу (декримент, постфиксный и префиксный)</span></td>\n		</tr>\n		<tr>\n			<th colspan="2" style="background-color:#ffe4c4; text-align:left"><span style="color:#2a2a2a">Операции присваивания</span></th>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">&nbsp;</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">+=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">a += b &nbsp;&nbsp; &rarr; &nbsp;&nbsp; a = a + b</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">-=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">a -= b &nbsp;&nbsp; &rarr; &nbsp;&nbsp; a = a - b</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">*=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">a *= b &nbsp;&nbsp; &rarr; &nbsp;&nbsp;a = a * b</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">/=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">a /= b &nbsp;&nbsp; &rarr; &nbsp;&nbsp;a = a / b</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">%=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">a %= b &nbsp;&nbsp; &rarr; &nbsp;&nbsp;a = a % b</span></td>\n		</tr>\n		<tr>\n			<th colspan="2" style="background-color:#ffe4c4; text-align:left"><span style="color:#2a2a2a">Операции сравнения (используются в логических операциях)</span></th>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">==</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Равно</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">===</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Идентично (оператор эквивалентности)</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">!=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Не равно</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">&gt;=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Больше или равно</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">&lt;=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Меньше или равно</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">&gt;</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Строго больше</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">&lt;</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Строго меньше</span></td>\n		</tr>\n		<tr>\n			<th colspan="2" style="background-color:#ffe4c4; text-align:left"><span style="color:#2a2a2a">Логические операции</span></th>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center; width:100px"><span style="color:#2a2a2a">&amp;&amp; или <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">and</code></span></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Логические &quot;И&quot;</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><span style="color:#2a2a2a"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">||</code> или <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">or</code></span></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Логические &quot;ИЛИ&quot;</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><span style="color:#2a2a2a"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">!</code> или <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">not</code></span></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Логические &quot;НЕ&quot;</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">xor</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Исключающая &quot;ИЛИ&quot; - возвращает истину только в том случае, если участвующие в сравнении выражения имеют противоположные логические значения:&nbsp;<em>истина xor ложь</em>&nbsp;=&gt; истина</span></td>\n		</tr>\n		<tr>\n			<th colspan="2" style="background-color:#ffe4c4; text-align:left"><span style="color:#2a2a2a">Строковые операции</span></th>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">.</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Конкатенация (объединение) строковых переменных<br />\n			group = &quot;A&quot;.&quot;-&quot;.&quot;12&quot;.&quot;-&quot;.&quot;xx&quot;<br />\n			в переменнной group будет содержаться строка &quot;A-12-xx&quot;</span></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><span style="color:#2a2a2a">.=</span></code></td>\n			<td style="background-color:#f5f1c7"><span style="color:#2a2a2a">Присваивание с конкатенацией</span></td>\n		</tr>\n		<tr>\n			<td colspan="2" style="background-color:#ffe4c4"><strong>Поразрядные (побитовые) операции</strong></td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&amp;</code></td>\n			<td style="background-color:#f5f1c7">Побитовое &quot;И&quot;</td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">|</code></td>\n			<td style="background-color:#f5f1c7">Побитовое &quot;ИЛИ&quot;</td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">~</code></td>\n			<td style="background-color:#f5f1c7">Побитовая инверсия</td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">^</code></td>\n			<td style="background-color:#f5f1c7">Побитовый XOR</td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;&lt;</code></td>\n			<td style="background-color:#f5f1c7">Сдвиг влево</td>\n		</tr>\n		<tr>\n			<td style="background-color:#f5f1c7; text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&gt;&gt;</code></td>\n			<td style="background-color:#f5f1c7">Сдвиг вправо</td>\n		</tr>\n	</tbody>\n</table>\n<br />\n<span style="color:#2a2a2a">Рассмотренные выше операции достаточно понятны. Они являются основой для подавляющего большинства языков программирования. Стоит лишь, пожалуй, остановиться на операторе эквивалентности (<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">===</code>), который для некоторых читателей возможно незнаком (встречается не во всех языках). Введение данного оператора в язык PHP связано с тем, что в некоторых случаях оператор сравнения (<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">==</code>) работает не совсем корректно. Например, рассмотрим следующий пример</span>\n\n<pre>\n<code class="language-php">&lt;?php\n$numb = 0; // число равное 0\n$str = ""; // пустая строка\nif ($numb == $str) echo "число = строка";\n?&gt;</code></pre>\n\n<p><span style="color:#2a2a2a">Здесь условный оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">if</code>&nbsp; проверяет условие: равна ли переменная <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$numb</code> переменной <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$str.</code> Не смотря на то, что переменные<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"> $numb</code> и <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$str</code>&nbsp;разного типа ($numb - число, $str - строка), в конечном итоге программа сообщит что переменные равны (на экран будет выведено:&nbsp;<em>число = строка</em>). Действительно, в скобках условного оператора if в конечном итоге возникнет условие&nbsp;<em>false = false</em>. Чтобы избежать таких ситуаций, в PHP введен логический оператор эквивалентности <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">===</code>, который сравнивает не только значение переменных, но и их тип.</span></p>\n\n<hr />\n<p><a href="https://www.php.net/manual/ru/language.operators.php">Ещё подробнее об операторах</a>&nbsp;(ссылка на официальный источник)</p>\n</div>\n', 13, '2020-04-29 21:56:15', '2020-04-29 21:58:20', 20845),
('1bae975d8a8e11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Свойства', '<h1><strong>Свойства</strong></h1>\n\n<p>Переменные, которые являются членами класса, называются &quot;свойства&quot;. Также их называют, используя другие термины, такие как &quot;атрибуты&quot; или &quot;поля&quot;, но в рамках этой документации, мы будем называть их свойствами. Они определяются с помощью ключевых слов&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>public</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>protected</em></code>&nbsp;или&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>private</em></code>, могут сопровождаться необязательным объявлением типа и следуют правилам правильного объявления переменных. Это объявление может содержать инициализацию, но эта инициализация должна быть постоянным значением, то есть значение должно быть вычислено во время компиляции и не должны зависеть от информации, полученной во время выполнения для их вычисления.</p>\n\n<p>&nbsp;</p>\n\n<p>В пределах методов класса доступ к нестатическим свойствам может быть получен с помощью&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>-&gt;</em></code>&nbsp;(объектного оператора):&nbsp;<var><var>$this-&gt;property</var></var>&nbsp;(где&nbsp;<em>property</em>&nbsp;- имя свойства). Доступ к статическим свойствам осуществляется с помощью&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>::</em></code>&nbsp;(двойного двоеточия):&nbsp;<var><var>self::$property</var></var>.&nbsp;</p>\n\n<p>Псевдопеременная&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><var><var>$this</var></var></code>&nbsp;доступна внутри любого метода класса, когда этот метод вызывается из контекста объекта.&nbsp;<var><var>$this</var></var>&nbsp;- это ссылка на вызываемый объект (обычно это объект, к которому принадлежит метод, но возможно и другого объекта, если метод вызван&nbsp;<a href="https://www.php.net/manual/ru/language.oop5.static.php">статически</a>&nbsp;из контекста второго объекта).</p>\n\n<p><strong>Определение свойств</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass SimpleClass\n{\n   // правильное определение свойства с PHP 5.6.0:\n   public $var1 = ''hello '' . ''world'';\n   // правильное определение свойства с PHP 5.3.0:\n   public $var2 = &lt;&lt;&lt;EOD\nhello world\nEOD;\n   // правильное определение свойства с PHP 5.6.0:\n   public $var3 = 1+2;\n   // неправильное определение свойств:\n   public $var4 = self::myStaticMethod();\n   public $var5 = $myVar;\n\n   // правильное определение свойств:\n   public $var6 = myConstant;\n   public $var7 = array(true, false);\n\n   // правильное определение свойства с PHP 5.3.0:\n   public $var8 = &lt;&lt;&lt;''EOD''\nhello world\nEOD;\n}\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n\n<p>Начиная с PHP 7.4.0, определения свойств могут включать объявление типа, за исключением типа&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>callable</em></code></p>\n\n<p><strong>Пример использования типизированных свойств</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass User\n{\n    public int $id;\n    public string $name;\n\n    public function __construct(int $id, string $name)\n    {\n        $this-&gt;id = $id;\n        $this-&gt;name = $name;\n    }\n}\n\n$user = new User(1234, "php");\necho "ID: " . $user-&gt;id;\necho "\\n";\necho "Имя: " . $user-&gt;name;\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">ID: 1234<br />\nИмя: php</div>\n', 53, '2020-04-30 05:55:54', '2020-04-30 05:55:54', 5223),
('1e1864768a8411eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Пользовательские функции', '<h1><strong>Пользовательские функции</strong></h1>\n\n<p><strong>Функция</strong> - это набор операторов, который идентифицируется определенным идентификатором (именем). Проще всего разобраться что же такое функция, это посмотреть на пример:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfunction square($num)\n{\n   $square = $num * $num;\n   echo $square;\n}	\n\nsquare(7);\n\n?&gt;</code></pre>\n\n<p>Это простая функция, которая рассчитывает квадрат числа.</p>\n\n<p>Сначала, мы создаем функцию прописывая ключевое слово&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">function</code>, после которого мы можем задать любое имя для нашей функции, в нашем случае это имя -&nbsp;<strong><code>square</code></strong>. В скобках мы передаем аргумент функции (то, что нам нужно посчитать), в нашем случае это переменная -&nbsp;<em><code>$num</code></em>&nbsp;(какое-нибудь число).</p>\n\n<p>Далее, в теле функции, мы прописываем все, что мы хотим, чтобы функция выполняла. В нашем случае, функция задает переменной&nbsp;<em><code>$square</code></em>&nbsp;квадрат числа, которое находится в&nbsp;<em><code>$num</code></em>, после мы просто выводим результат функции&nbsp;<em><code>$square</code></em>, с помощью оператора&nbsp;<strong><code>echo</code></strong>.</p>\n\n<p>После этих действий, мы можем в любой части нашей страницы вызвать созданную функцию вот так:&nbsp;<code><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">square(какое-нибудь число)</code>;</code></p>\n\n<p>Формальный синтаксис описания функции:</p>\n\n<pre>\n<code class="language-php">function name([argument_list...])\n{\n    [statemetns;]\n    [return value;]\n}</code></pre>\n\n<p>Имена функций следуют тем же правилам, что и другие метки в PHP. Корректное имя функции начинается с буквы или знака подчеркивания, за которым следует любое количество букв, цифр или знаков подчеркивания. В качестве регулярного выражения оно может быть выражено так:&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">^[a-zA-Z_\\x80-\\xff][a-zA-Z0-9_\\x80-\\xff]*$</code>.</p>\n\n<p>Функции не обязаны быть определены до их использования,&nbsp;<em>исключая</em>&nbsp;тот случай, когда функции определяются условно, как это показано в двух последующих примерах.</p>\n\n<p>В случае, когда функция определяется в зависимости от какого-либо условия, например, как это показано в двух приведенных ниже примерах, обработка описания функции должна&nbsp;<em>предшествовать</em>&nbsp;ее вызову.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\n$makefoo = true;\n\n/* Мы не можем вызвать функцию foo() в этом месте,\n   поскольку она еще не определена, но мы можем \n   обратиться к bar() */\n\nbar();\n\nif ($makefoo) {\n  function foo()\n  {\n    echo "Я не существую до тех пор, пока выполнение программы меня не достигнет.\\n";\n  }\n}\n\n/* Теперь мы благополучно можем вызывать foo(),\n   поскольку $makefoo была интерпретирована как true */\n\nif ($makefoo) foo();\n\nfunction bar() \n{\n  echo "Я существую сразу с начала старта программы.\\n";\n}\n\n?&gt;</code></pre>\n\n<p>Язык программирование PHP 7 не накладывает никаких структурных ограничений в части функций, поэтому можно создавать вложенные функции - в них можно также создать вложенную функцию. В данном случае важно помнить <strong>об области видимости</strong> переменных (функций и объектов это также касается).</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfunction foo() \n{\n  function bar() \n  {\n    echo "Я не существую пока не будет вызвана foo().\\n";\n  }\n}\n\n/* Мы пока не можем обратиться к bar(),\n   поскольку она еще не определена. */\n\nfoo();\n\n/* Теперь мы можем вызвать функцию bar(),\n   обработка foo() сделала ее доступной. */\n\nbar();\n\n?&gt;</code></pre>\n\n<p>Все функции и классы PHP имеют глобальную область видимости - они могут быть вызваны вне функции, даже если были определены внутри и наоборот.</p>\n\n<p>PHP не поддерживает перегрузку функции, также отсутствует возможность переопределить или удалить объявленную ранее функцию.</p>\n\n<blockquote>\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>Замечание</strong>:&nbsp;Имена функций регистронезависимы для символов ASCII от&nbsp;<em>A</em>&nbsp;до&nbsp;<em>Z</em>, тем не менее, предпочтительнее вызывать функции так, как они были объявлены.</div>\n</blockquote>\n\n<p>Функции PHP поддерживают как&nbsp;<strong>списки аргументов переменной длины</strong>, так и&nbsp;<strong>значения аргументов по умолчанию</strong>.</p>\n\n<p>Можно вызывать функции PHP рекурсивно.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfunction recursion($a)\n{\n    if ($a &lt; 20) {\n        echo "$a\\n";\n        recursion($a + 1);\n    }\n}\n?&gt;</code></pre>\n\n<blockquote>\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>Замечание</strong>:&nbsp;Рекурсивный вызов методов/процедур с глубиной более 100-200 уровней рекурсии может вызвать переполнение стека и привести к аварийному завершению скрипта. В частности, бесконечная рекурсия будет считаться программной ошибкой.</div>\n</blockquote>\n\n<p>&nbsp;</p>\n', 38, '2020-04-30 04:44:23', '2020-04-30 04:58:52', 7798),
('1f8793c98a7411eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Суперглобальные массивы', '<h1><strong>Суперглобальные массивы</strong></h1>\n\n<p><strong>Суперглобальными массивами</strong> в PHP называются предопределённые массивы, имеющие глобальную область видимости без использования директивы&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">global</code>. Большая часть этих массивов содержит входные данные запроса пользователя (параметры&nbsp;<strong>GET</strong>-запроса, поля форм при посылке методом&nbsp;<strong>POST</strong>, <strong>cookie</strong>&nbsp;и&nbsp;т.&nbsp;п.).</p>\n\n<p>Все суперглобальные массивы, кроме&nbsp;<strong><code>$GLOBALS</code></strong>&nbsp;и&nbsp;<strong><code>$_REQUEST</code></strong>, имеют устаревшие аналоги с длинными именами, которые доступны вплоть до версии 5.3. х (начиная с 5.4.0 были удалены). Таким образом, обращения&nbsp;<strong><code>$_GET[&#39;</code></strong><code>year</code><strong><code>&#39;]</code></strong>&nbsp;и&nbsp;<strong><code>$HTTP_GET_VARS[&#39;</code></strong><code>year</code><strong><code>&#39;]</code></strong>&nbsp;идентичны (за исключением области видимости: массивы с &laquo;длинными&raquo; именами не являются суперглобальными).</p>\n\n<p><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$GLOBALS</code></strong></p>\n\n<ul>\n	<li>Массив всех глобальных переменных (в том числе и пользовательских).</li>\n</ul>\n\n<p><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_SERVER</code></strong>(аналог для устаревшего&nbsp;&mdash;&nbsp;<strong><code>$HTTP_SERVER_VARS</code></strong>)</p>\n\n<ul>\n	<li>Содержит переменные окружения, которые операционная система передаёт серверу.</li>\n</ul>\n\n<p><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_ENV</code></strong>&nbsp;(уст.&nbsp;<strong><code>$HTTP_ENV_VARS</code></strong>)</p>\n\n<ul>\n	<li>Текущие&nbsp;переменные среды. Их набор специфичен для платформы, на которой выполняется скрипт.</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_GET</strong></code>&nbsp;(уст.&nbsp;<strong><code>$HTTP_GET_VARS</code></strong>)</p>\n\n<ul>\n	<li>Содержит параметры GET-запроса, переданные в URI после знака вопроса &laquo;<code>?</code>&raquo;.</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_POST</strong></code>&nbsp;(уст.&nbsp;<strong><code>$HTTP_POST_VARS</code></strong>)</p>\n\n<ul>\n	<li>Ассоциативный массив значений полей HTML-формы при отправке методом POST. Индексы элементов соответствуют значению свойства&nbsp;<code>name</code>&nbsp;объектов (кнопки, формы, радио-кнопки, флажки и&nbsp;т.&nbsp;д.) HTML-формы.</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_FILES</strong></code>&nbsp;(уст.&nbsp;<strong><code>$HTTP_POST_FILES</code></strong>)</p>\n\n<ul>\n	<li>Ассоциативный массив со сведениями об отправленных методом POST файлах. Каждый элемент имеет индекс, идентичный значению атрибута &laquo;name&raquo; в форме, и, в свою очередь, также является массивом со следующими элементами:\n	<ul>\n		<li><code>[&#39;name&#39;]</code>&nbsp;&mdash; исходное имя файла на компьютере пользователя.</li>\n		<li><code>[&#39;type&#39;]</code>&nbsp;&mdash; указанный агентом пользователя&nbsp;MIME-тип файла. PHP не проверяет его, и поэтому нет никаких гарантий, что указанный тип соответствует действительности.</li>\n		<li><code>[&#39;size&#39;]</code>&nbsp;&mdash; размер файла в байтах.</li>\n		<li><code>[&#39;tmp_name&#39;]</code>&nbsp;&mdash; полный путь к файлу во временной папке. Файл необходимо переместить оттуда функцией&nbsp;<strong><code>move_uploaded_file</code></strong>. Загруженные файлы из временной папки PHP удаляет самостоятельно.</li>\n		<li><code>[&#39;error&#39;]</code>&nbsp;&mdash; код ошибки. Если файл удачно загрузился, то этот элемент будет равен 0 (<em><code>UPLOAD_ERR_OK</code></em>).</li>\n	</ul>\n	</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_COOKIE</strong></code>&nbsp;(уст.&nbsp;<strong><code>$HTTP_COOKIE_VARS</code></strong>)</p>\n\n<ul>\n	<li>Ассоциативный массив с переданными агентом пользователя значениями&nbsp;куки.</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_REQUEST</strong></code></p>\n\n<ul>\n	<li>Содержит элементы из массивов&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_GET</code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_POST</code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_COOKIE</code>. С версии PHP 4.1 включает&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_FILES</code>.</li>\n</ul>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$_SESSION</strong></code>&nbsp;(уст.&nbsp;<strong><code>$HTTP_SESSION_VARS</code></strong>)</p>\n\n<ul>\n	<li>Содержит данные сессии.</li>\n</ul>\n\n<h2><strong>Передача параметров сценариям</strong></h2>\n\n<p>Отдельным вниманием нужно в данный момент удостоить массивы <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_POST</code> и <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_GET</code>, так как способы GET-запросов и POST-запросов - основные способы передачи параметров сценариям. На языке HTTP-запросов (это надмножество над GET и POST) по большей мере общается всемирная паутина.</p>\n\n<p>GET-запрос представляет собой набор параметров, переданных в адресной строке браузера в формате <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">host/page.php?param1=value1&amp;param2=value2&amp;..</code> и так далее.</p>\n\n<p>Если обратиться к странице скрипта .php в таком формате, то скрипт получит доступ к <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_GET</code> массиву, который будет содержать все параметры запроса. Например, <em>$_GET[&#39;param1&#39;] = value1</em>. Если в конфигурационном файле <strong>php.ini</strong>, установить настройку <span style="color:#e74c3c">register_globals = On </span>(что не рекомендуется), то все параметры запроса будут доступны по своему имени. Например, <em>$param1 == $_GET[&#39;param1&#39;]</em>.</p>\n\n<p>Следующий пример демонстрирует передачу GET-параметров на свой же скрипт по ссылке, а затем обрабатывает их.</p>\n\n<p><a href="/uploads/63a9f0ea7bb98050796b649e85481845/get-example.php" onclick="window.open(this.href, ''getExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=400,left=10,height=400,top=10''); return false;">Запустить пример </a></p>\n\n<pre>\n<code class="language-php">&lt;?php\nif (isset($_GET["par1"]) &amp;&amp; isset($_GET[''par2'']))\n{\necho "Элемент массива \\$_GET[''par1'']=".$_GET[''par1'']."&lt;br&gt;";\necho "Элемент массива \\$_GET[\\"par2\\"]=".$_GET["par2"]."&lt;br&gt;";\n}\n$num=3.14;\n$str="Кастомнаястрока";\necho "&lt;a href=''/uploads/63a9f0ea7bb98050796b649e85481845/get-example.php";\necho "?par1={$num}&amp;par2={$str}''&gt;";\necho "Передача параметров&lt;/a&gt;";\n?&gt;</code></pre>\n\n<p>Для POST-запросов из HTML чаще всего используются формы. Скрипт к таким переменным может обращаться через массив <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$_POST</code>.</p>\n\n<p>Пример такого скрипта:<br />\n<a href="/uploads/63a9f0ea7bb98050796b649e85481845/post-example.php" onclick="window.open(this.href, ''postExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=600,left=10,height=600,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\nif (isset($_POST[''go'']))  {\n    echo "Текстовое поле txt - {$_POST[''txt'']}&lt;br&gt;";\n    echo "Поле ввода пароля passw - {$_POST[''passw'']}&lt;br&gt;";\n    echo "Одновариантный выбор select - {$_POST[''sex'']}&lt;br&gt;";\n    echo "Значение кнопки формы submit - {$_POST[''go'']}&lt;br&gt;";\n    echo "&lt;hr&gt;&lt;hr&gt;";\n}\n?&gt;\n&lt;form action="/uploads/63a9f0ea7bb98050796b649e85481845/post-example.php"" method="POST"&gt;\n  Текстовое поле txt &lt;input type="text" name="txt"&gt;&lt;br&gt;\n  Поле ввода пароля pwd &lt;input type="password" name="passw"&gt;&lt;br&gt;\n  Пол:\n  &lt;select name="sex"&gt;\n    &lt;option value="мужской"&gt;мужской \n    &lt;option value="женский"&gt;женский\n  &lt;/select&gt;\n  &lt;hr&gt;\n  &lt;input type="submit" name="go" value="Отправить"&gt;\n  &lt;input type="reset" value="Очистить форму"&gt;\n&lt;/form&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 37, '2020-04-30 02:49:53', '2020-04-30 03:10:35', 11702),
('2204f21f89b711eab1430cc47aaabd6c', '046b312f89b711eab1430cc47aaabd6c', 'Синтаксис языка', '<h1><strong>Базовые понятия о синтаксисе PHP</strong></h1>\n\n<p>Синтаксис PHP подобен синтаксису языка Си. Некоторые элементы, такие как ассоциативные массивы и цикл foreach, заимствованы из Perl.</p>\n\n<p>Для написания простейшего скрипта не требуется описывать какие-либо переменные, используемые модули и т. п. Любой скрипт может начинаться непосредственно с оператора PHP.</p>\n\n<p>Простейшая программа Hello world на PHP выглядит следующим образом:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n  echo ''Hello, world!''; \n?&gt;</code></pre>\n\n<p>Также возможен более короткий вариант вывода строки:</p>\n\n<pre>\n<code class="language-php">&lt;?= ''Hello, world!'' ?&gt;</code></pre>\n\n<p>Открывающий тег вида <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;?=</code> используется для сокращённой записи конструкций, используемых для вывода строки.</p>\n\n<p>PHP исполняет код, находящийся внутри ограничителей, таких как <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;?php ?&gt;</code>. Всё, что находится вне ограничителей, выводится без изменений. В основном это используется для вставки PHP-кода в HTML-документ, например, так:</p>\n\n<pre>\n<code class="language-html">&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;\n         Тестируем PHP\n      &lt;/title&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;?php\n         echo "Привет мир!";\n      ?&gt;\n   &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Помимо ограничителей <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;?php ?&gt;</code>, допускается использование сокращённого варианта <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;? ?&gt;</code>. Кроме того, до версии 7.0 допускалось использование ограничителей языка программирования ASP <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;% %&gt;</code> и <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;script language=&quot;php&quot;&gt; &lt;/script&gt;</code>. Работа сокращённых конструкций определяется в конфигурационном файле <strong>php.ini</strong>.</p>\n\n<p>Имена переменных начинаются с символа <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$</code>, тип переменной объявлять не нужно. Имена переменных и констант чувствительны к регистру символов. Имена классов, методов классов и функций к регистру символов не чувствительны. Переменные обрабатываются в строках, заключённых в двойные кавычки, и <a href="https://ru.wikipedia.org/wiki/Heredoc">heredoc</a>-строках (строках, созданных при помощи оператора &lt;&lt;&lt;). Переменные в строках, заключённых в одинарные кавычки, не обрабатываются.</p>\n\n<pre>\n<code class="language-php">// Пример синтаксиса heredoc\n&lt;?php\necho &lt;&lt;&lt;END\n&lt;p&gt;Для отображения большого &lt;br&gt; количества текста используют \nсинтаксис heredoc&lt;/p&gt; \nEND;\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-html">Для отображения большого \nколичества текста используют синтаксис heredoc</code></pre>\n\n<p>&nbsp;</p>\n\n<p>PHP рассматривает переход на новую строку как пробел, так же как HTML и другие языки со свободным форматом. Инструкции разделяются с помощью точки с запятой <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">(;)</code>, за исключением некоторых случаев, после объявления конструкции if/else и циклов.</p>\n\n<p>Переменные в функцию можно передавать как по значению, так и по ссылке (используется знак <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&amp;</code>).</p>\n\n<p>PHP поддерживает три типа комментариев: в стиле языка Си (ограниченные <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">/* */</code>), C++ (начинающиеся с <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">//</code> и идущие до конца строки) и оболочки UNIX (с <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">#</code> до конца строки).</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Пример комментария в стиле C++\n\n/*\nА это многострочный комментарий в стиле Си\n*/\n\n# А это однострочный UNIX\n?&gt;</code></pre>\n\n<h2><strong>Обращение к переменным и функциям</strong></h2>\n\n<pre>\n<code class="language-php">$a = ''I am a''; // Запись значения в переменную $a\necho $a; // Вывод переменной $а\n\n$b = ''a'';\necho $$b; // Вывод переменной $а (дополнительный $ перед переменной $b)\n\necho ${''a''}; // Вывод переменной $a\n\nfunction_name(); // Вызов функции function_name\n$c = ''function_name'';\n$c(); //Вызов функции function_name\n\n$d = ''Class_name'';\n$obj = new Class_name; // Создание объекта класса Class_name\n$obj = new $d(); // Создание объекта класса Class_name\n$obj-&gt;b; // Обращение к свойству b объекта\n$obj-&gt;c(); // Вызов метода c() объекта\n\n$obj-&gt;$b; // Обращение к свойству a объекта, так как $b = ''a''\n$obj-&gt;$c(); // Вызов метода function_name() объекта, так как $c = ''function_name''</code></pre>\n\n<p><span style="color:#2980b9">В PHP echo и print не являются функциями (хотя print имеет возвращаемое значение), а являются синтаксическими единицами. При их использовании можно опустить скобки.</span></p>\n\n<h3><br />\nДальнейшее рассмотрение синтаксиса будет сопутствовать материалам статей.</h3>\n', 7, '2020-04-29 04:17:03', '2020-04-29 11:34:38', 7900),
('2e74dcaa8a8f11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Полезные функции', '<h1><strong>Функции работы с классами и объектами</strong></h1>\n\n<ul>\n	<li><a href="https://www.php.net/manual/ru/function.autoload.php">__autoload</a>&nbsp;&mdash; Попытка загрузить неопределенный класс</li>\n	<li><a href="https://www.php.net/manual/ru/function.call-user-method-array.php">call_user_method_array</a>&nbsp;&mdash; Вызывает метод объекта с массивом параметров</li>\n	<li><a href="https://www.php.net/manual/ru/function.call-user-method.php">call_user_method</a>&nbsp;&mdash; Вызывает метод указанного объекта</li>\n	<li><a href="https://www.php.net/manual/ru/function.class-alias.php">class_alias</a>&nbsp;&mdash; Создает псевдоним для указанного класса</li>\n	<li><a href="https://www.php.net/manual/ru/function.class-exists.php">class_exists</a>&nbsp;&mdash; Проверяет, был ли объявлен класс</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-called-class.php">get_called_class</a>&nbsp;&mdash; Имя класса, полученное с помощью позднего статического связывания</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-class-methods.php">get_class_methods</a>&nbsp;&mdash; Возвращает массив имен методов класса</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-class-vars.php">get_class_vars</a>&nbsp;&mdash; Возвращает объявленные по умолчанию свойства класса</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-class.php">get_class</a>&nbsp;&mdash; Возвращает имя класса, к которому принадлежит объект</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-declared-classes.php">get_declared_classes</a>&nbsp;&mdash; Возвращает массив с именами объявленных классов</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-declared-interfaces.php">get_declared_interfaces</a>&nbsp;&mdash; Возвращает массив всех объявленных интерфейсов</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-declared-traits.php">get_declared_traits</a>&nbsp;&mdash; Возвращает массив со всеми объявленными трейтами</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-object-vars.php">get_object_vars</a>&nbsp;&mdash; Возвращает свойства указанного объекта</li>\n	<li><a href="https://www.php.net/manual/ru/function.get-parent-class.php">get_parent_class</a>&nbsp;&mdash; Возвращает имя родительского класса для объекта или класса</li>\n	<li><a href="https://www.php.net/manual/ru/function.interface-exists.php">interface_exists</a>&nbsp;&mdash; Проверяет, определен ли интерфейс</li>\n	<li><a href="https://www.php.net/manual/ru/function.is-a.php">is_a</a>&nbsp;&mdash; Проверяет, принадлежит ли объект к данному классу или является ли этот класс одним из его родителей</li>\n	<li><a href="https://www.php.net/manual/ru/function.is-subclass-of.php">is_subclass_of</a>&nbsp;&mdash; Проверяет, содержит ли объект в своем дереве предков указанный класс либо прямо реализует его</li>\n	<li><a href="https://www.php.net/manual/ru/function.method-exists.php">method_exists</a>&nbsp;&mdash; Проверяет, существует ли метод в данном классе</li>\n	<li><a href="https://www.php.net/manual/ru/function.property-exists.php">property_exists</a>&nbsp;&mdash; Проверяет, содержит ли объект или класс указанный атрибут</li>\n	<li><a href="https://www.php.net/manual/ru/function.trait-exists.php">trait_exists</a>&nbsp;&mdash; Проверяет, существует ли трейт</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>Дополнительная подробная информация в <a href="https://www.php.net/manual/ru/language.oop5.php">официальном источнике</a>.</p>\n', 57, '2020-04-30 06:03:35', '2020-04-30 06:03:35', 4412);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('2fd070818a5911eab1430cc47aaabd6c', 'e0d0c46489b711eab1430cc47aaabd6c', 'Циклы while и do-while', '<h1><strong>while</strong></h1>\n\n<p>Циклы&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">while</code>&nbsp;являются простейшим видом циклов в PHP. Они ведут себя так же, как и в языке C. Простейшей формой цикла&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">while</code>&nbsp;является следующее выражение:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">while (expr)<br />\n&nbsp;&nbsp;&nbsp; statement</div>\n\n<p>Смысл выражения&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>while</em></code>&nbsp;очень прост. Оно указывает PHP выполнять вложенные выражения повторно до тех пор, пока выражение в самом&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>while</em></code>&nbsp;является&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>. Значение выражения&nbsp;<em>expr</em>&nbsp;проверяется каждый раз перед началом цикла, поэтому даже если значение выражения изменится в процессе выполнения вложенных выражений в цикле, выполнение не прекратится до конца итерации (каждый раз, когда PHP выполняет выражения в цикле - это одна итерация). В том случае, если выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>while</em></code>&nbsp;равно&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>&nbsp;с самого начала, вложенные выражения ни разу не будут выполнены.</p>\n\n<p>Также, как и с оператором&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>, вы можете группировать несколько выражений внутри одного цикла&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>while</em></code>, заключая эти выражения между фигурными скобками или используя альтернативный синтаксис:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">while (expr):<br />\n&nbsp;&nbsp;&nbsp; statement<br />\n&nbsp;&nbsp;&nbsp; ...<br />\nendwhile;</div>\n\n<p>Следующие примеры идентичны, и оба выведут числа от 1 до 10:</p>\n\n<p><a href="/uploads/63a9f0ea7bb98050796b649e85481845/while-example.php" onclick="window.open(this.href, ''whileExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=300,left=10,height=350,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\n$i = 1;\nwhile ($i &lt;= 10) {\n	echo $i++, "&lt;br /&gt;"; /* сначала выведется $i выведется, а затем увеличится на 1 */\n}\n\n$i = 1;\nwhile ($i &lt;= 10):\n	echo $i, "&lt;br /&gt;";\n	$i++;\nendwhile;\n?&gt;</code></pre>\n\n<h1><strong>do-while</strong></h1>\n\n<p>Цикл&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>do-while</em></code>&nbsp;очень похож на цикл&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>while</em></code>, с тем отличием, что истинность выражения проверяется в конце итерации, а не в начале. Главное отличие от обычного цикла&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>while</em></code>&nbsp;в том, что первая итерация цикла&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>do-while</em></code>&nbsp;гарантированно выполнится (истинность выражения проверяется в конце итерации), тогда как она может не выполниться в обычном цикле&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>while</em></code>&nbsp;(истинность выражения которого проверяется в начале выполнения каждой итерации, и если изначально имеет значение&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>FALSE</strong></code>, то выполнение цикла будет прервано сразу).</p>\n\n<p>Есть только один вариант синтаксиса цикла&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>do-while</em></code>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$i = 0;\ndo {\n    echo $i;\n} while ($i &gt; 0);\n?&gt;</code></pre>\n\n<p>В примере цикл будет выполнен ровно один раз, так как после первой итерации, когда проверяется истинность выражения, она будет вычислена как&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>FALSE</strong></code>&nbsp;(<var><var>$i</var></var>&nbsp;не больше 0) и выполнение цикла прекратится.</p>\n\n<p>Опытные пользователи С могут быть знакомы с другим использованием цикла&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>do-while</em></code>, которое позволяет остановить выполнение хода программы в середине блока, для этого нужно обернуть нужный блок кода вызовом&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>do-while</em></code>&nbsp;(1) и использовать&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>break</em></code>. Следующий фрагмент кода демонстрирует этот подход:</p>\n\n<pre>\n<code class="language-php">&lt;?php\ndo {\n    if ($i &lt; 5) {\n        echo "i еще недостаточно велико";\n        break;\n    }\n    $i *= $factor;\n    if ($i &lt; $minimum_limit) {\n        break;\n    }\n   echo "значение i уже подходит";\n\n    /* обработка i */\n\n} while (1);\n?&gt;</code></pre>\n\n<p>Цикл является бесконечным (так как 1 даёт <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>TRUE</strong></code> при приведении к логическому типу), поэтому выйти из него можно только условно &quot;сломав&quot;, &quot;разорвав&quot; цикл оператором <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">break</code>. Исполнение кода продолжится со следующей команды после цикла.</p>\n', 24, '2020-04-29 23:37:04', '2020-04-29 23:52:35', 8316),
('32efcca88a5011eab1430cc47aaabd6c', 'cc51dca689b711eab1430cc47aaabd6c', 'Приоритет операторов', '<h1><strong>Приоритет оператора</strong></h1>\n\n<p><strong>Приоритет</strong> оператора определяет, насколько &quot;тесно&quot; он связывает между собой два выражения. Например, выражение&nbsp;<em><span style="background-color:#f1c40f">1 + 5 * 3</span></em>&nbsp;вычисляется как&nbsp;<em><span style="background-color:#f1c40f">16</span></em>, а не&nbsp;<em><span style="background-color:#f1c40f">18</span></em>, поскольку оператор умножения <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">*</code> имеет более высокий приоритет, чем оператор сложения <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">+</code>. Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение&nbsp;<em><span style="background-color:#f1c40f">(1 + 5) * 3</span></em>&nbsp;вычисляется как&nbsp;<em><span style="background-color:#f1c40f">18</span></em>.</p>\n\n<p>Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их <strong>ассоциативностью</strong>. К примеру, <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">-</code> является лево-ассоциативным оператором. Следовательно&nbsp;<em><span style="background-color:#f1c40f">1 - 2 - 3</span></em>&nbsp;сгруппируется как&nbsp;<em><span style="background-color:#f1c40f">(1 - 2) - 3</span></em>&nbsp;и пересчитается в&nbsp;<em><span style="background-color:#f1c40f">-4</span></em>. С другой стороны <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">=</code> - право-ассоциативный оператор, так что&nbsp;<em><span style="background-color:#f1c40f">$a = $b = $c</span></em>&nbsp;сгруппируется как&nbsp;<em><span style="background-color:#f1c40f">$a = ($b = $c)</span></em>.</p>\n\n<p>Неассоциативные операторы с одинаковым приоритетом не могут использоваться совместно. К примеру&nbsp;<strong><em><span style="background-color:#e74c3c">1 &lt; 2 &gt; 1</span></em></strong>&nbsp;не будет работать в PHP. Выражение&nbsp;<em><span style="background-color:#f1c40f">1 &lt;= 1 == 1</span></em>, с другой стороны, будет, поскольку&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>==</em></code>&nbsp;имеет более низкий приоритет чем&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>&lt;=</em></code>.</p>\n\n<p>Использование скобок, кроме случаев когда они строго необходимы, может улучшить читаемость кода, группируя явно, а не полагаясь на приоритеты и ассоциативность.</p>\n\n<p>В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.</p>\n\n<table border="3" cellpadding="3">\n	<caption><strong>Порядок выполнения операторов</strong></caption>\n	<thead>\n		<tr>\n			<th style="text-align:center">Ассоциативность</th>\n			<th>Оператор</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center"><em>clone</em>&nbsp;<em>new</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">правая</td>\n			<td style="text-align:center"><em>**</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center"><em>++</em>&nbsp;<em>--</em>&nbsp;<em>~</em>&nbsp;<em>(int)</em>&nbsp;<em>(float)</em>&nbsp;<em>(string)</em>&nbsp;<em>(array)</em>&nbsp;<em>(object)</em>&nbsp;<em>(bool)</em>&nbsp;<em>@</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center">instanceof</td>\n		</tr>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center">!</td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>*</em>&nbsp;<em>/</em>&nbsp;<em>%</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>+</em>&nbsp;<em>-</em>&nbsp;<em>.</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>&lt;&lt;</em>&nbsp;<em>&gt;&gt;</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">неассоциативна</td>\n			<td style="text-align:center"><em>&lt;</em>&nbsp;<em>&lt;=</em>&nbsp;<em>&gt;</em>&nbsp;<em>&gt;=</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">неассоциативна</td>\n			<td style="text-align:center"><em>==</em>&nbsp;<em>!=</em>&nbsp;<em>===</em>&nbsp;<em>!==</em>&nbsp;<em>&lt;&gt;</em>&nbsp;<em>&lt;=&gt;</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>&amp;</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>^</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>|</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>&amp;&amp;</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>||</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">правая</td>\n			<td style="text-align:center"><em>??&nbsp;</em><a href="https://www.php.net/manual/ru/language.operators.comparison.php#language.operators.comparison.coalesce">операторы сравнения с null</a></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>? :&nbsp;</em><a href="index.php?mode=view_article&amp;container=cc51d5da89b711eab1430cc47aaabd6c&amp;article=41762f298a5511eab1430cc47aaabd6c">тернарный оператор</a></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">правая</td>\n			<td style="text-align:center"><em>=</em>&nbsp;<em>+=</em>&nbsp;<em>-=</em>&nbsp;<em>*=</em>&nbsp;<em>**=</em>&nbsp;<em>/=</em>&nbsp;<em>.=</em>&nbsp;<em>%=</em>&nbsp;<em>&amp;=</em>&nbsp;<em>|=</em>&nbsp;<em>^=</em>&nbsp;<em>&lt;&lt;=</em>&nbsp;<em>&gt;&gt;=</em>&nbsp;<em>??=</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center"><em><a href="https://www.php.net/manual/ru/language.generators.syntax.php#control-structures.yield.from">yield from</a></em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center"><em><a href="https://www.php.net/manual/ru/language.generators.syntax.php#control-structures.yield">yield</a></em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">(н/а)</td>\n			<td style="text-align:center"><a href="https://www.php.net/manual/ru/function.print.php"><em>print</em></a></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>and</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>xor</em></td>\n		</tr>\n		<tr>\n			<td style="text-align:center">левая</td>\n			<td style="text-align:center"><em>or</em></td>\n		</tr>\n	</tbody>\n</table>\n', 14, '2020-04-29 22:32:44', '2020-04-29 23:17:21', 8393),
('350756b98a8811eab1430cc47aaabd6c', '4d6557a689b811eab1430cc47aaabd6c', 'Cookies', '<p><strong>Cookies</strong> позволяет хранить данные браузером удаленного компьютера. Это изпользуется для идентификации возвращающихся посетителей и хранения параметров веб-страниц. Например нужно написать счетчик посещения сайта. Для этого необходимо знать, какое число посещений сайта осуществлялось каждым конкретным посетителем.</p>\n\n<p>Установим в Cookie переменную, которая будет содержать информацию о посещениях. Она будет храниться на диске удаленного пользователя. Эта переменная будет считываться скриптом при обращении посетителя к серверу. Такой метод идентификации довольно выгоден. Не нужно хранить множество ненужной информации о IP-адресах. Нас не интересуют динамические IP-адреса, поскольку данные о своих посещениях хранятся непосредственно у посетителей сайта. Cookie используется для хранения небольшой по объему информации у посетителя сайта, например: настройки сайта, а также другой информации. Файлы Cookies хранятся на диске у посетителей сайтов и представляют собой обыкновенные текстовые файлы. Они содержат информацию, которая была в них записана сервером.</p>\n\n<p>Функция&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">setcookie()</code></strong>&nbsp;используется для установки Cookies. У этой функции шесть параметров, один из которых является обязательным:</p>\n\n<ul>\n	<li>\n	<p>name&nbsp;- задает имя (строк), закрепленное за Cookie.</p>\n	</li>\n	<li>\n	<p>value&nbsp;- определяет значение переменной (строка).</p>\n	</li>\n	<li>\n	<p>expire&nbsp;- время &quot;жизни&quot; переменной (целое число). Если данный параметр не указать, то Cookie будут &quot;жить&quot; до конца сессии, то есть до закрытия браузера. Если время указано, то, когда оно наступит, Cookie самоуничтожится.</p>\n	</li>\n	<li>\n	<p>path&nbsp;- путь к Cookie (строка).</p>\n	</li>\n	<li>\n	<p>domain&nbsp;- домен (строка). В качестве значения устанавливается имя хоста, с которого Cookie был установлен.</p>\n	</li>\n	<li>\n	<p>secure&nbsp;- передача Cookie через защищенное HTTPS-соединение</p>\n	</li>\n</ul>\n\n<p>Обычно используются только три первые параметра.</p>\n\n<p>Пример установки Cookies:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Устанавливаем Cookie до конца сессии:\nsetcookie("Test","Value");\n// Устанавливаем Cookie на один час после установки:\nsetcookie("My_Cookie","Value",time()+3600);\n?&gt;\n</code></pre>\n\n<p>Cookies должны устанавливаться до первого вывода информации в браузер. Исходя из этого следует устанавливать Cookies в самом начале скрипта. Cookies устанавливаются с помощью определенного заголовка сервера. Если скрипт что-либо выводит, то это означает, что начинается тело документа. Поэтому Cookies не будут установлены и может быть выведено предупреждение. Проверить успешность установки Cookies можно следующим методом:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Устанавливаем Cookie до конца сессии:\n// В случае успешной установки Cookie, функция setcookie возвращает TRUE:\nif (setcookie("Test","Value")) echo "&lt;h3&gt;Cookies успешно установлены!&lt;/h3&gt;";\n?&gt;\n</code></pre>\n\n<p>Функция&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">setcookie()</code></strong>&nbsp;возвращает <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>TRUE</strong></code>, если установка Cookie прошла успешно. В противном случае&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>setcookie()</strong></code>&nbsp;возвратит <strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">FALSE</code> </strong>и предупреждение (зависит от настроек PHP). Пример неудачной установки Cookie:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Cookies установить не удастся, поскольку перед отправкой\n// заголовка Cookie мы выводим в браузер строку ''Hello'':\necho "Hello";\n// Функция setcookie возвратит FALSE:\nif (setcookie("Test","Value")) echo "&lt;h3&gt;Cookie успешно установлен!&lt;/h3&gt;";\nelse echo "&lt;h3&gt;Cookie установить не удалось!&lt;/h3&gt;";\n// Выводит ''Cookie установить не удалось!''.\n?&gt;\n</code></pre>\n\n<p>Cookie установить не удалось, поскольку перед посылкой заголовка Cookie мы вывели в браузер строку &quot;Hello&quot;.</p>\n\n<p>Cookies и их значения хранятся в суперглобальных массивах и&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$_COOKIE</code></strong>&nbsp;и уст.&nbsp;<strong>$HTTP_COOKIE_VARS</strong>. Доступ к значениям осуществляется по имени установленных Cookies, например:</p>\n\n<pre>\n<code class="language-php">echo $_COOKIE[''my_cookie''];\n // Выводит значения установленной Cookie ''My_Cookie''\n</code></pre>\n\n<p>Пример&nbsp;установки Cookie и последующего его чтения:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Устанавливаем Cookie ''test'' со значением ''Hello'' на один час:\nsetcookie("test","Hello",time()+3600);\n// При следующем запросе скрипта выводит ''Hello'':\necho @$_COOKIE[''test''];\n?&gt;\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p>Для удаления Cookies необходимо вновь установить Cookie с идентичным именем и пустым параметром. После этого желательно разыменовать массив. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Удаляем Cookie ''Test'':\nsetcookie("Test","");\nunset($_COOKIE);\n?&gt;\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p>Можно установить массив Cookies, используя квадратные скобки в именах&nbsp;Cookies <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">[]</code>, а затем прочитать этот массив и значения этого массива:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Устанавливаем массив Cookies:\nsetcookie("cookie[1]", "Первый");\nsetcookie("cookie[2]", "Второй");\nsetcookie("cookie[3]", "Третий");\n\n// После перезагрузки страницы мы отобразим\n// Состав массива Cookies ''cookie'':\nif (isset($_COOKIE[''cookie''])) {\n    foreach ($_COOKIE[''cookie''] as $name =&gt; $value) {\n        echo "$name : $value &lt;br&gt;";\n    }\n}\n?&gt;\n</code></pre>\n\n<p>&nbsp;</p>\n', 44, '2020-04-30 05:13:39', '2020-04-30 05:13:39', 8859),
('361114238a5611eab1430cc47aaabd6c', 'e0d0c46489b711eab1430cc47aaabd6c', 'Альтернативный синтаксис', '<h1><strong>Альтернативный синтаксис управляющих структур</strong></h1>\n\n<p>PHP предлагает альтернативный синтаксис для некоторых его управляющих структур, а именно:&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>while</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>for</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>foreach</em></code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>switch</em></code>. В каждом случае основной формой альтернативного синтаксиса является изменение открывающей фигурной скобки на двоеточие <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">:</code>, а закрывающей скобки на&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>endif;</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>endwhile;</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>endfor;</em></code>,&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>endforeach;</em></code>&nbsp;или&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>endswitch;</em></code>&nbsp;соответственно.</p>\n\n<pre>\n<code class="language-php">&lt;?php if ($a == 5): ?&gt;\nA равно 5\n&lt;?php endif; ?&gt;</code></pre>\n\n<p>В приведенном выше примере, блок HTML &quot;A равно 5&quot; вложен внутрь структуры&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>, написанной с альтернативным синтаксисом. Блок HTML будет показан только если переменная&nbsp;<var><var>$a</var></var>&nbsp;равна 5.</p>\n\n<p>Альтернативный синтаксис также применяется и к&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>. Ниже приведена структура&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;с&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>&nbsp;в альтернативном формате:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nif ($a == 5):\n    echo "a равно 5";\n    echo "...";\nelseif ($a == 6):\n    echo "a равно 6";\n    echo "!!!";\nelse:\n    echo "a не равно ни 5 ни 6";\nendif;\n?&gt;</code></pre>\n\n<blockquote>\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>Замечание</strong>: Смешивание синтаксиса в одном и том же блоке управления не поддерживается.</div>\n</blockquote>\n\n<blockquote>\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>Внимание!&nbsp;</strong><em>Любой вывод (включая пробельные символы) между выражением&nbsp;<em>switch</em>&nbsp;и первым&nbsp;<em>case</em>&nbsp;приведут к синтаксической ошибке. Например, данный код не будет работать:</em></div>\n\n<pre>\n<code class="language-php">&lt;?php switch ($foo): ?&gt;\n    &lt;?php case 1: ?&gt;\n    ...\n&lt;?php endswitch ?&gt;</code></pre>\n\n<p><em>В то же время следующий пример будет работать, так как завершающий перевод строки после выражения&nbsp;<em>switch</em>&nbsp;считается частью закрывающего&nbsp;<em>?&gt;</em>&nbsp;и следовательно ничего не выводится между&nbsp;<em>switch</em>&nbsp;и&nbsp;<em>case</em>:</em></p>\n\n<pre>\n<code class="language-php">&lt;?php switch ($foo): ?&gt;\n&lt;?php case 1: ?&gt;\n    ...\n&lt;?php endswitch ?&gt;</code></pre>\n\n<p>&nbsp;</p>\n</blockquote>\n', 27, '2020-04-29 23:15:46', '2020-04-30 00:42:21', 5258),
('37ade2c38a8c11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Понятие ООП', '<h1><strong>Понятие ООП</strong></h1>\n\n<div><strong>Объе́ктно-ориенти́рованное программи́рование (ООП)</strong>&nbsp;&mdash;&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F" title="Методология программирования">методология программирования</a>, основанная на представлении программы в виде совокупности&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Объект (программирование)">объектов</a>, каждый из которых является экземпляром определённого&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BB%D0%B0%D1%81%D1%81_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Класс (программирование)">класса</a>, а классы образуют иерархию наследования.</div>\n\n<p>Идеологически ООП&nbsp;&mdash; подход к программированию как к моделированию информационных объектов, решающий на новом уровне основную задачу&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Структурное программирование">структурного программирования</a>: структурирование информации с точки зрения управляемости, что существенно улучшает управляемость самим процессом моделирования, что, в свою очередь, особенно важно при реализации крупных проектов.</p>\n\n<p>Управляемость для иерархических систем предполагает минимизацию избыточности данных (аналогичную&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%84%D0%BE%D1%80%D0%BC%D0%B0" title="Нормальная форма">нормализации</a>) и их целостность, поэтому созданное удобно управляемым&nbsp;&mdash; будет и удобно пониматься. Таким образом, через тактическую задачу управляемости решается стратегическая задача&nbsp;&mdash; транслировать понимание задачи программистом в наиболее удобную для дальнейшего использования форму.</p>\n\n<p>Основные&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF" title="Принцип">принципы</a>&nbsp;структурирования в случае ООП связаны с различными аспектами базового понимания предметной задачи, которое требуется для оптимального управления соответствующей моделью:</p>\n\n<ul>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%86%D0%B8%D1%8F_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" title="Абстракция данных">абстракция</a>&nbsp;для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте&nbsp;&mdash; контекстное понимание предмета, формализуемое в виде класса;</li>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%BA%D0%B0%D0%BF%D1%81%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Инкапсуляция (программирование)">инкапсуляция</a>&nbsp;для быстрой и безопасной организации собственно иерархической управляемости: чтобы было достаточно простой команды &laquo;что делать&raquo;, без одновременного уточнения как именно делать, так как это уже другой уровень управления;</li>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Наследование (программирование)">наследование</a>&nbsp;для быстрой и безопасной организации родственных понятий: чтобы было достаточно на каждом иерархическом шаге учитывать только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;</li>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Полиморфизм (информатика)">полиморфизм</a>&nbsp;для определения точки, в которой единое управление лучше распараллелить или наоборот&nbsp;&mdash; собрать воедино.</li>\n</ul>\n\n<p>То есть фактически речь идёт о прогрессирующей организации информации согласно первичным семантическим критериям: &laquo;важное/неважное&raquo;, &laquo;ключевое/подробности&raquo;, &laquo;родительское/дочернее&raquo;, &laquo;единое/множественное&raquo;. Прогрессирование, в частности, на последнем этапе даёт возможность перехода на следующий уровень детализации, что замыкает общий процесс.</p>\n\n<p>Обычный человеческий язык в целом отражает идеологию ООП, начиная с инкапсуляции представления о предмете в виде его имени и заканчивая полиморфизмом использования слова в переносном смысле, что в итоге развивает&nbsp;выражение представления через имя предмета до полноценного понятия-класса.</p>\n', 50, '2020-04-30 05:42:22', '2020-04-30 05:42:22', 7375),
('41762f298a5511eab1430cc47aaabd6c', 'cc51d5da89b711eab1430cc47aaabd6c', 'Тернарный оператор', '<h1><strong>Тернарный оператор</strong></h1>\n\n<p>Еще одним условным оператором является тернарный оператор <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">?:</code>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Пример использования тернарного оператора\n$action = (empty($_POST[''action''])) ? ''default'' : $_POST[''action''];\n\n// Приведенный выше код аналогичен следующему блоку с использованием if/else\nif (empty($_POST[''action''])) {\n    $action = ''default'';\n} else {\n    $action = $_POST[''action''];\n}\n\n?&gt;</code></pre>\n\n<p>Выражение&nbsp;<em><span style="background-color:#f1c40f">(expr1) ? (expr2) : (expr3)</span></em>&nbsp;интерпретируется как&nbsp;<strong>expr2</strong>, если&nbsp;<strong>expr1</strong>&nbsp;имеет значение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>, или как&nbsp;<strong>expr3</strong>, если&nbsp;<strong>expr1</strong>&nbsp;имеет значение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>.</p>\n\n<p>Начиная с версии PHP 5.3 также стало возможным не писать среднюю часть тернарного оператора. Выражение&nbsp;<em><span style="background-color:#f1c40f">expr1 ?: expr3</span></em>&nbsp;возвращает&nbsp;<strong>expr1</strong>, если&nbsp;<strong>expr1</strong>&nbsp;имеет значение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>&nbsp;и&nbsp;<strong>expr3</strong>&nbsp;в противном случае.</p>\n\n<blockquote>\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><strong>Замечание</strong>:&nbsp;Обратите внимание, что тернарный оператор является выражением и трактуется не как переменная, а как результат выражения. Это важно знать, если вы хотите вернуть переменную по ссылке. Выражение&nbsp;<em>return <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$var == 42 ? $a : $b</code>;</em>&nbsp;не будет работать в функции, возвращающей значение по ссылке, а в более поздних версиях PHP также будет выдано предупреждение.</div>\n</blockquote>\n\n<blockquote>\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><strong>Замечание</strong>: Рекомендуется избегать &quot;нагромождения&quot; тернарных выражений. Поведение PHP неочевидно при использовании нескольких тернарных операторов в одном выражении.</div>\n</blockquote>\n\n<p>Ещё пример использования тернарного оператора:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$var = $value ?? "Другое значение";\n\n// еквивалентно\n$var = isset($value) ? $value : "Другое значение";\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 21, '2020-04-29 23:08:56', '2020-04-29 23:26:05', 3672),
('43b073f98a5411eab1430cc47aaabd6c', 'cc51d5da89b711eab1430cc47aaabd6c', 'Операторы сравнения', '<h1><strong>Операторы сравнения PHP</strong></h1>\n\n<p>При изучении&nbsp;условного оператора if&nbsp;мы использовали знак&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>&gt;</strong></code>&nbsp;в условии, в качестве повторения статьи из раздела &quot;Операторы&quot;, можно закрепить информацию следующей табличкой:</p>\n\n<table border="4" cellpadding="3">\n	<tbody>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">==</code></td>\n			<td>Равенство</td>\n			<td>Истина, если $a равно $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">===</code></td>\n			<td>Идентичность</td>\n			<td>Истина, если $a равно $b, и они одного и того же типа</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">!=</code></td>\n			<td>Неравенство</td>\n			<td>Истина, если $a не равно $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&lt;&gt;</code></td>\n			<td>Неравенство</td>\n			<td>Истина, если $a не равно $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">!==</code></td>\n			<td>Неидентичность</td>\n			<td>Истина, если $a не равно $b, или они не одного типа</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&lt;</code></td>\n			<td>Меньше</td>\n			<td>Истина, если $a меньше $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&gt;</code></td>\n			<td>Больше</td>\n			<td>Истина, если $a больше $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&lt;=</code></td>\n			<td>Меньше или равно</td>\n			<td>Истина, если $a меньше или равно $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&gt;=</code></td>\n			<td>Больше или равно</td>\n			<td>Истина, если $a больше или равно $b</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Стоит обратить внимание, что оператор сравнения записывается как&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">==</code>, а не просто&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">=</code>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$speed = 45;\n\nif ($speed &lt;= 60)\n    echo "Скорость в пределах нормы";\n?&gt;</code></pre>\n', 19, '2020-04-29 23:01:50', '2020-04-29 23:01:50', 3325);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('4cec0c8a89b611eab1430cc47aaabd6c', '9ed9ea43890311eab1430cc47aaabd6c', 'Справка о языке программирования', '<h1><strong>PHP</strong></h1>\n\n<div><strong>PHP</strong>&nbsp;(<a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Английский язык">англ.</a>&nbsp;PHP: Hypertext Preprocessor&nbsp;&mdash; &laquo;PHP:&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80" title="Препроцессор">препроцессор</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%93%D0%B8%D0%BF%D0%B5%D1%80%D1%82%D0%B5%D0%BA%D1%81%D1%82" title="Гипертекст">гипертекста</a>&raquo;; первоначально&nbsp;Personal Home Page Tools&nbsp;&mdash; &laquo;Инструменты для создания персональных веб-страниц&raquo;)&nbsp;&mdash;&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="">скриптовый язык</a>&nbsp;общего назначения, интенсивно применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A5%D0%BE%D1%81%D1%82%D0%B8%D0%BD%D0%B3" title="Хостинг">хостинг-провайдеров</a>&nbsp;и является одним из лидеров среди языков, применяющихся для создания&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%B0%D0%B9%D1%82" title="Динамический сайт">динамических веб-сайтов</a>.</div>\n\n<p>Язык и его интерпретатор (<a href="https://ru.wikipedia.org/wiki/Zend_Engine" title="Zend Engine">Zend Engine</a>) разрабатываются группой энтузиастов в рамках проекта с&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5" title="Открытое программное обеспечение">открытым кодом</a>. Проект распространяется под&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_PHP" title="Лицензия PHP">собственной лицензией</a>, несовместимой с&nbsp;<a href="https://ru.wikipedia.org/wiki/GNU_GPL" title="GNU GPL">GNU GPL</a>.</p>\n\n<p><img alt="phplogo" src="uploads/63a9f0ea7bb98050796b649e85481845/phplogo.png" style="float:right; height:135px; width:250px" /></p>\n\n<p>В области веб-программирования, в частности серверной части, PHP&nbsp;&mdash; один из популярных&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Скриптовый язык">сценарных языков</a>&nbsp;(наряду с&nbsp;<a href="https://ru.wikipedia.org/wiki/JSP" title="JSP">JSP</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Perl" title="Perl">Perl</a>&nbsp;и языками, используемыми в&nbsp;<a href="https://ru.wikipedia.org/wiki/ASP.NET" title="ASP.NET">ASP.NET</a>).</p>\n\n<p>Популярность в области построения&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%B0%D0%B9%D1%82" title="Веб-сайт">веб-сайтов</a>&nbsp;определяется наличием большого набора встроенных средств и дополнительных модулей для разработки веб-приложений. Основные из них:</p>\n\n<ul>\n	<li>автоматическое извлечение&nbsp;<a href="https://ru.wikipedia.org/wiki/HTTP#POST" title="HTTP">POST</a>- и&nbsp;<a href="https://ru.wikipedia.org/wiki/HTTP#GET" title="HTTP">GET</a>-параметров, а также переменных окружения веб-сервера в предопределённые массивы;</li>\n	<li>взаимодействие с большим количеством различных систем управления базами данных через дополнительные модули (<a href="https://ru.wikipedia.org/wiki/MySQL" title="MySQL">MySQL</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/MySQLi" title="MySQLi">MySQLi</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/SQLite" title="SQLite">SQLite</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/PostgreSQL" title="PostgreSQL">PostgreSQL</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=Oracle_(OCI8&amp;action=edit&amp;redlink=1" title="Oracle (OCI8 (страница отсутствует)">Oracle (OCI8</a>),&nbsp;<a href="https://ru.wikipedia.org/wiki/Oracle_(%D0%A1%D0%A3%D0%91%D0%94)" title="Oracle (СУБД)">Oracle</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Microsoft_SQL_Server" title="Microsoft SQL Server">Microsoft SQL Server</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Sybase" title="Sybase">Sybase</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/ODBC" title="ODBC">ODBC</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/MSQL" title="MSQL">mSQL</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/IBM_DB2" title="IBM DB2">IBM DB2</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Cloudscape" title="Cloudscape">Cloudscape</a>&nbsp;и&nbsp;<a href="https://ru.wikipedia.org/wiki/Apache_Derby" title="Apache Derby">Apache Derby</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Informix" title="Informix">Informix</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=Ovrimos_SQL&amp;action=edit&amp;redlink=1" title="Ovrimos SQL (страница отсутствует)">Ovrimos SQL</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Lotus_Notes" title="Lotus Notes">Lotus Notes</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=DB%2B%2B&amp;action=edit&amp;redlink=1" title="DB++ (страница отсутствует)">DB++</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/DBM" title="DBM">DBM</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/DBase" title="DBase">dBase</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=DBX_(%D0%A1%D0%A3%D0%91%D0%94)&amp;action=edit&amp;redlink=1" title="DBX (СУБД) (страница отсутствует)">DBX</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=FrontBase&amp;action=edit&amp;redlink=1" title="FrontBase (страница отсутствует)">FrontBase</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=FilePro&amp;action=edit&amp;redlink=1" title="FilePro (страница отсутствует)">FilePro</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=Ingres_II&amp;action=edit&amp;redlink=1" title="Ingres II (страница отсутствует)">Ingres II</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=SESAM&amp;action=edit&amp;redlink=1" title="SESAM (страница отсутствует)">SESAM</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Firebird" title="Firebird">Firebird</a>&nbsp;/&nbsp;<a href="https://ru.wikipedia.org/wiki/InterBase" title="InterBase">InterBase</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=Paradox_File_Access&amp;action=edit&amp;redlink=1" title="Paradox File Access (страница отсутствует)">Paradox File Access</a>,&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=MaxDB&amp;action=edit&amp;redlink=1" title="MaxDB (страница отсутствует)">MaxDB</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81" title="Интерфейс">Интерфейс</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/PDO" title="PDO">PDO</a>),&nbsp;<a href="https://ru.wikipedia.org/wiki/Redis" title="Redis">Redis</a>;</li>\n	<li>автоматизированная отправка&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8_HTTP" title="Заголовки HTTP">HTTP-заголовков</a>;</li>\n	<li>работа с HTTP-авторизацией;</li>\n	<li>работа с&nbsp;<a href="https://ru.wikipedia.org/wiki/Cookies" title="Cookies">cookies</a>&nbsp;и сессиями;</li>\n	<li>работа с локальными и удалёнными файлами,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BA%D0%B5%D1%82_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D1%8B%D0%B9_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81)" title="Сокет (программный интерфейс)">сокетами</a>;</li>\n	<li>обработка файлов, загружаемых на сервер;</li>\n	<li>работа с&nbsp;<a href="https://ru.wikipedia.org/wiki/XForms" title="XForms">XForms</a>.</li>\n</ul>\n\n<p>В настоящее время PHP используется сотнями тысяч разработчиков. Согласно рейтингу корпорации TIOBE, базирующемуся на данных поисковых систем, в мае 2016 года PHP находился на 6 месте среди языков программирования. К крупнейшим сайтам, использующим PHP, относятся&nbsp;<a href="https://ru.wikipedia.org/wiki/Facebook" title="Facebook">Facebook</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Wikipedia" title="Wikipedia">Wikipedia</a>&nbsp;и др.</p>\n\n<p>Входит в&nbsp;<a href="https://ru.wikipedia.org/wiki/LAMP" title="LAMP">LAMP</a>&nbsp;&mdash; распространённый набор программного обеспечения для создания и&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A5%D0%BE%D1%81%D1%82%D0%B8%D0%BD%D0%B3" title="Хостинг">хостинга</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%B0%D0%B9%D1%82" title="Веб-сайт">веб-сайтов</a>&nbsp;(<a href="https://ru.wikipedia.org/wiki/Linux" title="Linux">Linux</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Apache_HTTP_Server" title="Apache HTTP Server">Apache</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/MySQL" title="MySQL">MySQL</a>, PHP).</p>\n\n<div>\n<h2><strong>Среды разработки (IDE)</strong></h2>\n\n<ul>\n	<li><strong>DevPHP</strong></li>\n</ul>\n\n<p>Первопроходцем в этой категории является студия&nbsp;<a href="https://sourceforge.net/projects/devphp/" title="sourceforge:projects/devphp/">DevPHP-IDE</a>, которая использовала&nbsp;<a href="https://ru.wikipedia.org/wiki/Kylix" title="Kylix">Kylix</a>(<a href="https://ru.wikipedia.org/wiki/Embarcadero_Delphi" title="Embarcadero Delphi">Delphi</a>) в качестве основы интерфейса и php-<a href="https://ru.wikipedia.org/w/index.php?title=Command-line_interface&amp;action=edit&amp;redlink=1" title="Command-line interface (страница отсутствует)">cli</a>&nbsp;для создания пользовательских программ.</p>\n\n<p>Она включала в себя редактор кода, несколько инструментов и визуальный просмотр HTML-страниц.</p>\n\n<p>Впервые была представлена в 2002 году, сейчас имеет 3 стабильные версии, но разработка не продолжается&nbsp;&mdash; остановилась из-за гибели главного разработчика в автокатастрофе.</p>\n\n<ul>\n	<li><strong>CodeGear Rad Studio (Расширение)</strong></li>\n</ul>\n\n<p>После DevPHP IDE появилось расширение&nbsp;&mdash; набор компонентов для&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=CodeGear_Delphi&amp;action=edit&amp;redlink=1" title="CodeGear Delphi (страница отсутствует)">CodeGear Rad Studio 2009</a>&nbsp;на базе php4delphi с некоторыми улучшениями (веб-элементы, инспектор, отладчик), поддержка её длилась в течение четырёх версий, вторая из которых вошла в платное расширение&nbsp;<a href="https://ru.wikipedia.org/w/index.php?title=CodeGear_Delphi&amp;action=edit&amp;redlink=1" title="CodeGear Delphi (страница отсутствует)">Rad Studio 2010</a>: была возможность использовать скрипты, задавать стиль веб-компонентам, просматривать стили и веб-страницы до сборки программы, запускать локальный сервер, собирать программу, как отдельное приложение и отлаживать код. С выходом Delphi XE расширение получило название RADPHP Xe. Далее сама студия стала называться Embarcadero Delphi, и работа над данным расширением была приостановлена на неопределённый срок.</p>\n\n<ul>\n	<li><strong>DevelStudio (RAD)</strong></li>\n</ul>\n\n<p>В 2009 году на базе php4delphi началась разработка среды для создания графических PHP-приложений, к разработке которой позже присоединился Ростислав Романов. Среда получила название&nbsp;<a href="https://web.archive.org/web/20190406154103/http://develstudio.org/" rel="nofollow">PHP DevelStudio</a>, первой опубликованной версией стала 0.1.7. DevelStudio имела небольшое количество компонентов в наборе инструментов и работала на устаревшем PHP 4. Во второй версии DevelStudio получила поддержку PHP 5. Были добавлены потоки, произведены множественные изменения и улучшения. Код сборки программ стал закрытым, предыдущие версии программы и сообщения на форуме были удалены с целью воспрепятствования злоумышленникам.</p>\n\n<p>Вторая версия DevelStudio так же получила набор компонентов&nbsp;<a href="https://www.alphaskins.com/" rel="nofollow">AlphaControls</a>, вследствие чего её стали использовать для создания&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D0%B0%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0" title="Вредоносная программа">вредоносных программ</a>&nbsp;в силу её простоты и понятности. Популярные на то время антивирусы (MacAffee,&nbsp;<a href="https://ru.wikipedia.org/wiki/AVG_AntiVirus" title="AVG AntiVirus">AVG</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/Avira_Antivirus" title="Avira Antivirus">Avira</a>) стали распознавать любые скомпилированные в DevelStudio программы как вирусы.</p>\n\n<p>Через некоторое время автор AlphaControls обратился с жалобой к разработчикам DevelStudio, и набор компонентов был полностью удалён из среды, однако сохранился в уже существовавшей версии, удалить которую с форума в этот раз не представлялось возможным.</p>\n\n<p>На момент 2012 года вышла последняя версия среды&nbsp;&mdash; 3.0.2, где появился новый набор компонентов, в том числе браузер&nbsp;<a href="https://ru.wikipedia.org/wiki/Chromium" title="Chromium">Chromium</a>&nbsp;вместо&nbsp;<a href="https://ru.wikipedia.org/wiki/Internet_Explorer" title="Internet Explorer">IE</a>, что привлекло внимание веб-разработчиков и пользователей среды &laquo;Алгоритм&raquo;. На тот момент компиляция программ в &laquo;Алгоритме&raquo; была платной, поэтому DevelStudio как новая и бесплатная среда разработки переманила на себя бо́льшую часть аудитории.</p>\n\n<p>В 2014 году начались первые попытки по восстановлению среды, в этот раз со стороны&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE" title="Сообщество">сообщества</a>. В конце 2018 года исходный код был восстановлен и доступен в&nbsp;<a href="https://github.com/kashaketcompany/soulengine" rel="nofollow">этом</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9" title="Репозиторий">репозитории</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/GitHub" title="GitHub">GitHub</a>.</p>\n\n<p>В 2019 году сообщество обратилось к создателю DevelStudio с целью изменения политики распространения среды, вследствие чего она стала доступной для обновления и редактирования. Из-за жалоб на отсутствие ссылок на использованные библиотеки (DCEF, PHP4Delphi, TSizeCtrl, SynEdit)&nbsp;<a href="https://web.archive.org/web/20190112115635/http://community.develstudio.org/" rel="nofollow">форум</a>&nbsp;был удалён, а одна из страниц с описанием среды была перенаправлена на главную страницу сайта. С этого момента DevelStudio официально принадлежит сообществу.</p>\n\n<ul>\n	<li><strong>DevelNext (DN)</strong></li>\n</ul>\n\n<p>Параллельно с этим главный разработчик DevelStudio начал создавать &laquo;реинкарнацию&raquo; предыдущей среды. Он взял за основу графическую библиотеку&nbsp;<a href="https://ru.wikipedia.org/wiki/JavaFX" title="JavaFX">JavaFX</a>, в результате вышла полностью новая среда, с поддержкой&nbsp;<a href="https://ru.wikipedia.org/wiki/CSS" title="CSS">CSS</a>,&nbsp;<strong>но без полной поддержки PHP</strong>&nbsp;&mdash; проект был основан на собственном языке jPHP. Его особенностью является&nbsp;<a href="https://ru.wikipedia.org/wiki/JIT" title="JIT">JIT</a>-компилятор и работа на&nbsp;<a href="https://ru.wikipedia.org/wiki/JVM" title="JVM">JVM</a>.</p>\n\n<p>В 16-й версии среда DevelNext получила поддержку php 7 и была расширена энтузиастами для разработки под платформу&nbsp;<a href="https://ru.wikipedia.org/wiki/OS_Android" title="OS Android">OS Android</a>.</p>\n\n<p>На данный момент автор и энтузиасты трудятся над 19-й версией (ранее 17-я).</p>\n\n<ul>\n	<li><strong>PHPQt</strong></li>\n</ul>\n\n<p>В 2015 году Александр Казанцев начал изучать алгоритмы разработки интерфейсов и создал расширение&nbsp;<a href="https://github.com/vjandrea/php-qt" rel="nofollow">php_qml</a>, что давало возможность использовать виджеты из библиотеки QT, но имело поддержку лишь одной платформы&nbsp;&mdash; Windows.</p>\n\n<p>С этого началась разработка&nbsp;<a href="https://phpqt.ru/" rel="nofollow">PHPQt</a>, первые версии не обратили особого внимания со стороны веб-разработчиков, поэтому автор начал углублённо улучшать расширение.</p>\n\n<p>28 июля 2015 года был опубликован первый вариант компилятора проектов, на тот момент это был простой исполнитель скриптов(сценариев), который прикреплял php-код к стабу (подобно DevelStudio), и имел зависимость от Windows API, на этой стадии поддерживались уже почти все виджеты и многопоточность, была лёгкая оптимизация php-кода. С этого момента движок стали называть PQEngine,</p>\n\n<p>3 августа 2016 года вышла пятая версия компилятора приложений (PqBuilder), что перешёл на базу PlastiQ и имел поддержку уже новейшего, на тот момент, php 7, проекты получили более полноценный компилятор и уже не требовали наличия PqEngine.dll вблизи с исполняемым файлом, вместо этого визуальные библиотеки стали добавляться динамично&nbsp;&mdash; как файлы, а не вшиваться в PQEngine.dll. Такой шаг был предпринят для совместимости с другими системами и оригинальными библиотеками Qt.</p>\n\n<p>С появлением шестой версии проект стал дополнением для среды Qt Studio, а компилятор стал всего-навсего оптимизатором кода перед конечной сборкой программы. Появился полноценный редактор интерфейса, подсказки в редакторе кода и начала создаваться документация. С этого момента сделали анонс про создание среды PqStudio, но её разработка не зашла далеко.</p>\n\n<ul>\n	<li><strong>WinForms PHP</strong></li>\n</ul>\n\n<p>В 2018 году появился проект, объединяющий возможности Windows Forms (.NET Framework) и PHP 7. Его разработка медленными темпами ведётся и сейчас. На текущий момент в движке доступны практически все функции для ООП. Среда находится на стадии приватной разработки. К исполняемому файлу по умолчанию прилагается php7ts.dll.</p>\n\n<div>\n<h2><strong>Особенности интерпретатора</strong></h2>\n\n<p>PHP-скрипты обычно обрабатываются&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80" title="Интерпретатор">интерпретатором</a>&nbsp;в порядке, обеспечивающем&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%BE%D1%81%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C" title="Кроссплатформенность">кроссплатформенность</a>&nbsp;разработанного приложения:</p>\n\n<ol>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B5%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7" title="Лексический анализ">лексический анализ</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D1%85%D0%BE%D0%B4%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4" title="Исходный код">исходного кода</a>&nbsp;и генерация&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B5%D0%BA%D1%81%D0%B5%D0%BC%D0%B0_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Лексема (информатика)">лексем</a>,</li>\n	<li><a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7" title="Синтаксический анализ">синтаксический анализ</a>&nbsp;полученных лексем,</li>\n	<li>генерация&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B9%D1%82-%D0%BA%D0%BE%D0%B4" title="Байт-код">байт-кода</a>,</li>\n	<li>выполнение байт-кода интерпретатором (без создания&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D0%BD%D1%8F%D0%B5%D0%BC%D1%8B%D0%B9_%D1%84%D0%B0%D0%B9%D0%BB" title="Исполняемый файл">исполняемого файла</a>).</li>\n</ol>\n\n<p>Для увеличения быстродействия приложений возможно использование специального&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5" title="">программного обеспечения</a>, так называемых&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BA%D1%81%D0%B5%D0%BB%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80_PHP" title="Акселератор PHP">акселераторов</a>. Принцип их работы заключается в&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%8D%D1%88%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Кэширование">кэшировании</a>&nbsp;однажды сгенерированного байт-кода в&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C" title="Оперативная память">памяти</a>&nbsp;и/или на&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%96%D1%91%D1%81%D1%82%D0%BA%D0%B8%D0%B9_%D0%B4%D0%B8%D1%81%D0%BA" title="Жёсткий диск">диске</a>, таким образом, из процесса работы приложения исключаются этапы 1&mdash;3, что в общем случае ведёт к значительному ускорению работы.</p>\n\n<p>Важной особенностью является то, что разработчику нет необходимости заботиться о распределении и&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Сборка мусора (программирование)">освобождении</a>&nbsp;памяти. Ядро PHP реализует средства для автоматического управления памятью; вся выделенная память возвращается системе после завершения работы скрипта.</p>\n\n<h2><strong>Ссылки на источники информации</strong></h2>\n\n<div><a href="https://www.php.net/">https://www.php.net/</a></div>\n\n<div><a href="http://php720.com/">http://php720.com/</a></div>\n\n<div><a href="https://htmlacademy.ru/tutorial/php">https://htmlacademy.ru/tutorial/php</a><br />\n<a href="http://www.php.su/lessons/">http://www.php.su/lessons/</a><br />\n<a href="https://fructcode.com/ru/courses/php-and-mysql/">https://fructcode.com/ru/courses/php-and-mysql/</a><br />\n<a href="https://myblaze.ru/php_lessons/">https://myblaze.ru/php_lessons/</a><br />\n<a href="https://site-do.ru/php/">https://site-do.ru/php/</a></div>\n</div>\n</div>\n', 1, '2020-04-29 04:11:05', '2020-04-29 10:59:29', 29020),
('4d27ff0b8afa11eab1430cc47aaabd6c', '4d65624589b811eab1430cc47aaabd6c', 'Часть 1', '<h2><strong>Объявления скалярных типов</strong></h2>\n\n<p>Объявления скалярных типов&nbsp;введены в двух вариантах: принудительный (по умолчанию) и строгий. Следующие типы могут использоваться для объявления параметров (в обоих вариантах): строки (string), целые (<em>int</em>), числа с плавающей точкой (float) и логические значения (<em>bool</em>). Они дополняют аргументы других типов, введенных в PHP 5: имена классов, интерфейсов,&nbsp;array&nbsp;и&nbsp;callable.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Принудительный режим\nfunction sumOfInts(int ...$ints)\n{\n    return array_sum($ints);\n}\n\nvar_dump(sumOfInts(2, ''3'', 4.1));</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">int(9)</div>\n\n<p>Для установки строгого режима, в самом начале файла необходимо поместить одну директиву&nbsp;<em>declare</em>. Это означает, что строгость объявления скалярных типов работает на уровне файла и не затрагивает весь остальной код. Эта директива затрагивает не только объявления параметров, но и возвращаемые значения функций, встроенные функции PHP и функции загруженных расширений.</p>\n\n<h2><strong>Объявления возвращаемых значений</strong></h2>\n\n<p>В PHP 7 добавлена поддержка&nbsp;объявления возвращаемого типа. Аналогично как и&nbsp;объявления типов аргументов, объявление типа возвращаемого значения указывает, значение какого типа должна вернуть функция. Для объявления типа возвращаемого значения доступны все те же&nbsp;типы, что и для объявления типов аргументов.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\nfunction arraysSum(array ...$arrays): array\n{\n    return array_map(function(array $array): int {\n        return array_sum($array);\n    }, $arrays);\n}\n\nprint_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<pre style="background: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); padding: 5px 10px;">\n<tt>Array\n(\n    [0] =&gt; 6\n    [1] =&gt; 15\n    [2] =&gt; 24\n)</tt>\n</pre>\n\n<h2><strong>Оператор объединения с null</strong></h2>\n\n<p>Был добавлен оператор объединения с null (<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>??</em></code>), являющийся синтаксическим сахаром для достаточно распространенного действия, когда совместно используются тернарный оператор и функция&nbsp;<strong>isset()</strong>. Он возвращает первый операнд, если он задан и не равен&nbsp;<strong><code>NULL</code></strong>, а в обратном случае возвращает второй операнд.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Извлекаем значение $_GET[''user''], а если оно не задано,\n// то возвращаем ''nobody''\n$username = $_GET[''user''] ?? ''nobody'';\n// Это идентично следующему коду:\n$username = isset($_GET[''user'']) ? $_GET[''user''] : ''nobody'';\n\n// Данный оператор можно использовать в цепочке.\n// В этом примере мы сперва проверяем, задан ли $_GET[''user''], если нет,\n// то проверяем $_POST[''user''], и если он тоже не задан, то присваеваем ''nobody''.\n$username = $_GET[''user''] ?? $_POST[''user''] ?? ''nobody'';\n?&gt;</code></pre>\n\n<h2><strong>Оператор spaceship (космический корабль)</strong></h2>\n\n<p>Этот оператор предназначен для сравнения двух выражений. Он возвращает -1, 0 или 1 если&nbsp;<var><var>$a</var></var>, соответственно, меньше, равно или больше чем&nbsp;<var><var>$b</var></var>. Сравнение производится в соответствии с&nbsp;правилами сравнения типов&nbsp;PHP.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Целые числа\necho 1 &lt;=&gt; 1; // 0\necho 1 &lt;=&gt; 2; // -1\necho 2 &lt;=&gt; 1; // 1\n\n// Числа с плавающей точкой\necho 1.5 &lt;=&gt; 1.5; // 0\necho 1.5 &lt;=&gt; 2.5; // -1\necho 2.5 &lt;=&gt; 1.5; // 1\n \n// Строки\necho "a" &lt;=&gt; "a"; // 0\necho "a" &lt;=&gt; "b"; // -1\necho "b" &lt;=&gt; "a"; // 1\n?&gt;</code></pre>\n\n<h2><strong>Определение констант массивов с помощью&nbsp;define()</strong></h2>\n\n<p>Можно определить константу типа&nbsp;array&nbsp;с помощью функции<strong>&nbsp;define()</strong>. В PHP 5.6 такие константы можно было задавать только с помощью&nbsp;<em>const</em>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\ndefine(''ANIMALS'', [\n    ''dog'',\n    ''cat'',\n    ''bird''\n]);\n\necho ANIMALS[1]; // выводит "cat"\n?&gt;</code></pre>\n\n<h2><strong>Анонимные классы</strong></h2>\n\n<p>Была добавлена поддержка анонимных классов с помощью&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>new class</em></code>. Их можно использовать тогда, когда нужен одноразовый класс и создавать полноценный класс, а потом его объект не имеет смысла:</p>\n\n<pre>\n<code class="language-php">&lt;?php\ninterface Logger {\n    public function log(string $msg);\n}\n\nclass Application {\n    private $logger;\n\n    public function getLogger(): Logger {\n         return $this-&gt;logger;\n    }\n\n    public function setLogger(Logger $logger) {\n         $this-&gt;logger = $logger;\n    }\n}\n\n$app = new Application;\n$app-&gt;setLogger(new class implements Logger {\n    public function log(string $msg) {\n        echo $msg;\n    }\n});\n\nvar_dump($app-&gt;getLogger());\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">object(class@anonymous)#2 (0) {<br />\n}</div>\n\n<h2><strong>Синтаксис кодирования Unicode</strong></h2>\n\n<p>Он принимает шестнадцатеричный код Unicode и записываем его в формате UTF-8 в двойных кавычках или формате heredoc. Любой корректный код будет принят. Ведущие нули по желанию.</p>\n\n<pre>\n<code class="language-php">echo "\\u{aa}";\necho "\\u{0000aa}";\necho "\\u{9999}";</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">&ordf;<br />\n&ordf; (То же самое, что и первый вариант, но с ведущими нулями)<br />\n香</div>\n\n<h2><strong>Closure::call()</strong></h2>\n\n<p><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">Closure::call()</code>&nbsp;является более производительным и коротким способом временного связывания области действия объекта с замыканием и его вызовом.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass A {private $x = 1;}\n\n// До PHP 7\n$getX = function() {return $this-&gt;x;};\n$getXCB = $getX-&gt;bindTo(new A, ''A''); // промежуточное замыкание\necho $getXCB();\n\n// PHP 7+\n$getX = function() {return $this-&gt;x;};\necho $getX-&gt;call(new A);</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">1<br />\n1</div>\n\n<h2><strong>unserialize()&nbsp;с фильтрацией</strong></h2>\n\n<p>Этот функционал обеспечивает более высокий уровень безопасности при десериализации объектов с непроверенными данными. Это позволяет предотвратить возможную инъекцию кода, позволяя разработчику использовать белый список классов для десериализации.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\n// Преобразование всех объектов в __PHP_Incomplete_Class\n$data = unserialize($foo, ["allowed_classes" =&gt; false]);\n\n// Преобразование всех объектов, кроме MyClass и MyClass2 в __PHP_Incomplete_Class\n$data = unserialize($foo, ["allowed_classes" =&gt; ["MyClass", "MyClass2"]]);\n\n// Поведение по умолчанию принимает все классы (можно просто не задавать второй аргумент)\n$data = unserialize($foo, ["allowed_classes" =&gt; true]);</code></pre>\n\n<h3>&nbsp;</h3>\n\n<ul>\n</ul>\n', 58, '2020-04-30 18:50:22', '2020-04-30 18:50:22', 10492),
('50e11dd98a8711eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Стрелочные функции', '<h1><strong>Стрелочные функции</strong></h1>\n\n<p>Стрелочные функции были введены в PHP 7.4, как более лаконичный синтаксис для&nbsp;<em>анонимных функций</em>.</p>\n\n<p>И анонимные, и стрелочные функции реализованы с использованием класса&nbsp;<a href="https://www.php.net/manual/ru/class.closure.php">Closure</a>.</p>\n\n<p>Базовая форма стрелочных функций&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">fn (argument_list) =&gt; expr</code>.</p>\n\n<p>Стрелочные функции поддерживают те же функции, что и&nbsp;анонимные функции, за исключением того, что использование переменных из родительской области всегда выполняется автоматически.</p>\n\n<p>Когда переменная, используемая в выражении, определена в родительской области, она будет неявно захвачена по значению. В следующем примере функции&nbsp;<var><var>$fn1</var></var>&nbsp;и&nbsp;<var><var>$fn2</var></var>&nbsp;ведут себя одинаково.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$y = 1;\n$fn1 = fn($x) =&gt; $x + $y;\n// эквивалентно использованию $y по значению:\n$fn2 = function ($x) use ($y) {\n    return $x + $y;\n};\nvar_export($fn1(3));\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">4</div>\n\n<p>Это также работает, если стрелочные функции вложены:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$z = 1;\n$fn = fn($x) =&gt; fn($y) =&gt; $x * $y + $z;\n// Выведет 51\nvar_export($fn(5)(10));\n?&gt;</code></pre>\n\n<p>Подобно анонимным функциям, синтаксис стрелочных функций допускает произвольные сигнатуры функций, включая типы параметров и возвращаемых значений, значения по умолчанию, переменные, а также передачу и возврат по ссылке. Все перечисленные ниже являются корректными примерами стрелочных функций:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfn(array $x) =&gt; $x;\nstatic fn(): int =&gt; $x;\nfn($x = 42) =&gt; $x;\nfn(&amp;$x) =&gt; $x;\nfn&amp;($x) =&gt; $x;\nfn($x, ...$rest) =&gt; $rest;\n?&gt;</code></pre>\n\n<p>Стрелочные функции используют привязку переменных по значению. Это примерно эквивалентно выполнению&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">use($x)</code></strong>&nbsp;для каждой переменной&nbsp;<var><var>$x</var></var>, используемой внутри стрелочной функции. Привязка по значению означает, что невозможно изменить какие-либо значения из внешней области. Вместо этого можно использовать&nbsp;анонимные функции&nbsp;для привязок по ссылкам.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$x = 1;\n$fn = fn() =&gt; $x++; // Никакого эффекта\n$fn();\nvar_export($x);  // Выведет 1\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 43, '2020-04-30 05:07:17', '2020-04-30 05:07:17', 3940),
('51c97c0389b711eab1430cc47aaabd6c', '046b312f89b711eab1430cc47aaabd6c', 'Конфигурирование', '<div>\n<h1><strong>Конфигурирование PHP&nbsp;&nbsp;</strong></h1>\n\n<div>В предыдущей статье&nbsp;были рассмотрены вопросы установки PHP и подключения его в качестве модуля web-сервера Apache. И было сказано, что если тестирование (запуск простенького скрипта PHP состоящего из одной функции&nbsp;<strong><em>phpinfo()</em></strong>) прошло успешно, можно переходить к изучению основ языка программирования в Internet - PHP. В общем-то это верно, но лишь отчасти.</div>\n\n<div>Как и web-сервер Apache, PHP имеет конфигурационный файл&nbsp;<strong><em>php.ini</em></strong>&nbsp;весьма похожий по своей структуре на&nbsp;<strong><em>htppd.conf</em></strong>. Некоторые последние релизы PHP не требуют использование конфигурационного файла и используют в этом случае установки по умолчанию. Вот только этих установок по умолчанию, как правило, совсем не хватает для более менее серьезной работы с PHP. Поэтому, наличие конфигурационного файла&nbsp;<strong><em>php.ini</em></strong>&nbsp;крайне желательно (а в некоторых версиях просто необходимо) в любом случае.</div>\n\n<div>\n<p>Итак, где же взять этот&nbsp;<strong><em>php.ini</em></strong>&nbsp;и куда его положить? В корневом каталоге php есть два файла&nbsp;<strong><em>php.ini-dist</em></strong>&nbsp;и&nbsp;<strong><em>php.ini-recommended</em></strong>. Чем они различаются - мы здесь обсуждать не будем. Один из них (например, php.ini-recommended) и есть наш&nbsp;<strong><em>php.ini</em></strong>. Берем один из этих файлов, переименовываем его в&nbsp;<strong><em>php.ini</em></strong>&nbsp;и копируем в корневой каталог установки вашей операционной системы (скорее всего C:/WINDOWS). Это универсальное местоположение конфигурационного файла PHP. В любом случае, при старте PHP всегда найдет его и прочтет все заданные инструкции (директивы). Однако, если вас по каким-то причинам это местоположение&nbsp;<strong><em>php.ini</em></strong>&nbsp;не устраивает, его можно изменить добавив в конфигурационный файл Apache&nbsp;<strong><em>httpd.conf</em></strong>&nbsp;следующие инструкции (все это описано в файле&nbsp;<strong><em>install.txt</em></strong>, расположенном в корневом каталоге PHP):</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>PHPIniDir &quot;c:/web/php7.4.2&quot;</strong>&nbsp;</div>\n</div>\n\n<div>Здесь путь &quot;<strong>c:/web/php7.4.2</strong>&quot; может изменяться в зависимости от ваших пожеланий.</div>\n\n<p>&nbsp;</p>\n\n<div>Теперь, после того как мы выяснили где взять&nbsp;<strong><em>php.ini</em></strong>&nbsp;и куда его положить, желательно разобраться с тем, что он собой представляет и что позволяет конфигурировать.&nbsp; Это обычный текстовой файл. Если строка начинается с символа &quot;;&quot; - она считается комментарием, все остальное - некие глобальные параметры принимающие те или иные значения в соотвествии с которыми устанавливаются различные режимы работы PHP. Ниже, для наглядности, приведены некоторые возможности конфигурирования PHP:\n\n<ul>\n	<li><em>установка максимального времени обработки php-скрипта, после чего его выполнение прерывается;</em></li>\n	<li><em>настройка вывода (или не вывода) на экран дисплея сообщений об ошибках или предупреждениях в процессе проверки синтаксиса php-скрипта или в процессе его исполнения;</em></li>\n	<li><em>задание способа передачи параметров между php-скриптами;</em></li>\n	<li><em>настройка различных путей и директорий (например, каталог куда разрешается клиенту загружать файлы на сервер);</em></li>\n	<li><em>подключение дополнительных библиотек для работы с документами: hyperwave, PDF, XML и др.;</em></li>\n	<li><em>подключение дополнительных библиотек для работы с СУБД: dBASE, FilePro, InterBase, Microsoft SQL Server,&nbsp;MySQL, ODBC, Oracle, PostgreSQL, Sybase и др.;</em></li>\n	<li><em>подключение библиотек для работы с графическими изображениями (как статическими, так и динамическими);</em></li>\n	<li><em>настройка режимов работы с электронной почтой;</em></li>\n	<li><em>...</em></li>\n</ul>\n</div>\n\n<div>&nbsp; Мы не будем в данным момент углубляться в изучение всех возможностей этого файла настройки. Для нас могут быть важны следующие настройки:\n<ul>\n	<li><em>Найдём в файле php.ini строку со следующим содержанием:&nbsp;display_errors = Off&nbsp;и заменим ее на строку&nbsp;display_errors = On. Это дает &quot;задание&quot; PHP выводить на экран ошибки и предупреждения в процессе обработки php-скрипта. В противном случае, мы можем получить пустой экран дисплея в результате некорректной работы php-скрипта (либо ошибки синтаксиса, либо некорректный алгоритм) и не узнать в чем проблема.</em></li>\n	<li><em>Найдём в файле php.ini строку со следующим содержанием:&nbsp;register_globals = Off. Это запрещает&nbsp;PHP регистрировать глобальные переменные (что это означит, поймём позже; однако, включать эту настройку не рекомендуется).</em></li>\n	<li><em>Найдём в файле php.ini строку со следующим содержанием:&nbsp;short_open_tag = Off&nbsp;и заменим ее на строку&nbsp;short_open_tag = On. Это позволит нам использовать &quot;короткую&quot; форму записи контейнера для языка PHP. Однако во всех статьях и скриптах крайне рекомендуется использовать классическое &lt;?php ?&gt;.</em></li>\n</ul>\n</div>\n\n<div>Следует заметить, что иногда разработчики PHP меняют начальное (по умолчанию) содержание файла&nbsp;<strong><em>php.ini</em></strong>&nbsp;от версии к версии (точнее, от релиза к релизу). Поэтому, может оказаться, что вы имеете в своем файле рассмотренные выше параметры уже установленными в нужный нам режим. Так что и редактировать вам ничего не придется.</div>\n\n<div>В заключение&nbsp;еще раз напомним, что, после всех правок&nbsp;<strong><em>php.ini</em></strong>, необходимо перезапускать web-сервер Apache. В противном случае, все изменения будут не актуальны.</div>\n</div>\n\n<div>&nbsp;</div>\n', 6, '2020-04-29 04:18:23', '2020-04-29 11:36:15', 9110),
('5ad9eba98a7111eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Операторы над массивами', '<h1><strong>Операторы над массивами</strong></h1>\n\n<p>В PHP, помимо специальных&nbsp;<a href="index.php?mode=view_article&amp;container=cc51d98989b711eab1430cc47aaabd6c&amp;article=73755d998a6c11eab1430cc47aaabd6c">функций для работы с массивами</a>, есть операторы, которые выполняют следующие действия:</p>\n\n<table border="4" cellpadding="4">\n	<tbody>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a + $b</code></td>\n			<td>Объединение</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a == $b</code></td>\n			<td>Равно</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a === $b</code></td>\n			<td>Тождественно равно</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a != $b</code></td>\n			<td>Не равно</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a &lt;&gt; $b</code></td>\n			<td>Не равно</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$a !== $b</code></td>\n			<td>Тождественно не равно</td>\n		</tr>\n	</tbody>\n</table>\n\n<p><strong>Тождественно равно</strong>&nbsp;&mdash; когда значения и&nbsp;типы данных&nbsp;одинаковые. Пример:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nvar_dump(1 === "1"); // integer === string -&gt; false\nvar_dump(1 === 1); // integer === integer -&gt; true\n?&gt;</code></pre>\n\n<p>Оператор&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">+</code>&nbsp;возвращает левый массив, к которому был присоединен правый массив. Для ключей, которые существуют в обоих массивах, будут использованы значения из левого массива, а соответствующие им элементы из правого массива будут проигнорированы.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$a = array("a" =&gt; "apple", "b" =&gt; "banana");\n$b = array("a" =&gt; "pear", "b" =&gt; "strawberry", "c" =&gt; "cherry");\n\n$c = $a + $b; // Объединение $a и $b\necho "Объединение \\$a и \\$b: \\n";\nvar_dump($c);\n\n$c = $b + $a; // Объединение $b и $a\necho "Объединение \\$b и \\$a: \\n";\nvar_dump($c);\n\n$a += $b; // Объединение $a += $b, это $a и $b\necho "Объединение \\$a += \\$b: \\n";\nvar_dump($a);\n?&gt;</code></pre>\n\n<p>После своего выполнения скрипт напечатает следующее:</p>\n\n<pre>\n<code class="language-php">Объединение $a и $b:\narray(3) {\n  ["a"]=&gt;\n  string(5) "apple"\n  ["b"]=&gt;\n  string(6) "banana"\n  ["c"]=&gt;\n  string(6) "cherry"\n}\nОбъединение $b и $a:\narray(3) {\n  ["a"]=&gt;\n  string(4) "pear"\n  ["b"]=&gt;\n  string(10) "strawberry"\n  ["c"]=&gt;\n  string(6) "cherry"\n}\n\nОбъединение $a += $b:\narray(3) {\n  ["a"]=&gt;\n  string(5) "apple"\n  ["b"]=&gt;\n  string(6) "banana"\n  ["c"]=&gt;\n  string(6) "cherry"\n}</code></pre>\n\n<p>&nbsp;</p>\n', 36, '2020-04-30 02:30:04', '2020-04-30 02:30:04', 3683);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('5ae92ebf8a5311eab1430cc47aaabd6c', 'cc51d5da89b711eab1430cc47aaabd6c', 'Конструкции if - elseif - else', '<h1><strong>if</strong></h1>\n\n<p>Конструкция&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;является одной из наиболее важных во многих языках программирования, в том числе и PHP. Она предоставляет возможность условного выполнения фрагментов кода. Структура&nbsp;<em>if</em>&nbsp;реализована в PHP по аналогии с языком C:</p>\n\n<blockquote>\n<pre>\nif (выражение)\n  инструкция\n</pre>\n</blockquote>\n\n<p>Выражение&nbsp;вычисляется в булево значение. Если&nbsp;выражение&nbsp;принимает значение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>, PHP выполнит&nbsp;инструкцию, а если оно принимает значение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>&nbsp;- проигнорирует. Информацию о том, какие значения считаются равными значению&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>, можно найти в официальном источнике по ссылке:&nbsp;<a href="https://www.php.net/manual/ru/language.types.boolean.php#language.types.boolean.casting">&#39;Преобразование в булев тип&#39;</a>.</p>\n\n<p>Следующий пример выведет&nbsp;<span class="marker"><span style="background-color:#f1c40f">a больше b</span></span>, если значение переменной&nbsp;<var><var>$a</var></var>&nbsp;больше, чем&nbsp;<var><var>$b</var></var>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nif ($a &gt; $b)\n  echo "a больше b";\n?&gt;</code></pre>\n\n<p>Часто необходимо, чтобы условно выполнялось более одной инструкции. Разумеется, для этого нет необходимости помещать каждую инструкцию в&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>. Вместо этого можно объединить несколько инструкций в блок. Например, следующий код выведет&nbsp;<span class="marker"><span style="background-color:#f1c40f">a больше b</span></span>, если значение переменной&nbsp;<var><var>$a</var></var>&nbsp;больше, чем&nbsp;<var><var>$b</var></var>, а затем присвоит значение переменной&nbsp;<var><var>$a</var></var>&nbsp;переменной&nbsp;<var><var>$b</var></var>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nif ($a &gt; $b) {\n  echo "a больше b";\n  $b = $a;\n}\n?&gt;</code></pre>\n\n<p>Инструкции&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;могут быть бесконечно вложены в другие инструкции&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>, что даёт большую гибкость в организации условного выполнения различных частей программы.</p>\n\n<h1><strong>else</strong></h1>\n\n<p>Часто необходимо выполнить одно выражение, если определенное условие верно, и другое выражение, если условие не верно. Именно для этого&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>&nbsp;и используется.&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>&nbsp;расширяет оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>, чтобы выполнить выражение, в случае, если условие в операторе&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;равно&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>. К примеру, следующий код выведет&nbsp;<span class="marker"><span style="background-color:#f1c40f">a больше чем b</span></span>, если&nbsp;<var><var>$a</var></var>&nbsp;больше, чем&nbsp;<var><var>$b</var></var>, и&nbsp;a НЕ больше, чем b&nbsp;в противном случае:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nif ($a &gt; $b) {\n  echo "a больше, чем b";\n} else {\n  echo "a НЕ больше, чем b";\n}\n?&gt;</code></pre>\n\n<p>Выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>&nbsp;выполняется только, если выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;вычисляется как&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>, и если нет других любых выражений&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>, или если они все равны&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>&nbsp;также.</p>\n\n<h1><strong>elseif / else if</strong></h1>\n\n<p>Конструкция&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>, как ее имя и говорит есть сочетание&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>. Аналогично&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>, она расширяет оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;для выполнения различных выражений в случае, когда условие начального оператора&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;эквивалентно&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>. Однако, в отличие от&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else</em></code>, выполнение альтернативного выражения произойдет только тогда, когда условие оператора&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;будет являться равным&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>. К примеру, следующий код может выводить&nbsp;<span class="marker"><span style="background-color:#d35400">a больше, чем b</span></span>,&nbsp;<span style="background-color:#f1c40f">a равно b</span>&nbsp;или&nbsp;<span style="background-color:#3498db">a меньше, чем b</span>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nif ($a &gt; $b) {\n    echo "a больше, чем b";\n} elseif ($a == $b) {\n    echo "a равен b";\n} else {\n    echo "a меньше, чем b";\n}\n?&gt;</code></pre>\n\n<p>Может быть несколько&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;в одном выражении&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>. Первое выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;(если оно есть) равное&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>&nbsp;будет выполнено. В PHP вы также можете написать &#39;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">else if</code>&#39; (в два слова), и тогда поведение будет идентичным &#39;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">elseif</code>&#39; (в одно слово). Синтаксически значение немного отличается (если вы знакомы с языком С, это то же самое поведение), но в конечном итоге оба выражения приведут к одному и тому же результату.</p>\n\n<p>Выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;выполнится, если предшествующее выражение&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>&nbsp;и предшествующие выражения&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;эквивалентны&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>FALSE</strong></code>, а текущий&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;равен&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>TRUE</strong></code>.</p>\n\n<blockquote>\n<p><strong>Замечание</strong>:&nbsp;Заметьте, что&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else if</em></code>&nbsp;будут равнозначны только при использовании фигурных скобок, как в примерах выше. Если используются синтаксис с двоеточием для определения условий&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>if</em></code>/<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>elseif</em></code>, вы не должны разделять&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>else if</em></code>&nbsp;на два слова, иначе это вызовет фатальную ошибку в PHP.</p>\n</blockquote>\n', 18, '2020-04-29 22:55:20', '2020-04-29 23:38:02', 12482),
('5c4317a78a8b11eab1430cc47aaabd6c', '4d655b7b89b811eab1430cc47aaabd6c', 'Класс mysqli', '<h1><strong>Класс mysqli</strong></h1>\n\n<hr />\n<div><a href="https://www.php.net/manual/ru/mysqli.summary.php">Официальная документация по mysqli</a></div>\n\n<hr />\n<h2><strong>Обзор классов</strong></h2>\n\n<pre>\n<code class="language-cs">mysqli {\n\n/* Свойства */\n\nint $affected_rows;\nint $connect_errno;\nstring $connect_error;\nint $errno;\narray $error_list;\nstring $error;\nint $field_count;\nstring $client_info;\nint $client_version;\nstring $host_info;\nstring $protocol_version;\nstring $server_info;\nint $server_version;\nstring $info;\nmixed $insert_id;\nstring $sqlstate;\nint $thread_id;\nint $warning_count;\n\n/* Методы */\n\n__construct ([ string $host = ini_get("mysqli.default_host") [, string $username =\nini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") \n[, string $dbname = "" [, int $port = ini_get("mysqli.default_port") \n[, string $socket = ini_get("mysqli.default_socket") ]]]]]] )\n\nautocommit ( bool $mode ) : bool\nchange_user ( string $user , string $password , string $database ) : bool\ncharacter_set_name ( void ) : string\nclose ( void ) : bool\ncommit ([ int $flags = 0 [, string $name ]] ) : bool\n\nconnect ([ string $host = ini_get("mysqli.default_host") [, string $username = \nini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw")\n [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") \n[, string $socket = ini_get("mysqli.default_socket") ]]]]]] ) : void\n\ndebug ( string $message ) : bool\ndump_debug_info ( void ) : bool\nget_charset ( void ) : object\nget_client_info ( void ) : string\nget_connection_stats ( void ) : bool\nmysqli_stmt::get_server_info ( void ) : string\nget_warnings ( void ) : mysqli_warning\ninit ( void ) : mysqli\nkill ( int $processid ) : bool\nmore_results ( void ) : bool\nmulti_query ( string $query ) : bool\nnext_result ( void ) : bool\noptions ( int $option , mixed $value ) : bool\nping ( void ) : bool\npublic static poll ( array &amp;$read , array &amp;$error , array &amp;$reject , \nint $sec [, int $usec = 0 ] ) : int\nprepare ( string $query ) : mysqli_stmt\nquery ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] ) : mixed\n\nreal_connect ([ string $host [, string $username [, string $passwd \n[, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] ) : bool\n\nescape_string ( string $escapestr ) : string\nreal_escape_string ( string $escapestr ) : string\nreal_query ( string $query ) : bool\npublic reap_async_query ( void ) : mysqli_result\npublic refresh ( int $options ) : bool\nrollback ([ int $flags = 0 [, string $name ]] ) : bool\nrpl_query_type ( string $query ) : int\nselect_db ( string $dbname ) : bool\nsend_query ( string $query ) : bool\nset_charset ( string $charset ) : bool\nset_local_infile_handler ( mysqli $link , callable $read_func ) : bool\nssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher ) : bool\nstat ( void ) : string\nstmt_init ( void ) : mysqli_stmt\nstore_result ([ int $option ] ) : mysqli_result\nuse_result ( void ) : mysqli_result\n\n}</code></pre>\n\n<h2><strong>Содержание</strong></h2>\n\n<ul>\n	<li><a href="https://www.php.net/manual/ru/mysqli.affected-rows.php">mysqli::$affected_rows</a>&nbsp;&mdash; Получает число строк, затронутых предыдущей операцией MySQL</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.autocommit.php">mysqli::autocommit</a>&nbsp;&mdash; Включает или отключает автоматическую фиксацию изменений базы данных</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.begin-transaction.php">mysqli::begin_transaction</a>&nbsp;&mdash; Стартует транзакцию</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.change-user.php">mysqli::change_user</a>&nbsp;&mdash; Позволяет сменить пользователя подключенного к базе данных</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.character-set-name.php">mysqli::character_set_name</a>&nbsp;&mdash; Возвращает кодировку по умолчанию, установленную для соединения с БД</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.close.php">mysqli::close</a>&nbsp;&mdash; Закрывает ранее открытое соединение с базой данных</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.commit.php">mysqli::commit</a>&nbsp;&mdash; Фиксирует текущую транзакцию</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.connect-errno.php">mysqli::$connect_errno</a>&nbsp;&mdash; Возвращает код ошибки последней попытки соединения</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.connect-error.php">mysqli::$connect_error</a>&nbsp;&mdash; Возвращает описание последней ошибки подключения</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.construct.php">mysqli::__construct</a>&nbsp;&mdash; Устанавливает новое соединение с сервером MySQL</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.debug.php">mysqli::debug</a>&nbsp;&mdash; Выполняет процедуры отладки</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.dump-debug-info.php">mysqli::dump_debug_info</a>&nbsp;&mdash; Журналирование отладочной информации</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.errno.php">mysqli::$errno</a>&nbsp;&mdash; Возвращает код ошибки последнего вызова функции</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.error-list.php">mysqli::$error_list</a>&nbsp;&mdash; Возвращает список ошибок выполнения последней запущенной команды</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.error.php">mysqli::$error</a>&nbsp;&mdash; Возвращает строку с описанием последней ошибки</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.field-count.php">mysqli::$field_count</a>&nbsp;&mdash; Возвращает число столбцов, затронутых последним запросом</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-charset.php">mysqli::get_charset</a>&nbsp;&mdash; Возвращает объект, описывающий кодировку</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-client-info.php">mysqli::$client_info</a>&nbsp;&mdash; Получает информацию о клиенте MySQL</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-client-version.php">mysqli::$client_version</a>&nbsp;&mdash; Возвращает информацию о клиенте MySQL в виде строки</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-connection-stats.php">mysqli::get_connection_stats</a>&nbsp;&mdash; Возвращает статистику соединения с клиентом</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-host-info.php">mysqli::$host_info</a>&nbsp;&mdash; Возвращает строку, содержащую тип используемого соединения</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-proto-info.php">mysqli::$protocol_version</a>&nbsp;&mdash; Возвращает версию используемого MySQL протокола</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-server-info.php">mysqli::$server_info</a>&nbsp;&mdash; Возвращает версию MySQL сервера</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-server-version.php">mysqli::$server_version</a>&nbsp;&mdash; Возвращает версию сервера MySQL, представленную в виде integer</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.get-warnings.php">mysqli::get_warnings</a>&nbsp;&mdash; Получает результат SHOW WARNINGS</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.info.php">mysqli::$info</a>&nbsp;&mdash; Извлекает информацию о последнем выполненном запросе</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.init.php">mysqli::init</a>&nbsp;&mdash; Инициализирует MySQLi и возвращает ресурс для использования в функции mysqli_real_connect()</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.insert-id.php">mysqli::$insert_id</a>&nbsp;&mdash; Возвращает автоматически генерируемый ID, используя последний запрос</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.kill.php">mysqli::kill</a>&nbsp;&mdash; Запрос для сервера завершить выполнение процесса MySQL</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.more-results.php">mysqli::more_results</a>&nbsp;&mdash; Проверка, есть ли еще результаты в мультизапросе</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.multi-query.php">mysqli::multi_query</a>&nbsp;&mdash; Выполняет запрос к базе данных</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.next-result.php">mysqli::next_result</a>&nbsp;&mdash; Подготовка следующего доступного результирующего набора из multi_query</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.options.php">mysqli::options</a>&nbsp;&mdash; Установка настроек</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.ping.php">mysqli::ping</a>&nbsp;&mdash; Проверяет работоспособность соединения или пытается переподключиться, если соединение разорвано</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.poll.php">mysqli::poll</a>&nbsp;&mdash; Опрос подключений</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.prepare.php">mysqli::prepare</a>&nbsp;&mdash; Подготавливает SQL выражение к выполнению</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.query.php">mysqli::query</a>&nbsp;&mdash; Выполняет запрос к базе данных</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.real-connect.php">mysqli::real_connect</a>&nbsp;&mdash; Устанавливает соединение с сервером mysql</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.real-escape-string.php">mysqli::real_escape_string</a>&nbsp;&mdash; Экранирует специальные символы в строке для использования в SQL-выражении, используя текущий набор символов соединения</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.real-query.php">mysqli::real_query</a>&nbsp;&mdash; Выполнение SQL запроса</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.reap-async-query.php">mysqli::reap_async_query</a>&nbsp;&mdash; Получение результата асинхронного запроса</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.refresh.php">mysqli::refresh</a>&nbsp;&mdash; Обновление</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.release-savepoint.php">mysqli::release_savepoint</a>&nbsp;&mdash; Удаляет именованную точку сохранения из списка точек сохранения текущей транзакции</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.rollback.php">mysqli::rollback</a>&nbsp;&mdash; Откат текущей транзакции</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.rpl-query-type.php">mysqli::rpl_query_type</a>&nbsp;&mdash; Возвращает RPL тип запроса</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.savepoint.php">mysqli::savepoint</a>&nbsp;&mdash; Устанавливает именованную точку отката для текущей транзакции</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.select-db.php">mysqli::select_db</a>&nbsp;&mdash; Устанавливает базу данных для выполняемых запросов</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.send-query.php">mysqli::send_query</a>&nbsp;&mdash; Отправка запроса и возврат</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.set-charset.php">mysqli::set_charset</a>&nbsp;&mdash; Задает набор символов по умолчанию</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.set-local-infile-default.php">mysqli::set_local_infile_default</a>&nbsp;&mdash; Отмена привязки callback-функции для команды load local infile</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.set-local-infile-handler.php">mysqli::set_local_infile_handler</a>&nbsp;&mdash; Задает callback-функцию для команды LOAD DATA LOCAL INFILE</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.sqlstate.php">mysqli::$sqlstate</a>&nbsp;&mdash; Возвращает код состояния SQLSTATE последней MySQL операции</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.ssl-set.php">mysqli::ssl_set</a>&nbsp;&mdash; Используется для установления безопасных соединений, используя SSL</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.stat.php">mysqli::stat</a>&nbsp;&mdash; Получение информации о текущем состоянии системы</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.stmt-init.php">mysqli::stmt_init</a>&nbsp;&mdash; Инициализирует запрос и возвращает объект для использования в mysqli_stmt_prepare</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.store-result.php">mysqli::store_result</a>&nbsp;&mdash; Передает на клиента результирующий набор последнего запроса</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.thread-id.php">mysqli::$thread_id</a>&nbsp;&mdash; Возвращает ID процесса текущего подключения</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.thread-safe.php">mysqli::thread_safe</a>&nbsp;&mdash; Показывает, безопасна ли работа с процессами</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.use-result.php">mysqli::use_result</a>&nbsp;&mdash; Готовит результирующий набор на сервере к использованию</li>\n	<li><a href="https://www.php.net/manual/ru/mysqli.warning-count.php">mysqli::$warning_count</a>&nbsp;&mdash; Возвращает количество предупреждений из последнего запроса заданного подключения</li>\n</ul>\n', 49, '2020-04-30 05:36:14', '2020-04-30 05:39:18', 15554),
('5ee79ed18a8a11eab1430cc47aaabd6c', '4d655b7b89b811eab1430cc47aaabd6c', 'Процедурный и ОО-интерфейс', '<h1><strong>Процедурный и объектно-ориентированный интерфейс</strong></h1>\n\n<p>Расширение <strong>mysqli</strong> предоставляет двойной интерфейс программисту. Поддерживаются как процедурная, так и объектно-ориентированная парадигмы программирования.</p>\n\n<p>Пользователи, переходящие со старого расширения mysql, возможно, предпочтут процедурный интерфейс. Он весьма схож с интерфейсом старого расширения, и во многих случаях функции отличаются только префиксом в имени. Некоторые mysqli-функции принимают дескриптор соединения первым аргументом, в отличие от соответствующих им функций старого расширения, которые принимают его в качестве последнего необязательного аргумента.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$mysqli = mysqli_connect("example.com", "user", "password", "database");\n$res = mysqli_query($mysqli, "SELECT ''Пожалуйста, не используйте '' AS _msg FROM DUAL");\n$row = mysqli_fetch_assoc($res);\necho $row[''_msg''];\n\n$mysql = mysql_connect("example.com", "user", "password");\nmysql_select_db("test");\n$res = mysql_query("SELECT ''расширение mysql в новых проектах.'' AS _msg FROM DUAL", $mysql);\n$row = mysql_fetch_assoc($res);\necho $row[''_msg''];\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">Пожалуйста, не используйте расширение mysql в новых проектах.</div>\n\n<p><em>Объектно-ориентированный интерфейс</em></p>\n\n<p>В дополнение к процедурному пользователи могут использовать объектно-ориентированный интерфейс. Документация заточена именно под объектный интерфейс. Объектно-ориентированный интерфейс предлагает функции сгруппированные по цели их применения, что облегчает их поиск и освоение. Тем не менее, в практических примерах к функциям приводится код для обеих парадигм.</p>\n\n<p>Каких-либо принципиальных отличий в производительности между интерфейсами нет. Пользователи вольны в выборе интерфейса, основываясь на личных предпочтениях.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$mysqli = mysqli_connect("example.com", "user", "password", "database");\nif (mysqli_connect_errno()) {\n    echo "Не удалось подключиться к MySQL: " . mysqli_connect_error();\n}\n\n$res = mysqli_query($mysqli, "SELECT ''Мир, полный '' AS _msg FROM DUAL");\n$row = mysqli_fetch_assoc($res);\necho $row[''_msg''];\n\n$mysqli = new mysqli("example.com", "user", "password", "database");\nif ($mysqli-&gt;connect_errno) {\n    echo "Не удалось подключиться к MySQL: " . $mysqli-&gt;connect_error;\n}\n\n$res = $mysqli-&gt;query("SELECT ''выбора, чтобы угодить всем.'' AS _msg FROM DUAL");\n$row = $res-&gt;fetch_assoc();\necho $row[''_msg''];\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">Мир, полный выбора, чтобы угодить всем.</div>\n\n<p>Примеры в этом руководстве будут написаны в объектном стиле в виду того, что объектному подходу отдавалось предпочтение при создании документации.</p>\n\n<p><em>Смешивание стилей</em></p>\n\n<p>Переключаться между стилями программирования можно сколь угодно часто и в любое время, однако делать этого не рекомендуется, так как это ухудшает читаемость кода и затрудняет его поддержку.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$mysqli = new mysqli("example.com", "user", "password", "database");\nif ($mysqli-&gt;connect_errno) {\n    echo "Не удалось подключиться к MySQL: " . $mysqli-&gt;connect_error;\n}\n\n$res = mysqli_query($mysqli, "SELECT ''Этот код работает, но лучше так не писать.'' AS _msg FROM DUAL");\nif (!$res) {\n    echo "Не удалось выполнить запрос: (" . $mysqli-&gt;errno . ") " . $mysqli-&gt;error;\n}\n\nif ($row = $res-&gt;fetch_assoc()) {\n    echo $row[''_msg''];\n}\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">Этот код работает, но лучше так не писать.</div>\n', 47, '2020-04-30 05:29:09', '2020-04-30 05:29:09', 5761),
('61ca761a89ed11eab1430cc47aaabd6c', 'cc51cd6889b711eab1430cc47aaabd6c', 'Типы данных', '<h1><strong>Типы данных</strong></h1>\n\n<p>PHP относится к слабо типизированным языкам. Тип переменной зависит от хранимых в ней данных. При изменении типа данных меняется и тип переменной. Переменные в PHP - особые объекты, которые могут содержать в буквальном смысле все, что угодно - любую информацию. Исключение составляют только константы, которые могут содержать только число или строку. Тип переменной на данный момент можно определить с помощью функции&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>gettype($var)</strong></code>, которая возвращает строку, содержащую имя типа переменной (например,&nbsp;<em>integer, string</em>&nbsp;и т.п.). Ниже приведено описание типов данных, используемых в PHP:</p>\n\n<ul>\n	<li><strong>integer</strong>&nbsp;- Целое число со знаком, обычно длиной 32 бита. Диапазон значений от -2147483648 до +2147483647.</li>\n	<li><strong>double</strong>&nbsp;- Вещественное число очень большой точности (значения). Хватает для решения подавляющего большинства математических задач.</li>\n	<li><strong>string</strong>&nbsp;- Строка любой длины. Может содержать в себе бинарные данные (например, графический файл). Длина строки ограничена только размером свободной памяти, так что вполне реально прочитать в одну строку файл размером, например, 500 киллобайтов и свободно обрабатывать его с помощью стандартных функций PHP.</li>\n	<li><strong>array</strong>&nbsp;- Ассоциативный массив - это набор из нескольких элементов, каждый из которых преставляет собой пару&nbsp;<em>ключ=&gt;значение</em>&nbsp;(более подробно об этом, будет рассказано в следующих разделах).</li>\n	<li><strong>object</strong>&nbsp;- Ссылка на объект, который реализует несколько принципов объектно-ориентированного программирования. Доступ к отдельным элементам объекта осуществляется с помощью оператора&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">-&gt;</code>. Более подробно объекты будут рассматриваться в следующих разделах (например, MySQL или ООП).</li>\n	<li><strong>resource</strong>&nbsp;- Некоторый ресурс, который PHP обрабатывает особым образом. Пример ресурса - переменная, содержащая дескриптор открытого файла. Такая переменная может в дальнейшем быть использована для обработки данного файла: чтения файла, записи в файл, закрытия и т.д.</li>\n	<li><strong>boolean</strong>&nbsp;- Логическая переменная может содержать одно из двух значений: true (истина) или false (ложь). Вообще говоря,&nbsp;любое ненулевое число (или не нулевой результат какого-то выражения), непустая строка или константа&nbsp;<em>true</em>&nbsp;символизирует истину, тогда как 0 (или нулевой результат какого-то выражения), пустая строка или константа&nbsp;<em>false</em>&nbsp;- ложь.</li>\n	<li><strong>NULL</strong>&nbsp;- Переменной можно присвоить специальную константу NULL (или null) и она станет переменной типа NULL. Если применить функцию <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">gettype($var)</code>, которую мы рассматривали выше, то она вернет строку NULL для такой переменной.</li>\n</ul>\n\n<pre>\n<code>&lt;?php\n$bool = true;    // Значение Boolean\n$int = 100;    // Значение Integer\n$string = "Переменная содержит текст";    // Значение String\n$string2 = "5425";    // Значение String, так как число взято в кавычки !\n$float = 44.122;    // Значение Float\n?&gt;</code></pre>\n\n<p>Для предотвращения появления ошибок рекомендуется не смешивать разные типы данных.</p>\n\n<p>Если вы хотите явно изменить тип данных переменной, то для этого нужно слева от имени переменной в круглых скобках указать нужный тип:</p>\n\n<pre>\n<code>&lt;?php\n$str = "50000";    // Значение String\n$new_str = (integer) $str;    // Теперь значение стало Integer\n\n// Проверяем... \n\necho $new_str + $new_str; \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code>100000</code></pre>\n\n<p>Специальный тип null предназначен для переменных без определённого значения. Единственным значением данного типа является константа&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">NULL</code>. Тип null принимают неинициализированные переменные, переменные инициализированные константой <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">NULL</code>, а также переменные, удалённые при помощи конструкции&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">unset()</code>.</p>\n\n<p>Ссылки на внешние ресурсы имеют тип &laquo;ресурс&raquo; (resource). Переменные данного типа, как правило, представляют собой дескриптор, позволяющий управлять внешними объектами, такими как файлы, динамические изображения, результирующие таблицы базы данных и&nbsp;т.&nbsp;п.</p>\n\n<p>Массивы (array) поддерживают числовые и строковые ключи и являются&nbsp;гетерогенными. Массивы могут содержать значения любых типов, включая другие массивы. Порядок элементов и их ключей сохраняется. Не совсем корректно называть php-массивы массивами, на самом деле это, скорее всего, упорядоченный хеш. Возможно неожиданное поведение при использовании цикла&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">for</code>&nbsp;со счётчиком вместо&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">foreach</code>. Так, например, при сортировке массива с численными индексами функциями из стандартной библиотеки, сортируются и ключи тоже.</p>\n\n<p>Указатель на функцию в PHP может быть представлен замыканием или псевдотипом callback. Замыкание доступно с версии 5.3 и в коде выглядит как простое определение функции, в которую можно явно пробросить значения из контекста, например:</p>\n\n<pre>\n<code class="language-php">function($args, $argsN) use ($ctxVar, $ctxVar1) { ... }</code></pre>\n\n<p>callback тип может быть представлен:</p>\n\n<ul>\n	<li>строкой (интерпретируется как название функции);</li>\n	<li>массивом где нулевой и первый элемент&nbsp;&mdash; строки (интерпретируется как название статической функции класса);</li>\n	<li>массивом где нулевой элемент&nbsp;&mdash; объект, а первый&nbsp;&mdash; строка (интерпретируется как метод у объекта).</li>\n</ul>\n\n<p>Для проверки является ли значение вызываемым следует использовать&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">is_callable($var)</code><br />\n&nbsp;</p>\n\n<hr />\n<p><a href="https://www.php.net/manual/ru/language.types.type-juggling.php">Более подробно о типизации в PHP</a>&nbsp;(официальная документация)</p>\n', 9, '2020-04-29 10:45:22', '2020-04-29 22:06:05', 10257),
('633ab02a8a6b11eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Создание массива', '<h1><strong>Создание массивов в PHP</strong></h1>\n\n<p><strong>Массив</strong> - это набор данных, которые объединены под одним именем. Массив состоит из нескольких элементов, которые имеют свой определенный индекс.</p>\n\n<p>Массивы создаются при помощи&nbsp;оператора присвоения, также как и переменная.<br />\nИмена массивов начинаются со знака&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>$</strong></code>, после которого следует произвольный идентификатор, далее идут квадратные скобки:&nbsp;<strong>$</strong>arr[0] = &quot;php&quot;;</p>\n\n<p>Данная конструкция создает массив и присваивает его элементу с индексом 0 значение &quot;php&quot;, после чего мы можем обращаться к этому элементу как к обычной переменной:&nbsp;<code>echo $arr[0]</code>. В результате мы увидим слово&nbsp;<em>php</em>.</p>\n\n<p>Также, мы можем добавить еще элементы к массиву:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[1] = "html";\n$arr[2] = "css";\n?&gt;</code></pre>\n\n<p>В качестве индекса элементов массива мы можем использовать не только числа:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr["Kiev"] = 3000000; \n$arr["Paris"] = 5000000; \n$arr["LA"] = 15000000;\n?&gt;</code></pre>\n\n<p>В качестве значений индексов элементов и самих элементов мы можем использовать одинаковые&nbsp;типы данных&nbsp;<strong>одновременно</strong>!</p>\n\n<p>Также существует сокращенная запись для индексирования:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[] = 3000000; \n$arr[] = 5000000; \n$arr[] = 15000000;\n?&gt;</code></pre>\n\n<p>В этом случае первый элемент (3000000) получит индекс 0! Нужно иметь это ввиду.</p>\n\n<h2><strong>Для создания массива</strong></h2>\n\n<p>Для создания массива мы можем использовать функцию&nbsp;<strong><code>array</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array("php", "html", "css");\n?&gt;</code></pre>\n\n<p>В этом случае первый элемент получит индекс 0. Если нужно присвоить какой-то другой номер, то можно воспользоваться конструкцией&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">=&gt;</code>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array(1 =&gt; "php", "html", "css");\n?&gt;</code></pre>\n\n<p>Теперь элемент под номером 1 это &quot;php&quot;, а не &quot;html&quot;! Также, можно создать массив со строковым индексом:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array("first" =&gt; "php", "second" =&gt; "html", "third" =&gt; "css");\n?&gt;</code></pre>\n\n<p>Начиная с версии PHP 5.4, массивы можно создать через квадратные скобки:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = ["php", "laravel", "yii", "zend", "cakephp"];\n?&gt;</code></pre>\n\n<h2><strong>Многомерные массивы</strong></h2>\n\n<p>Нельзя сказать, что многомерные массивы активно используются при разработке различных проектов на PHP. Область их применения, скорее, решение сложных математических задач в различных областях науки и техники. А PHP в основном ориентирован, по крайней мере пока, на решение задач обработки текстовой информации в коммерческих проектах. Однако, не смотря на это, в PHP существуют достаточно простые способы создания многомерных массивов. В самом деле, ранее уже говорилось, что эначениями элементов массивов могут быть любые переменные в том числе и сами массивы. Так можно создавать ассоциативные массивы (в том числе и списки) с любым числом измерений, например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$num=array(array(0,1,2,3),array(4,5,6),array(7,8,9));\necho $num[1][1];   //  на экран будет выведено число  5\necho $num[2][1];   //  на экран будет выведено число  8\necho $num[1][3];   //  на экран будет выведено сообщение, \n                   //  что данный элемент не определен\n?&gt;</code></pre>\n\n<p>Здесь первый индекс в квадратных скобках соответствует номеру (начиная с 0) элемента во внешнем массиве, а второй - во внутреннем.</p>\n\n<p>Следующая запись представляет двухмерный ассоциативный массив:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$fio=array(\n"Ivanov"=&gt;array("name"=&gt;"Иванов И.","sex"=&gt;"M","email"=&gt;"\n ivanov@mail.ru"),\n"Petrov"=&gt;array("name"=&gt;"Петров П.","sex"=&gt;"M","email"=&gt;"\n petrov@mail.ru"),\n"Sidorova"=&gt;array("name"=&gt;"Сидорова А.","sex"=&gt;"F",\n"email"=&gt;"\n sidorova@yandex.ru")\n);\necho $fio["Petrov"]["name"];    //   на экране: Петров П.\necho $fio["Ivanov"]["email"];    //   на экране: \n ivanov@mail.ru \n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 31, '2020-04-30 01:47:21', '2020-04-30 01:57:06', 6438),
('6f4f5db089da11eab1430cc47aaabd6c', '046b312f89b711eab1430cc47aaabd6c', 'Web-сервер Apache', '<h1><strong>Web-сервер Apache</strong></h1>\n\n<p>Чтобы использовать возможности языка PHP 7, нужна среда, на которой он будет функционировать. Средой в данном случае является веб-сервер. Наиболее удобный сервер для PHP - это Apache.&nbsp;</p>\n\n<p>Не смотря на то, что родной операционной средой для web-сервера Apache являются ОС семейства UNIX, существуют совершенно надежные дистрибутивы Apache, которые могут работать как в UNIX-системах, так и в Windows. Ввиду того, что большинство пользователей использует в качестве основной операционной системы одну из версий MS Windows, мы и займемся вопросами установки и настройки web-сервера Apache в операционной среде Windows.&nbsp;</p>\n\n<p>Прежде, чем переходить непосредственно к установке Apache, необходимо иметь в наличии его дистрибутив. Получить его можно стандартным путем, обратившись на официальный сайт Apache Group&nbsp;<a href="http://httpd.apache.org/download.cgi" target="_new">http://httpd.apache.org/download.cgi</a>, либо можно воспользоваться любым доступным поисковиком и найти дистрибутив самостоятельно.</p>\n\n<p>На самом деле, вопрос выбора версии сервера не должен нас сильно волновать. Подойдет практически любая, если установится корректно. Так как предполагается, что мы идём в ногу со временем, то я рекомендую версию <strong>Apache 2.4</strong>.</p>\n\n<p>Под установкой Apache обычно подразумевается распаковка дистрибутива и развертывание службы (если речь о Windows) apache http server. Но существуют и инсталлеры, которые позволяют избежать различных проблем и помогают настроить основные параметры подключения. Допустим, что инсталлера у нас нет. Тогда распакуем дистрибутив в каталог нашего веб-приложения. Пусть данным каталогом будет C:/WEB. Для начала нужно настроить конфигурационный файл Apache. Он находится по пути <strong>C:/WEB/Apache24/bin/conf/httpd.conf</strong>. В данном файле нам нужно определить основные строчки:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\n<p><strong>Define SRVROOT &quot;c:/web/Apache24&quot;<br />\nServerRoot &quot;${SRVROOT}&quot;<br />\nListen 80</strong></p>\n</div>\n\n<p>После этого нужно запустить командную консоль <strong>cmd.exe</strong> с правами Админстратора и выполнить следующие команды:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>cd C:/web/Apache24/bin<br />\nhttpd.exe -k install -n &quot;<em>Имя службы, например, Apache24</em></strong><em><strong>&quot;</strong></em></div>\n\n<p>Первая команда сменит наш текущий каталог, вторая команда установит службу Windows с названием, которое вы зададите. Могут возникнуть проблемы с тем, что сокет по порту :80 уже слушается другой службой. Тогда можно попытаться убить &quot;слушателя&quot;, сменить его настройки или же просто поменять порт, по которому будет слушать Apache. Для этого в конфигурационном файле в строчке <strong>Listen</strong> укажем любой свободный порт (например, 81). После выполнения команд можно зайти в <strong>Службы&nbsp;</strong>и убедиться, что сервис установлен. Чтобы запустить и остановить сервис,&nbsp;можно использовать следующие команды:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>net start Apache24<br />\nnet stop Apache24</strong></div>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>cd C:/web/Apache24/bin<br />\nhttpd.exe -k start -n Apache24<br />\nhttpd.exe -k stop -n Apache24</strong></div>\n\n<p>Теперь, если все проделано корректно , нам осталось проверить работоспособность нашего web-сервера. Запускаем web-браузер. Вводим в поле Адрес: http://localhost (или http://127.0.0.1 или http://localhost:PORT, если был выбран отличный от :80 порт) и, если все установлено правильно, увидим что-то подобное:</p>\n\n<p><img alt="" src="uploads/63a9f0ea7bb98050796b649e85481845/phpitworks.png" style="height:193px; width:250px" /></p>\n\n<p>Главное, чтобы web-браузер не выдал сообщение &quot;Невозможно найти страницу ...&quot; или &quot;Невозможно отобразить страницу ...&quot;.</p>\n\n<h2><strong>Основные настройки конфигурации</strong></h2>\n\n<p>При установке Apache в ручном режиме был затронут конфигурационный файл <strong>httpd.conf</strong> (см. выше). Он позволяет конфигурировать основные настройки вашего веб-сервера. Он контролирует подключение модулей, файлов, логирование системы и прочее. Для нас могут быть важны следующие настройки:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>DocumentRoot &quot;c:/web/documents&quot;</strong></div>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>&lt;IfModule dir_module&gt;<br />\n&nbsp; &nbsp; DirectoryIndex index.php<br />\n&lt;/IfModule&gt;</strong></div>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>&lt;Directory /&gt;<br />\n&nbsp; &nbsp; AllowOverride none<br />\n&nbsp; &nbsp; Require all denied<br />\n&lt;/Directory&gt;</strong>\n\n<p><strong>&lt;Directory &quot;c:/web/documents&quot;&gt;<br />\n&nbsp; &nbsp; Options Indexes FollowSymLinks<br />\n&nbsp; &nbsp; AllowOverride None<br />\n&nbsp; &nbsp; Require all granted<br />\n&lt;/Directory&gt;</strong></p>\n<strong>&lt;Files &quot;.ht*&quot;&gt;<br />\n&nbsp; &nbsp; Require all denied<br />\n&lt;/Files&gt;</strong></div>\n\n<ul>\n	<li>Первая настройка указывает серверу, где будут храниться HTML-документы и PHP-скрипты, именно эта директория используется при обращении к серверу в адресной строке браузера.&nbsp;</li>\n	<li>Вторая настройка указывает серверу, какую страницу или скрипт выполнять при обращении по адресу без явного указания страницы. То есть в данном случае, ссылки в браузере http://localhost/ и http://localhost/index.php эквивалентны. Это же будет касаться и при обращении к другим, вложенным, каталогам сервера.</li>\n	<li>Третья настройка нас не сильно интересует, но она позволяет управлять правами доступа к файлам&nbsp;и директориям сервера. В данном случае, для общей директории мы запрещаем перезапись доступа к .htaccess файлам и запрещаем доступ всем к каталогам сервера. Для директории, в которой у нас хранятся наши веб-страницы и скрипты, мы доступ всем предоставляем; к файлам, подходящим по маске .ht*, доступ всех запрещаем. Данные настройки доступа не позволят изменять директории и файлы даже вам (как Администратору компьютера) во время того, как будет запущен сервер.<br />\n	<em>*Настройка <strong>Options Indexes FollowSymLinks</strong> является продвинутой и установлена по умолчанию, трогать её не рекомендуется.</em></li>\n</ul>\n\n<p>&nbsp;</p>\n', 4, '2020-04-29 08:29:45', '2020-04-29 11:46:36', 9793),
('70c4022d8a5711eab1430cc47aaabd6c', 'e0d0c46489b711eab1430cc47aaabd6c', 'Оператор switch', '<h1><strong>Оператор SWITCH в PHP</strong></h1>\n\n<p>Иногда даже использование конструкции операторов&nbsp;<code><a href="index.php?mode=view_article&amp;container=cc51d5da89b711eab1430cc47aaabd6c&amp;article=5ae92ebf8a5311eab1430cc47aaabd6c">if .. elseif .. else</a></code>&nbsp;&nbsp;несколько утомляет.<br />\nЧтобы исправить эту ситуацию есть оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">switch</code>. Синтаксис:</p>\n\n<pre>\n<code class="language-php">switch (exp) \n{\n    case condition1:\n    exp1;\n    break;\n    \n    case condition2:\n    exp2;\n    break;\n    \n    case condition3:\n    exp3;\n    break;\n    \n    default:\n    exp4;\n    break;\n}</code></pre>\n\n<p>Сначала записывается ключевое слово&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">switch</code>, после которого в скобках записывается некоторое выражение.<br />\nДалее, после слова&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">case</code>&nbsp;нужно перечислить возможные варианты значений, если значение истина, то выполняется группа операторов, которые записаны до оператора&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">break</code>. Если ни одно условие не подходит, то выполняется оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">default</code>&nbsp;(если оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">default</code>&nbsp;не записывать, то при не выполнении никаких других условий ничего не произойдет).</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$celsious = 20;\n\nswitch($celsius)\n{\n    case 10 : \n        echo "На улице 10 градусов, прохладно";\n    break;\n    \n    case 20 : \n        echo "На улице 20 градусов";\n    break;\n    \n    case 30 : \n        echo "На улице 30 градусов, жара!";\n    break;\n    \n    default : \n        echo "Температура в пределах нормы";\n    break;\n\n}\n?&gt;</code></pre>\n\n<p>Также, при использовании оператора&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">switch</code>, мы можем записать несколько условий для некоторого действия:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$celsious = 18;\n\nswitch($celsius)\n{\n    case 18 : \n    case 22 : \n        echo "Температура умеренная";\n    break;\n    \n    case 30 : \n        echo "На улице жара!";\n    break;\n    \n    default : \n        echo "Температура в пределах нормы";\n    break;\n\n}\n?&gt;</code></pre>\n\n<p>В результате мы увидим &mdash; &quot;<em>Температура умеренная</em>&quot;.</p>\n', 26, '2020-04-29 23:24:34', '2020-04-30 00:42:41', 3497);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('73755d998a6c11eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Функции обработки массивов', '<h1><strong>Функции обработки массивов</strong></h1>\n\n<p>Для работы с массивами в PHP предусмотрено очень много функций, полный список которых находиться ниже:</p>\n\n<table border="4" cellpadding="4">\n	<tbody>\n		<tr>\n			<td>array_chunk</td>\n			<td>Разбивает массив на несколько меньших массивов заданного размера</td>\n		</tr>\n		<tr>\n			<td>array_combine</td>\n			<td>Создает массив из двух заданных массивов - массива индексов элементов и массива значений</td>\n		</tr>\n		<tr>\n			<td>array_count_values</td>\n			<td>Формирует массив, индексами которого являются значения заданного массива, а значениями - число повторений соответствующего значения в заданном массиве</td>\n		</tr>\n		<tr>\n			<td>array_diff</td>\n			<td>Формирует массив из тех элементов первого заданного массива, которые отсутствуют в остальных заданных в качестве аргументов функции массива</td>\n		</tr>\n		<tr>\n			<td>array_fill</td>\n			<td>Заполняет массив заданным значением</td>\n		</tr>\n		<tr>\n			<td>array_intersect</td>\n			<td>Формирует массив из элементов, которые присутствуют во всех заданных массивах</td>\n		</tr>\n		<tr>\n			<td>array_key_exists</td>\n			<td>Проверяет наличие заданного индекса в массиве</td>\n		</tr>\n		<tr>\n			<td>array_keys</td>\n			<td>Возвращает массив из индексов заданного массива</td>\n		</tr>\n		<tr>\n			<td>array_merge</td>\n			<td>Объединяет несколько массивов в один</td>\n		</tr>\n		<tr>\n			<td>array_multisort</td>\n			<td>Выполняет сортировку многомерного массива или нескольких одномерных массивов</td>\n		</tr>\n		<tr>\n			<td>array_pad</td>\n			<td>Дополняет массив до заданного количества элементов заданным значением</td>\n		</tr>\n		<tr>\n			<td>array_pop</td>\n			<td>Возвращает последний элемент массива, одновременно удаляя элемент из массива</td>\n		</tr>\n		<tr>\n			<td>array_push</td>\n			<td>Добавляет заданные элементы в конец массива</td>\n		</tr>\n		<tr>\n			<td>array_rand</td>\n			<td>Выбирает один или несколько случайно взятых элементов из массива</td>\n		</tr>\n		<tr>\n			<td>array_reduce</td>\n			<td>Осуществляет последовательное применение заданной функции к элементам массива, формируя итоговое значение</td>\n		</tr>\n		<tr>\n			<td>array_reverse</td>\n			<td>Производит обращение массива - первый элемент становится последним, второй - предпоследним и т.д.</td>\n		</tr>\n		<tr>\n			<td>array_search</td>\n			<td>Ищет заданный элемент в массиве и возвращает соответствующим ему индекс</td>\n		</tr>\n		<tr>\n			<td>array_shift</td>\n			<td>Возвращает первый элемент массива, одновременно удаляя его из массива с перенумерацией числовых индексов</td>\n		</tr>\n		<tr>\n			<td>array_slice</td>\n			<td>Вырезает из массива подмассив заданной длины, начиная с указанного элемента</td>\n		</tr>\n		<tr>\n			<td>array_sum</td>\n			<td>Вычисляет сумму всех элементов массива</td>\n		</tr>\n		<tr>\n			<td>array_unique</td>\n			<td>Удаляет дублирующиеся значения из массива</td>\n		</tr>\n		<tr>\n			<td>array_unshift</td>\n			<td>Добавляет один или несколько элементов в начало массива с перенумерацией числовых индексов</td>\n		</tr>\n		<tr>\n			<td>array_walk</td>\n			<td>Вызывает заданную функцию последовательно для каждого элемента массива</td>\n		</tr>\n		<tr>\n			<td>array</td>\n			<td>Создает массив из заданных значений или пар индекс - значение</td>\n		</tr>\n		<tr>\n			<td>arsort</td>\n			<td>Сортирует массив по убыванию его значений, сохраняя индексы неизменными</td>\n		</tr>\n		<tr>\n			<td>asort</td>\n			<td>Сортирует массив по возрастанию его значений, сохраняя индексы неизменными</td>\n		</tr>\n		<tr>\n			<td>krsort</td>\n			<td>Сортирует массив по убыванию его индексов</td>\n		</tr>\n		<tr>\n			<td>ksort</td>\n			<td>Сортирует массив по возрастанию его индексов</td>\n		</tr>\n		<tr>\n			<td>sort</td>\n			<td>Сортирует массив по возрастанию значений его элементов с перенумерацией его индексов</td>\n		</tr>\n		<tr>\n			<td>usort</td>\n			<td>Сортирует массив с использование заданной функции сравнения элементов массива</td>\n		</tr>\n		<tr>\n			<td>rsort</td>\n			<td>Сортирует массив по убыванию значений его элементов с перенумерацией его индексов</td>\n		</tr>\n		<tr>\n			<td>natcasesort</td>\n			<td>Сортирует массив естественным образом без учета регистра массива</td>\n		</tr>\n		<tr>\n			<td>natsort</td>\n			<td>Сортирует массив естественным образом с учетом регистра символов</td>\n		</tr>\n		<tr>\n			<td>count</td>\n			<td>Возвращает количество элементов в массиве</td>\n		</tr>\n		<tr>\n			<td>current</td>\n			<td>Возвращает значение текущего элемента массива</td>\n		</tr>\n		<tr>\n			<td>each</td>\n			<td>Возвращает текущие индекс и значение элемента массива и продвигает указатели на следующий элемент</td>\n		</tr>\n		<tr>\n			<td>in_array</td>\n			<td>Проверяет, присутствует ли заданное значение в массиве</td>\n		</tr>\n		<tr>\n			<td>key</td>\n			<td>Возвращает индекс текущего элемента массива</td>\n		</tr>\n		<tr>\n			<td>list</td>\n			<td>Присваивает значения из массива списку переменных</td>\n		</tr>\n		<tr>\n			<td>pos</td>\n			<td>Синоним функции&nbsp;<em>current</em></td>\n		</tr>\n		<tr>\n			<td>reset</td>\n			<td>Устанавливает внутренний указатель на первый элемент массива</td>\n		</tr>\n		<tr>\n			<td>shuffle</td>\n			<td>Переставляет элементы массива случайным образом</td>\n		</tr>\n		<tr>\n			<td>sizeof</td>\n			<td>Синоним функции&nbsp;<em>count</em></td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;Более подробную информацию про все функции для работы с массивами вы можете найти на&nbsp;<a href="http://php.net/manual/ru/ref.array.php" rel="nofollow" target="_blank">странице официальной документации</a>.</p>\n', 33, '2020-04-30 01:54:58', '2020-04-30 01:54:58', 8187),
('75007a608a8511eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Область видимости переменных', '<h1><strong>Локальные, глобальные и статические переменные</strong></h1>\n\n<p>Ранее мы уже сталкивались с упоминанием о локальных и глобальных переменных. Так вот, в PHP:</p>\n\n<ul>\n	<li>все переменные, созданные в основном теле скрипта, являются&nbsp;<em>глобальными</em>;</li>\n	<li>все переменные, созданные в функции, являются&nbsp;<em>локальными</em>.</li>\n</ul>\n\n<p><em>Локальные</em>&nbsp;переменные &quot;видны&quot; только в той функции (подпрограмме), в которой они созданы.&nbsp;<em>Глобальные</em>&nbsp;переменные, при определенных обстоятельствах, могут быть доступны во всем скрипте (и в функциях тоже). Для того, чтобы глобальная переменная была &quot;видима&quot; в функции, в последней используется инструкция&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>global</strong></code>, синтаксис которой следующий:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">&nbsp;<em>global список_переменных;</em></div>\n\n<p>Ниже приведен скрипт,&nbsp;демонстрирующий&nbsp;действие инструкции&nbsp;<strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">global</code></strong>, а также понятие глобальных и локальных переменных:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$i=4; $z=14;\nfunction my_func() {\n     $x=5;  $i=0;\n     global $z;\n     echo "i = $i z = $z&lt;br&gt;";\n     $z=11;\n}\nmy_func();\necho "x=$x z=$z&lt;br&gt;";\n?&gt;</code></pre>\n\n<p>Если в теле функции встречаются две переменные с одинаковыми идентификаторами и одна из которых локальная (определена в функции), а вторая глобальная, то приоритетом будет обладать глобальная переменная. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$i=10;   $g=7;\nfunction my_func()  {\n$i=5;     echo $i; // выведет 5\nglobal $i,$g;\necho $i; // выведет 10\n}\nmy_func();\n?&gt;</code></pre>\n\n<p>Кроме локальных и глобальных переменных, в PHP существует еще один тип переменных - <strong>статические</strong>. Если в теле функции объявлена статическая переменная (<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>static $x;</strong></code>), то компилятор не будет ее удалять после завершения работы функции до тех пор пока не завершится работа всего сценария, где расположена данная функция. Данная переменная по прежнему не будет &quot;видна&quot; вне функции, но ее изменившееся состояние будет сохранено до последующего обращения к данной функции.</p>\n', 40, '2020-04-30 04:53:58', '2020-04-30 04:58:19', 3702),
('753589978a6f11eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Сортировка массивов', '<h1><strong>Сортировка массивов в PHP</strong></h1>\n\n<p>Очень часто нужно отсортировать массив по индексу его элементов, по алфавиту его элементов, по возрастанию, по убыванию и т. д. В PHP для этого существует достойное количество функций, и в этом уроке мы поговорим именно о них.</p>\n\n<p>Первая функция -&nbsp;<strong><code>sort</code></strong>, которая сортирует массив по возрастанию значений его элементов, при этом изменяя индекс после сортировки:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[0] = "PHP"; \n$arr[1] = "HTML"; \n$arr[2] = "CSS";\n\nsort($arr); \n\nprint_r($arr);\n?&gt;</code></pre>\n\n<p>В нашем случае, массив отсортируется в алфавитном порядке. Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; CSS [1] =&gt; HTML [2] =&gt; PHP )</code></pre>\n\n<p>Вторая функция -&nbsp;<strong><code>rsort</code></strong>, которая сортирует массив по убыванию значений его элементов, при этом не изменяя индекс после сортировки:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[0] = "PHP"; \n$arr[1] = "HTML"; \n$arr[2] = "CSS";\n\nrsort($arr); \n\nprint_r($arr);\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; PHP [1] =&gt; HTML [2] =&gt; CSS )</code></pre>\n\n<p>Третья функция -&nbsp;<code>ksort</code>, которая сортирует массив по ключам, сохраняя отношения между ключами и значениями:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[0] = "PHP"; \n$arr[1] = "HTML"; \n$arr[2] = "CSS";\n\nksort($arr); \n\nprint_r($arr); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; PHP [1] =&gt; HTML [2] =&gt; CSS )</code></pre>\n\n<p>Следующая функция -&nbsp;<strong><code>krsort</code></strong>, которая сортирует массив по убыванию индексов его элементов:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[0] = "PHP"; \n$arr[1] = "HTML"; \n$arr[2] = "CSS";\n\nkrsort($arr); \n\nprint_r($arr); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [2] =&gt; CSS [1] =&gt; HTML [0] =&gt; PHP )</code></pre>\n\n<p>Также никто не мешает вам отсоритровать массив вручную, с дополнительной логикой, не используя встроенные функции:<br />\n<a href="uploads/63a9f0ea7bb98050796b649e85481845/arrsort-example.php" onclick="window.open(this.href, ''arrsortExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=200,left=10,height=400,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\n	$arr = array(2,7,3,5,999,9,11,1,6);\n	\n	// Пузырьковая сортировка по возрастанию\n	for($i = 0; $i &lt; count($arr); ++$i) {\n		for ($j = 0; $j &lt; count($arr); ++$j) {\n			if ($arr[$j] == 999)\n				continue; // пропускаем число 999\n			if ($arr[$i]&lt; $arr[$j])\n			{\n				$tmp = $arr[$i];\n				$arr[$i] = $arr[$j];\n				$arr[$j] =$tmp; \n			}\n		}\n	}\n	\n	// Выводим по возрастанию, 999 стоит на месте\n	foreach($arr as $value) {\n		echo "$value &lt;br /&gt;";\n	}\n	echo "&lt;br /&gt;";\n	\n	// Выводим теперь по убыванию (включая 999)\n	rsort($arr);\n	foreach($arr as $value) {\n		echo "$value &lt;br /&gt;";\n	}\n?&gt;</code></pre>\n\n<p><br />\n&nbsp;</p>\n', 34, '2020-04-30 02:16:30', '2020-04-30 02:17:23', 4086),
('7d96fb7d8a8d11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Основы ООП в PHP7', '<h1><strong>Основы ООП в PHP7</strong></h1>\n\n<h2><span style="color:#3498db"><strong>class</strong></span></h2>\n\n<p>Каждое определение класса начинается с ключевого слова&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>class</em></code>, затем следует имя класса, и далее пара фигурных скобок, которые заключают в себе определение свойств и методов этого класса.</p>\n\n<p>Именем класса может быть любое слово, при условии, что оно не входит в список&nbsp;зарезервированных слов&nbsp;PHP, начинается с буквы или символа подчеркивания и за которым следует любое количество букв, цифр или символов подчеркивания. Если задать эти правила в виде регулярного выражения, то получится следующее выражение:&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">^[a-zA-Z_\\x80-\\xff][a-zA-Z0-9_\\x80-\\xff]*$</code>.</p>\n\n<p>Класс может содержать собственные&nbsp;константы,&nbsp;переменные&nbsp;(называемые свойствами) и функции (называемые методами).</p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass SimpleClass\n{\n    // объявление свойства\n    public $var = ''значение по умолчанию'';\n\n    // объявление метода\n    public function displayVar() {\n        echo $this-&gt;var;\n    }\n}\n?&gt;</code></pre>\n\n<p>Псевдопеременная&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><var><var>$this</var></var></code>&nbsp;доступна в том случае, если метод был вызван в контексте объекта.&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><var><var>$this</var></var></code>&nbsp;является ссылкой на вызываемый объект. Обычно это тот объект, которому принадлежит вызванный метод, но может быть и другой объект, если метод был вызван&nbsp;статически&nbsp;из контекста другого объекта. Начиная с PHP 7.0.0, вызов нестатического метода статическим способом из неподходящего контекста приведет к тому, что <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$this</code> будет неопределен внутри метода. Вызов нестатического метода статическим способом из неподходящего контекста было объявлено устаревшим в PHP 5.6.0. Начиная с PHP 7.0.0, подобный вызов объявлен совсем устаревшим (если только вызов не произошел из подходящего контекста). До PHP 5.6.0, подобные вызовы уже сопровождались строгим уведомлением.</p>\n\n<p><span style="color:#f1c40f"><em>Мы предполагаем, что error_reporting отключен для этого примера; в противном случае следующий код, в зависимости от версии PHP, вызовет предупреждения уровней &quot;устаревшее&quot; или &quot;строгое&quot;.</em></span></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass A\n{\n    function foo()\n    {\n        if (isset($this)) {\n            echo ''$this определена ('';\n            echo get_class($this);\n            echo ")\\n";\n        } else {\n            echo "\\$this не определена.\\n";\n        }\n    }\n}\n\nclass B\n{\n    function bar()\n    {\n        A::foo();\n    }\n}\n\n$a = new A();\n$a-&gt;foo();\n\nA::foo();\n\n$b = new B();\n$b-&gt;bar();\n\nB::bar();\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера в PHP 5:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">$this определена (A)<br />\n$this не определена.<br />\n$this определена (B)<br />\n$this не определена.</div>\n\n<p>Результат выполнения данного примера в PHP 7:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">$this определена (A)<br />\n$this не определена.<br />\n$this не определена.<br />\n$this не определена.</div>\n\n<h2><span style="color:#3498db"><strong>new</strong></span></h2>\n\n<p>Для создания экземпляра класса используется директива&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>new</em></code>. Новый объект всегда будет создан, за исключением случаев, когда он содержит&nbsp;конструктор, в котором определен вызов&nbsp;исключения&nbsp;в случае ошибки. Рекомендуется определять классы до создания их экземпляров (в некоторых случаях это обязательно).</p>\n\n<p>Если с директивой&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>new</em></code>&nbsp;используется строка (string), содержащая имя класса, то будет создан новый экземпляр этого класса. Если имя находится в пространстве имен, то оно должно быть задано полностью.</p>\n\n<blockquote>\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><strong>Замечание</strong>: В случае отсутствия аргументов в конструктор класса, круглые скобки после названия класса можно опустить.</div>\n</blockquote>\n\n<p><strong>Создание экземпляра класса</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\n$instance = new SimpleClass();\n\n// Это же можно сделать с помощью переменной:\n$className = ''SimpleClass'';\n$instance = new $className(); // new SimpleClass()\n?&gt;</code></pre>\n\n<p>В контексте класса можно создать новый объект через&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>new self</em></code>&nbsp; и&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>new parent</em></code>.</p>\n\n<p>Когда происходит присвоение уже существующего экземпляра класса новой переменной, то эта переменная будет указывать на этот же экземпляр класса. То же самое происходит и при передаче экземпляра класса в функцию. Копию уже созданного объекта можно создать через ее&nbsp;клонирование.</p>\n\n<p><strong>Присваивание объекта</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\n$instance = new SimpleClass();\n\n$assigned   =  $instance;\n$reference  =&amp; $instance;\n\n$instance-&gt;var = ''$assigned будет иметь это значение'';\n\n$instance = null; // $instance и $reference становятся null\n\nvar_dump($instance);\nvar_dump($reference);\nvar_dump($assigned);\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<pre style="background: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); padding: 5px 10px;">\n<tt>NULL\nNULL\nobject(SimpleClass)#1 (1) {\n   [&quot;var&quot;]=&gt;\n     string(30) &quot;$assigned будет иметь это значение&quot;\n}</tt></pre>\n\n<p>В PHP 5.3.0 введены несколько новых методов создания экземпляров объекта:</p>\n\n<p><strong>Создание новых объектов</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass Test\n{\n    static public function getNew()\n    {\n        return new static;\n    }\n}\n\nclass Child extends Test\n{}\n\n$obj1 = new Test();\n$obj2 = new $obj1;\nvar_dump($obj1 !== $obj2);\n\n$obj3 = Test::getNew();\nvar_dump($obj3 instanceof Test);\n\n$obj4 = Child::getNew();\nvar_dump($obj4 instanceof Child);\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">bool(true)<br />\nbool(true)<br />\nbool(true)</div>\n\n<p>В PHP 5.4.0 введена возможность обратиться к свойству или методу только что созданного объекта в одном выражении:</p>\n\n<p><strong>Доступ к свойствам/методам только что созданного объекта</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php echo (new DateTime())-&gt;format(''Y''); ?&gt;</code></pre>\n\n<p>Результатом выполнения данного примера будет что-то подобное:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">2016</div>\n\n<h2><span style="color:#3498db"><strong>Свойства и методы</strong></span></h2>\n\n<p>Свойства и методы класса живут в разделенных &quot;пространствах имен&quot;, так что возможно иметь свойство и метод с одним и тем же именем. Ссылки как на свойства, так и на методы имеют одинаковую нотацию, и получается, что получите вы доступ к свойству или же вызовете метод - определяется контекстом использования.</p>\n\n<p><strong>Доступ к свойству vs. вызов метода</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass Foo\n{\n    public $bar = ''свойство'';\n    \n    public function bar() {\n        return ''метод'';\n    }\n}\n\n$obj = new Foo();\necho $obj-&gt;bar, PHP_EOL, $obj-&gt;bar(), PHP_EOL;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">свойство<br />\nметод</div>\n\n<p>Это означает, что вызвать&nbsp;анонимную функцию, присвоенную переменной, напрямую не получится. Вместо этого свойство должно быть назначено, например, переменной. Начиная с PHP 7.0.0, можно вызвать такое свойство напрямую, заключив его в скобки.</p>\n\n<p><strong>Вызов анонимной функции, содержащейся в свойстве</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass Foo\n{\n    public $bar;\n    \n    public function __construct() {\n        $this-&gt;bar = function() {\n            return 42;\n        };\n    }\n}\n\n$obj = new Foo();\n\n// Начиная с PHP 5.3.0:\n$func = $obj-&gt;bar;\necho $func(), PHP_EOL;\n\n// Или так, начиная с PHP 7.0.0:\necho ($obj-&gt;bar)(), PHP_EOL;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">42</div>\n\n<h2><span style="color:#3498db"><strong>extends</strong></span></h2>\n\n<p>Класс может наследовать методы и свойства другого класса используя ключевое слово&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>extends</em></code>&nbsp;в его объявлении. Невозможно наследовать несколько классов, один класс может наследовать только один базовый класс.</p>\n\n<p>Наследуемые методы и свойства могут быть переопределены (за исключением случаев, когда метод класса объявлен как&nbsp;<strong>final</strong>) путем объявления их с теми же именами, как и в родительском классе. Существует возможность доступа к переопределенным методам или статическим свойствам путем обращения к ним через&nbsp;<strong>parent::</strong></p>\n\n<p>При переопределении методов количество и типы аргументов должны оставаться такими же, как и были, иначе PHP вызовет ошибку уровня&nbsp;<strong><code>E_STRICT</code></strong>. Это не относится к конструктору, который можно переопределить с другими параметрами.</p>\n\n<p><strong>Простое наследование классов</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass ExtendClass extends SimpleClass\n{\n    // Переопределение метода родителя\n    function displayVar()\n    {\n        echo "Расширенный класс\\n";\n        parent::displayVar();\n    }\n}\n\n$extended = new ExtendClass();\n$extended-&gt;displayVar();\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">Расширенный класс<br />\nзначение по умолчанию</div>\n\n<h2><span style="color:#3498db"><strong>::class</strong></span></h2>\n\n<p>Начиная с PHP 5.5 можно использовать ключевое слово&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>class</em></code>&nbsp;для разрешения имени класса. С помощью конструкции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>ClassName::class</em></code>&nbsp;можно получить строку с абсолютным именем класса&nbsp;<em>ClassName</em>. Обычно это довольно полезно при работе с классами, использующими&nbsp;пространства имен.</p>\n\n<p><strong>Разрешение имени класса</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nnamespace NS {\n    class ClassName {\n    }\n\n    echo ClassName::class;\n}\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">NS\\ClassName</div>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>Больше информации на <a href="https://www.php.net/manual/ru/language.oop5.php">официальном источнике</a>.&nbsp;</p>\n', 52, '2020-04-30 05:51:29', '2020-04-30 05:51:29', 16550),
('852d36a78a4b11eab1430cc47aaabd6c', 'cc51dca689b711eab1430cc47aaabd6c', 'Математические операторы и функции', '<h1><strong>Математические операторы и функции</strong></h1>\n\n<p>Числовые данные обрабатываются при помощи таких операторов PHP:</p>\n\n<table border="4" cellpadding="3">\n	<tbody>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">+$a</code></strong></td>\n			<td>Идентичность</td>\n			<td>Конвертация&nbsp;<var><var>$a</var></var>&nbsp;в&nbsp;<em>int</em>&nbsp;или&nbsp;<em>float</em>, что более подходит.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">-$a</code></strong></td>\n			<td>Отрицание</td>\n			<td>Смена знака&nbsp;<var><var>$a</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a + $b</code></strong></td>\n			<td>Сложение</td>\n			<td>Сумма&nbsp;<var><var>$a</var></var>&nbsp;и&nbsp;<var><var>$b</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a - $b</code></strong></td>\n			<td>Вычитание</td>\n			<td>Разность&nbsp;<var><var>$a</var></var>&nbsp;и&nbsp;<var><var>$b</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a * $b</code></strong></td>\n			<td>Умножение</td>\n			<td>Произведение&nbsp;<var><var>$a</var></var>&nbsp;и&nbsp;<var><var>$b</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a / $b</code></strong></td>\n			<td>Деление</td>\n			<td>Частное от деления&nbsp;<var><var>$a</var></var>&nbsp;на&nbsp;<var><var>$b</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a % $b</code></strong></td>\n			<td>Деление по модулю</td>\n			<td>Целочисленный остаток от деления&nbsp;<var><var>$a</var></var>&nbsp;на&nbsp;<var><var>$b</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a ** $b</code></strong></td>\n			<td>Возведение в степень</td>\n			<td>Возведение&nbsp;<var><var>$a</var></var>&nbsp;в степень&nbsp;<var><var>$b</var></var>. Добавлено в PHP 5.6.</td>\n		</tr>\n	</tbody>\n</table>\n\n<pre>\n<code class="language-php">&lt;?php\necho "2 + 2 = ", 2 + 2, "&lt;br&gt;"; \necho "5 - 2 = ", 5 - 2, "&lt;br&gt;"; \necho "10 * 10 = ", 10 * 10, "&lt;br&gt;"; \necho "100 / 2 = ", 100 / 2, "&lt;br&gt;"; \necho "10 % 2 = ", 10 % 2, "&lt;br&gt;";\necho "10 ** 2 = ", 10 ** 2, "&lt;br&gt;";\n?&gt;</code></pre>\n\n<p>Отображение в браузере</p>\n\n<pre>\n<code class="language-php">2 + 2 = 4 \n5 - 2 = 3\n10 * 10 = 100\n100 / 2 = 50\n10 % 2 = 0\n10 ** 2 = 100</code></pre>\n\n<p>Операция деления <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">/</code>&nbsp;возвращает число с плавающей точкой, кроме случая, когда оба значения являются целыми числами (или строками, которые преобразуются в целые числа), которые делятся нацело - в этом случае возвращается целое значение. Для целочисленного деления используйте&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">intdiv()</code>.</p>\n\n<p>При делении по модулю операнды преобразуются в целые числа (путем удаления дробной части) до начала операции. Для деления по модую чисел с плавающей точкой используйте&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">fmod()</code>.</p>\n\n<p>Результат операции остатка от деления&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>%</em></code>&nbsp;будет иметь тот же знак, что и делимое &mdash; то есть, результат&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>$a % $b</em></code>&nbsp;будет иметь тот же знак, что и&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><var><var>$a</var></var></code>. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho (5 % 3)."\\n";           // выводит 2\necho (5 % -3)."\\n";          // выводит 2\necho (-5 % 3)."\\n";          // выводит -2\necho (-5 % -3)."\\n";         // выводит -2\n?&gt;</code></pre>\n\n<h2><strong>Математические функции</strong></h2>\n\n<p>PHP имеет огромное количество математических функций, вот их полный перечень:</p>\n\n<ul>\n	<li><strong>Abs</strong>. Модуль числа.</li>\n	<li><strong>Sin</strong>. Синус.</li>\n	<li><strong>Sinh</strong>. Гиперболический синус.</li>\n	<li><strong>Cos</strong>. Косинус</li>\n	<li><strong>Cosh</strong>. Гиперболический косинус.</li>\n	<li><strong>Acos</strong>. Арккосинус</li>\n	<li><strong>Acosh</strong>. Гиперболический арккосинус.</li>\n	<li><strong>Asin</strong>. Арксинус.</li>\n	<li><strong>Asinh</strong>. Гиперболический арксинус.</li>\n	<li><strong>Atan2</strong>. Арктангенс частного двух переменных.</li>\n	<li><strong>Tan</strong>. Тангенс.</li>\n	<li><strong>Tanh</strong>. Гиперболический тангенс.</li>\n	<li><strong>Atan</strong>. Арктангенс.</li>\n	<li><strong>Atan</strong>. Гиперболический арктангенс</li>\n	<li><strong>Base_convert</strong>. Преобразование числа в строковом представлении из одной системы<br />\n	счисления в другую.</li>\n	<li><strong>Decoct</strong>. Преобразование числа в восьмеричное представление в виде строки.</li>\n	<li><strong>Bindec</strong>. Преобразование строки, предоставленной в двоичном числе, в целое значение.</li>\n	<li><strong>Octdec</strong>. Преобразование строки, представляющей восьмеричное число, в целое число.</li>\n	<li><strong>Hexdec</strong>. Преобразование строки, которая представляет шестнадцатеричное число, в целое число.</li>\n	<li><strong>Ceil</strong>. Округление числа в большую сторону.</li>\n	<li><strong>Floor</strong>. Округление числа в меньшую сторону.</li>\n	<li><strong>Deg2rad</strong>. Градусы в радианы.</li>\n	<li><strong>Exp</strong>. Вычисление экспоненты числа.</li>\n	<li><strong>Fmod</strong>. Остаток от деления двух чисел.</li>\n	<li><strong>Getrandmax</strong>. Макс. значение, которое получают функцией&nbsp;<em><strong>rand()</strong></em></li>\n	<li><strong>Hypot</strong>. Вычисление гипотенузы по двум катетам.</li>\n	<li><strong>Is_finite</strong>. Проверка, является ли число конечным вещественным числом.</li>\n	<li><strong>Is_infinite</strong>. Проверка, является ли число бесконечностью.</li>\n	<li><strong>Is_nan</strong>. Проверка, является ли значение Не числом(Not-A-Number).</li>\n	<li><strong>Lcg_value</strong>. Генератор случайных чисел.</li>\n	<li><strong>Log10</strong>. Десятичный логарифм.</li>\n	<li><strong>Log</strong>. Натуральный логарифм.</li>\n	<li><strong>Max</strong>. Максимум заданных чисел.</li>\n	<li><strong>Min</strong>. Минимум заданных чисел.</li>\n	<li><strong>Mt_getrandmax</strong>. Макс. значение, которое можно получить функцией&nbsp;<em><strong>mt_rand</strong></em>.</li>\n	<li><strong>Mt_rand</strong>. Генератор псевдослучайных чисел по алгоритму.</li>\n	<li><strong>Pi</strong>. Значение числа &pi;.</li>\n	<li><strong>Pow</strong>. Возведение в степень.</li>\n	<li><strong>Round</strong>. Округляет число типа float.</li>\n	<li><strong>Sqrt</strong>. Квадратный корень.</li>\n</ul>\n\n<pre>\n<code class="language-php">&lt;?php\necho "round(4.2) = ", round(4.2), "&lt;br&gt;"; \necho "hypot(3.0,4.0) = ", hypot(3.0,4.0), "&lt;br&gt;";\necho "sin(pi()) = ", sin(pi()), "&lt;br&gt;"; // можно также использовать M_PI\necho "max(3.5,-2.0,6,700) = ", max(3.5,-2.0,6,700), "&lt;br&gt;"; // неограниченное число аргументов \n?&gt;</code></pre>\n\n<p><a href="uploads/63a9f0ea7bb98050796b649e85481845/math-example.php" onclick="window.open(this.href, ''mathExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=365,left=10,height=200,top=10''); return false;">Запустить пример</a><br />\nОтображение в браузере</p>\n\n<pre>\n<code class="language-php">round(4.2) = 4\nhypot(3.0,4.0) = 5.0\nsin(pi()) = 1.2246467991474E-16 // так называемый, машинный ноль\nmax(3.5,-2.0,6,700) = 700\n</code></pre>\n\n<hr />\n<p>&nbsp;<a href="https://www.php.net/manual/ru/ref.math.php">Полная справка по математическим функциям</a></p>\n', 15, '2020-04-29 21:59:14', '2020-04-30 00:02:28', 10875),
('88d995928a6511eab1430cc47aaabd6c', 'e0d0ca9989b711eab1430cc47aaabd6c', 'Функции обработки строк', '<h1><strong>Функции обработки строк в PHP</strong></h1>\n\n<p>Одна из главных задач, которую приходится решать разработчикам веб-приложений, - это работа со строками. PHP 7 имеет обширный арсенал обработки строк. С помощью этих фукнций можно, например, обрезать строку, дописывать строку, заменить часть строки и много другое. Это очень полезный инструмент и вы частенько будете использовать все эти функции при разработке своих скриптов.</p>\n\n<p>Все функции для обработки строк перечислены ниже:</p>\n\n<table border="4" cellpadding="3">\n	<tbody>\n		<tr>\n			<td>chr</td>\n			<td>Возвращает символ по его коду ASCII</td>\n		</tr>\n		<tr>\n			<td>chunk_split</td>\n			<td>Разбивает строку на подстроки заданной длины</td>\n		</tr>\n		<tr>\n			<td>crypt</td>\n			<td>Зашифровывает строку с использованием одного из алгоритмов</td>\n		</tr>\n		<tr>\n			<td>echo</td>\n			<td>Выводит одну или несколько строк</td>\n		</tr>\n		<tr>\n			<td>explode</td>\n			<td>Разбивает строку на подстроки, ограниченные заданным разделителем, и форматирует из них массив</td>\n		</tr>\n		<tr>\n			<td>html_entity_decode</td>\n			<td>Декодирует все HTML-представления в соответствующие символы. Функция обратно по отношению к htmlentites</td>\n		</tr>\n		<tr>\n			<td>htmlentites</td>\n			<td>Кодирует все специальные символы в их HTML-представление</td>\n		</tr>\n		<tr>\n			<td>htmlspecialchars</td>\n			<td>Кодирует все символы в их HTML-представление</td>\n		</tr>\n		<tr>\n			<td>implode</td>\n			<td>Формирует строку из элементов массива</td>\n		</tr>\n		<tr>\n			<td>ltrim</td>\n			<td>Удаляет начальные пробелы из строки</td>\n		</tr>\n		<tr>\n			<td>rtrim</td>\n			<td>Удаляет конечные пробелы из строки</td>\n		</tr>\n		<tr>\n			<td>number_format</td>\n			<td>Представляет число в виде строки в различных форматах</td>\n		</tr>\n		<tr>\n			<td>ord</td>\n			<td>Возвращает ASCII-код символа</td>\n		</tr>\n		<tr>\n			<td>parse_str</td>\n			<td>Разбивает строку URL и присваивает значение переменным</td>\n		</tr>\n		<tr>\n			<td>print</td>\n			<td>Выводит строку</td>\n		</tr>\n		<tr>\n			<td>printf</td>\n			<td>Выводит строку с форматированием</td>\n		</tr>\n		<tr>\n			<td>sprintf</td>\n			<td>Возвращает строку с форматированием</td>\n		</tr>\n		<tr>\n			<td>setlocale</td>\n			<td>Устанавливает информацию о кодовой странице</td>\n		</tr>\n		<tr>\n			<td>similar_text</td>\n			<td>Вычисляет степень похожести двух строк</td>\n		</tr>\n		<tr>\n			<td>sscanf</td>\n			<td>Разбивает строку по шаблону и присваивает полученные значения переменным</td>\n		</tr>\n		<tr>\n			<td>str_ireplace</td>\n			<td>То же самое, что и str_replace, но без учета различий в регистре символов</td>\n		</tr>\n		<tr>\n			<td>str_pad</td>\n			<td>Дополняет строку до заданной длины другой строкой</td>\n		</tr>\n		<tr>\n			<td>str_repeat</td>\n			<td>Повторяет строку заданное количество раз</td>\n		</tr>\n		<tr>\n			<td>str_replace</td>\n			<td>Ищет в строке все вхождения подстроки и меняет на заданную строку</td>\n		</tr>\n		<tr>\n			<td>str_shuffle</td>\n			<td>Случайным образом перемешивает все символы в строке</td>\n		</tr>\n		<tr>\n			<td>str_split</td>\n			<td>Формирует массив из символов строки</td>\n		</tr>\n		<tr>\n			<td>str_word_count</td>\n			<td>Подсчитывает количество слов в строке</td>\n		</tr>\n		<tr>\n			<td>strcasecmp</td>\n			<td>Выполняет побайтовое сравнение строк без учета регистра символов</td>\n		</tr>\n		<tr>\n			<td>strcht</td>\n			<td>То же самое что strstr</td>\n		</tr>\n		<tr>\n			<td>strcmp</td>\n			<td>Выполняет побайтовое сравнение строк с учетом регистра символов</td>\n		</tr>\n		<tr>\n			<td>strip_tags</td>\n			<td>Удаляет из строки все HTML-и PHP-теги</td>\n		</tr>\n		<tr>\n			<td>stripos</td>\n			<td>Ищет первое вхождение подстроки в строке без учета регистра символов</td>\n		</tr>\n		<tr>\n			<td>stristr</td>\n			<td>То же самое что strstr, но без учета регистра символов</td>\n		</tr>\n		<tr>\n			<td>strlen</td>\n			<td>Возвращает длину строки</td>\n		</tr>\n		<tr>\n			<td>strnatcasecmp</td>\n			<td>То же самое что strnatcmp, но без учета регистра символов</td>\n		</tr>\n		<tr>\n			<td>strncmp</td>\n			<td>Выполняет побайтовое сравнение первых n символов строк</td>\n		</tr>\n		<tr>\n			<td>strpos</td>\n			<td>Ищет первое вхождение подстроки в строке</td>\n		</tr>\n		<tr>\n			<td>strrchr</td>\n			<td>Ищет последнее вхождение символа в строке</td>\n		</tr>\n		<tr>\n			<td>strrev</td>\n			<td>Инвертирует строку - прочитывает ее справа налево</td>\n		</tr>\n		<tr>\n			<td>strripos</td>\n			<td>Ищет последнее вхождение подстроки в строке без учета регистра символов</td>\n		</tr>\n		<tr>\n			<td>strrpos</td>\n			<td>Ищет последнее вхождение подстроки в строке</td>\n		</tr>\n		<tr>\n			<td>strspn</td>\n			<td>Возвращает длину участка строки, состоящего из заданных символов</td>\n		</tr>\n		<tr>\n			<td>strstr</td>\n			<td>Возвращает часть строки от первого вхождения подстроки до конца</td>\n		</tr>\n		<tr>\n			<td>strtolower</td>\n			<td>Преобразует прописные буквы в строчные</td>\n		</tr>\n		<tr>\n			<td>strtoupper</td>\n			<td>Преобразует строчные буквы в прописные</td>\n		</tr>\n		<tr>\n			<td>strtr</td>\n			<td>Преобразует заданные символы в строке</td>\n		</tr>\n		<tr>\n			<td>substr_compare</td>\n			<td>Сравнивает две строки, начиная с заданного смещения</td>\n		</tr>\n		<tr>\n			<td>substr_count</td>\n			<td>Подсчитывает, сколько раз заданная подстрока встречается в строке</td>\n		</tr>\n		<tr>\n			<td>substr_replace</td>\n			<td>Ищет в заданном участке строки все вхождения подстроки и меняет на другую строку</td>\n		</tr>\n		<tr>\n			<td>substr</td>\n			<td>Возвращает заданную часть исходной строки</td>\n		</tr>\n		<tr>\n			<td>trim</td>\n			<td>Удаляет начальные и конечные пробелы из строки</td>\n		</tr>\n		<tr>\n			<td>ucfirst</td>\n			<td>Преобразует первую букву строки в прописную</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>Более подробную информацию про все строковые функции вы можете найти на&nbsp;<a href="http://php.net/manual/ru/ref.strings.php" rel="nofollow" target="_blank">странице официальной документации</a>.</p>\n', 29, '2020-04-30 01:05:28', '2020-04-30 01:05:28', 8512),
('8908181d8a8e11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Конструкторы и деструкторы', '<h1><strong>Конструкторы и деструкторы</strong></h1>\n\n<h2><span style="color:#3498db"><strong>Конструктор</strong></span></h2>\n\n<pre>\n<code class="language-php">__construct ([ mixed $args [, $... ]] ) : void</code></pre>\n\n<p>PHP 5 позволяет объявлять методы-конструкторы. Классы, в которых объявлен метод-конструктор, будут вызывать этот метод при каждом создании нового объекта, так что это может оказаться полезным, например, для инициализации какого-либо состояния объекта перед его использованием.</p>\n\n<p><strong>Использование унифицированных конструкторов</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass BaseClass {\n   function __construct() {\n       print "Конструктор класса BaseClass\\n";\n   }\n}\n\nclass SubClass extends BaseClass {\n   function __construct() {\n       parent::__construct();\n       print "Конструктор класса SubClass\\n";\n   }\n}\n\nclass OtherSubClass extends BaseClass {\n    // наследует конструктор BaseClass\n}\n\n// Конструктор класса BaseClass\n$obj = new BaseClass();\n\n// Конструктор класса BaseClass\n// Конструктор класса SubClass\n$obj = new SubClass();\n\n// Конструктор класса BaseClass\n$obj = new OtherSubClass();\n?&gt;</code></pre>\n\n<p>В целях обратной совместимости, если PHP 5 не может обнаружить объявленный метод&nbsp;__construct(), то вызов конструктора произойдет по устаревшей схеме, через обращение к методу, имя которого соответствует имени класса. Может возникнуть только одна проблема совместимости старого кода, если в нём присутствуют классы с методами&nbsp;__construct(), использующиеся для других целей.</p>\n\n<p>&nbsp;</p>\n\n<p>Начиная с PHP 5.3.3, методы с именами, совпадающими с последним элемeнтом имени класса, находящимся в пространстве имен, больше не будут считаться конструкторами. Это изменение не влияет на классы, не находящиеся в пространстве имен.</p>\n\n<p><strong>Конструкторы в классах, находящихся в пространстве имен</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nnamespace Foo;\nclass Bar {\n    public function Bar() {\n        // рассматривается как конструктор в версиях PHP 5.3.0-5.3.2\n        // и как обычный метод, начиная с версии PHP 5.3.3\n    }\n}\n?&gt;</code></pre>\n\n<h2><span style="color:#3498db"><strong>Деструктор</strong></span></h2>\n\n<pre>\n<code class="language-php">__destruct ( void ) : void</code></pre>\n\n<p>PHP 5 предоставляет концепцию деструктора, аналогичную с той, которая применяется в других ОО-языках, таких как C++. Деструктор будет вызван при освобождении всех ссылок на определенный объект или при завершении скрипта (порядок выполнения деструкторов не гарантируется).</p>\n\n<p><strong>Пример использования деструктора</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass MyDestructableClass\n{\n   function __construct() {\n       print "Конструктор\\n";\n   }\n\n   function __destruct() {\n       print "Уничтожается " . __CLASS__  . "\\n";\n   }\n}\n\n$obj = new MyDestructableClass();</code></pre>\n\n<p>Как и в случае с конструкторами, деструкторы, объявленные в родительском классе, не будут вызываться автоматически. Для вызова деструктора родительского класса, требуется вызвать&nbsp;<strong>parent::__destruct()</strong>&nbsp;в теле деструктора дочернего класса. Подобно конструкторам, дочерний класс может унаследовать деструктор из родительского класса, если он не определен в нем.</p>\n\n<p>Деструктор будет вызываться даже в том случае, если скрипт был остановлен с помощью функции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>exit()</strong></code>. Вызов&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>exit()</strong></code>&nbsp;в деструкторе предотвратит запуск всех последующих функций завершения.</p>\n', 54, '2020-04-30 05:58:57', '2020-04-30 05:58:57', 5658),
('9cebb87b8a8a11eab1430cc47aaabd6c', '4d655b7b89b811eab1430cc47aaabd6c', 'Базовые примеры расширения', '<h1><strong>Базовые примеры расширения MySQLi</strong></h1>\n\n<p>Этот пример показывает как соединяться, выполнять запрос, использовать базовую обработку ошибок, распечатывать результирующую выборку и отключаться от базы данных MySQL.</p>\n\n<p>В этом примере используется свободно доступная база данных Sakila которая может быть загружена с&nbsp;<a href="http://dev.mysql.com/doc/sakila/en/index.html">&raquo;&nbsp;dev.mysql.com, как описано здесь</a>. Для того, чтобы этот пример работал (a) установите sakila и (b) измените переменные для соединения с БД (host, your_user, your_pass).</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Давайте начнем с переменной $_GET в нашем примере.\n// Она содержит идентификатор aid для поля actor_id в БД Sakila. \n// Пусть ее значение по умолчанию будет 1\n// и тип этой переменной будет строго целочисленным во избежание SQL-инъекции\n// и/или связанных с этим проблем безопасности. Контроль всего перечисленного выше \n // лежит за пределами этого простого примера.\n// Пример:\n//   http://example.org/script.php?aid=42\nif (isset($_GET[''aid'']) &amp;&amp; is_numeric($_GET[''aid''])) {\n    $aid = (int) $_GET[''aid''];\n} else {\n    $aid = 1;\n}\n\n// Подключаемся к базе MySQL и выбираем базу под названием sakila\n// Хост: 127.0.0.1, имя пользователя: your_user, пароль: your_pass, база: sakila\n$mysqli = new mysqli(''127.0.0.1'', ''your_user'', ''your_pass'', ''sakila'');\n\n// О нет!! переменная connect_errno существует, а это значит, что соединение не было успешным!\nif ($mysqli-&gt;connect_errno) {\n    // Соединение не удалось. Что нужно делать в этом случае? \n    // Можно отправить письмо администратору, отразить ошибку в журнале, \n    // информировать пользователя об ошибке на экране и т.п.\n    // Вам не нужно при этом раскрывать конфиденциальную информацию, поэтому\n    // просто попробуем так:\n    echo "Извините, возникла проблема на сайте";\n\n    // На реальном сайте этого делать не следует, но в качестве примера мы покажем \n    // как распечатывать информацию о подробностях возникшей ошибки MySQL\n    echo "Ошибка: Не удалась создать соединение с базой MySQL и вот почему: \\n";\n    echo "Номер ошибки: " . $mysqli-&gt;connect_errno . "\\n";\n    echo "Ошибка: " . $mysqli-&gt;connect_error . "\\n";\n    \n    // Вы можете захотеть показать что-то еще, но мы просто выйдем\n    exit;\n}\n\n// Выполняем запрос SQL\n$sql = "SELECT actor_id, first_name, last_name FROM actor WHERE actor_id = $aid";\nif (!$result = $mysqli-&gt;query($sql)) {\n    // О нет! запрос не удался. \n    echo "Извините, возникла проблема в работе сайта.";\n\n    // И снова: не делайте этого на реальном сайте, но в этом примере мы покажем, \n    // как получить информацию об ошибке:\n    echo "Ошибка: Наш запрос не удался и вот почему: \\n";\n    echo "Запрос: " . $sql . "\\n";\n    echo "Номер ошибки: " . $mysqli-&gt;errno . "\\n";\n    echo "Ошибка: " . $mysqli-&gt;error . "\\n";\n    exit;\n}\n\n// Уфф, мы это сделали. У нас есть соединение с базой данных и успешный запрос. \n// Но где же его результат?\nif ($result-&gt;num_rows === 0) {\n    // Упс! в запросе нет ни одной строки! Иногда это ожидаемо и нормально, иногда нет.\n    // Решать вам. В данном случае, может быть actor_id был слишком большим? \n    echo "Мы не смогли найти совпадение для $aid, простите. Пожалуйста, попробуйте еще раз.";\n    exit;\n}\n\n// Теперь мы знаем только, что результат выполнения запроса существует, поэтому давайте  \n// перенесем его в ассоциативный массив, в котором ключами массива будут названия\n // столбцов.\n$actor = $result-&gt;fetch_assoc();\necho "Иногда я вижу " . $actor[''first_name''] . " " . $actor[''last_name''] . " по телевизору.";\n\n// Теперь давайте выгрузим пять случайных актеров и выведем их имена в список.\n// Здесь мы добавим меньше степеней обработки ошибок, чтобы вы сделали это самостоятельно\n$sql = "SELECT actor_id, first_name, last_name FROM actor ORDER BY rand() LIMIT 5";\nif (!$result = $mysqli-&gt;query($sql)) {\n    echo "Извините, возникла проблема в работе сайта.";\n    exit;\n}\n\n// Распечатываем список из пяти случайно выбранных актеров и создаем ссылку на id \n// каждого из них\necho "&lt;ul&gt;\\n";\nwhile ($actor = $result-&gt;fetch_assoc()) {\n    echo "&lt;li&gt;&lt;a href=''" . $_SERVER[''SCRIPT_FILENAME''] . "?aid=" . $actor[''actor_id''] . "''&gt;\\n";\n    echo $actor[''first_name''] . '' '' . $actor[''last_name''];\n    echo "&lt;/a&gt;&lt;/li&gt;\\n";\n}\necho "&lt;/ul&gt;\\n";\n\n// Скрипт автоматически закрывает соединение MySQL и освобождает память, тем не \n// менее давайте сделаем это вручную\n$result-&gt;free();\n$mysqli-&gt;close();\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 48, '2020-04-30 05:30:53', '2020-04-30 05:30:53', 7397);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('a74d6d3b8a5411eab1430cc47aaabd6c', 'cc51d5da89b711eab1430cc47aaabd6c', 'Логические операторы', '<h1><strong>Логические операторы PHP</strong></h1>\n\n<p>Если нам нужно применить к выражению несколько условий, например: если больше 3 и меньше 6, то с помощью логических операторов мы можем это записать так:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$speed = 40;\n\nif ($speed &gt; 35 &amp;&amp; $speed &lt; 55) {\n    echo "Скорость в пределах нормы";\n}\n?&gt;</code></pre>\n\n<p>Полный список логических операторов представленный в таблице:</p>\n\n<table border="4" cellpadding="3">\n	<tbody>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">and</code></td>\n			<td>Логическое &quot;И&quot;</td>\n			<td>Истина, если истинно $a и $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&amp;&amp;</code></td>\n			<td>Логическое &quot;И&quot;</td>\n			<td>Истина, если истинно $a и $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">or</code></td>\n			<td>Логическое &quot;ИЛИ&quot;</td>\n			<td>Истина, если истинно $a или $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">||</code></td>\n			<td>Логическое &quot;ИЛИ&quot;</td>\n			<td>Истина, если истинно $a или $b</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">xor</code></td>\n			<td>Логическое &quot;Исключающее ИЛИ&quot;</td>\n			<td>Истина, если истинно $a или $b, но не оба одновременно</td>\n		</tr>\n		<tr>\n			<td><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">!</code></td>\n			<td>Логическое &quot;НЕ&quot;</td>\n			<td>Истина, если $a ложь</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Как вы видите, в таблице присутствуют два оператора &quot;И&quot; и &quot;ИЛИ&quot;. Это потому, что оператор&nbsp;<code>&amp;&amp;</code>&nbsp;или&nbsp;<code>||</code>&nbsp;имеет больший&nbsp;<a href="index.php?mode=view_article&amp;container=cc51dca689b711eab1430cc47aaabd6c&amp;article=32efcca88a5011eab1430cc47aaabd6c">приоритет</a>&nbsp;от &quot;И&quot; и &quot;ИЛИ&quot;.</p>\n', 20, '2020-04-29 23:04:37', '2020-04-29 23:17:59', 2773),
('a9932acd8a4e11eab1430cc47aaabd6c', 'cc51dca689b711eab1430cc47aaabd6c', 'Оператор присваивания', '<h1><strong>Оператор присваивания (присвоения)</strong></h1>\n\n<p>&nbsp;</p>\n\n<p>Основным оператором присвоения является знак равенства&nbsp;<code>=</code>. Он присваивает значение определенной переменной:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$fruits = 14;\n?&gt;</code></pre>\n\n<p>В одной строке можно присвоить одно значение сразу нескольким переменным, например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$n = $m = $p = 3; \necho $n, $m, $p;\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">333</code></pre>\n\n<p>Также в PHP есть комбинированные операторы, которые делают код более компактным. Вот их перечень:</p>\n\n<ul>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>+=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>-=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>/=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>.=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>%=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>&amp;=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>|=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>^=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>&lt;=</strong></code></li>\n	<li><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>&gt;=</strong></code></li>\n</ul>\n\n<p>Например, если нужно прибавить 55 к значению переменной&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$number</code>, это можно записать как:<br />\n<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$number = $number + 55</code>, а если использовать комбинированный оператор, то так:&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$number += 55</code>.</p>\n\n<h2><strong>Присваивание по ссылке</strong></h2>\n\n<p>Присваивание по ссылке также поддерживается, для него используется синтаксис&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$var = <strong>&amp;</strong>$othervar</code>.Присваивание по ссылке означает, что обе переменные указывают на одни и те же данные и никакого копирования не происходит.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$a = 3;\n$b = &amp;$a; // $b - это ссылка на $a\n\nprint "$a\\n"; // печатает 3\nprint "$b\\n"; // печатает 3\n\n$a = 4; // меняем $a\n\nprint "$a\\n"; // печатает 4\nprint "$b\\n"; // также печатает 4, так как $b является ссылкой на $a,\n              // а значение переменной $a успело измениться\n?&gt;</code></pre>\n\n<p>Оператор&nbsp;<strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">new</code></strong>&nbsp;автоматически возвращает ссылку, поэтому присваивание результата операции&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>new</strong></code>&nbsp;по ссылке не допускается с PHP 7.0.0, начиная с PHP 5.3.0 генерирует ошибку уровня&nbsp;<strong><code>E_DEPRECATED</code></strong>, а в более ранних версиях - ошибку уровня&nbsp;<strong><code>E_STRICT</code></strong>.</p>\n\n<p>Например, следующий код выдаст ошибку или предупреждение:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass C {}\n\n$o = &amp;new C;\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера в PHP 7:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">Parse error: syntax error, unexpected &#39;new&#39; (T_NEW) in &hellip;</div>\n', 16, '2020-04-29 22:21:44', '2020-04-29 22:23:30', 5313),
('aa349c1a8a5e11eab1430cc47aaabd6c', 'e0d0c46489b711eab1430cc47aaabd6c', 'Цикл for', '<h1><strong>for</strong></h1>\n\n<p>Цикл&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>for</em></code>&nbsp;самый сложный цикл в PHP. Он ведет себя так же, как и в языке C. Синтаксис цикла&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>for</em></code>&nbsp;следующий:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">for (expr1; expr2; expr3)<br />\n&nbsp;&nbsp;&nbsp; statement</div>\n\n<p>Первое выражение (<var><var>expr1</var></var>) всегда вычисляется (выполняется) только один раз в начале цикла.</p>\n\n<p>В начале каждой итерации оценивается выражение&nbsp;<var><var>expr2</var></var>. Если оно принимает значение&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>TRUE</strong></code>, то цикл продолжается и выполняются вложенные операторы. Если оно принимает значение&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>FALSE</strong></code>, выполнение цикла заканчивается. Также часто эти выражения называют: <var>expr1</var> -&gt; инициализация (<strong>initialization</strong>; <var>expr2</var> -&gt; условие (<strong>condition</strong>); <var>expr3</var> -&gt; инкремент (чаще всего) или побочное действие/дополнительное выражение (<strong>afterthought</strong>).</p>\n\n<p>В конце каждой итерации выражение&nbsp;<var><var>expr3</var></var>&nbsp;вычисляется (выполняется).</p>\n\n<p>Каждое из выражений может быть пустым или содержать несколько выражений, разделенных запятыми. В&nbsp;<var><var>expr2</var></var>&nbsp;все выражения, разделенные запятыми, вычисляются, но результат берется из последнего. Если выражение&nbsp;<var><var>expr2</var></var>&nbsp;отсутствует, это означает, что цикл будет выполняться бесконечно. (PHP неявно воспринимает это значение как&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>TRUE</strong></code>, так же, как в языке C). Это может быть не так бесполезно, как вы могли подумать, так как часто необходимо прервать цикл, используя условный оператор&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>break</em></code>&nbsp;вместо использования выражения в цикле&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>for</em></code>, которое принимает истинное значение.</p>\n\n<p>Рассмотрим следующие примеры. Все они отображают числа от 1 до 10.&nbsp;</p>\n\n<p><a href="/uploads/63a9f0ea7bb98050796b649e85481845/for-example.php" onclick="window.open(this.href, ''forExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=300,left=10,height=450,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\n/* пример 1 */\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    echo $i;\n}\n\n/* пример 2 */\n\nfor ($i = 1; ; $i++) {\n    if ($i &gt; 10) {\n        break;\n    }\n    echo $i;\n}\n\n/* пример 3 */\n\n$i = 1;\nfor (; ; ) {\n    if ($i &gt; 10) {\n        break;\n    }\n    echo $i;\n    $i++;\n}\n\n/* пример 4 */\n\nfor ($i = 1, $j = 0; $i &lt;= 10; $j += $i, print $i, $i++);\n?&gt;</code></pre>\n\n<p>Конечно, первый пример кажется самым хорошим (или, возможно, четвертый), но вы можете обнаружить, что возможность использовать пустые выражения в циклах&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>for</em></code>&nbsp;может стать удобной во многих случаях.</p>\n\n<p>PHP также поддерживает альтернативный синтаксис с двоеточием для циклов&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>for</em></code>.</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">for (expr1; expr2; expr3):<br />\n&nbsp;&nbsp;&nbsp; statement<br />\n&nbsp;&nbsp;&nbsp; ...<br />\nendfor;</div>\n\n<p>Перебор массивов как показано ниже - это обычное дело для многих пользователей.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n/*\n * Это массив с некоторыми данными, которые мы хотим изменить\n * при работе цикла.\n */\n$people = array(\n    array(''name'' =&gt; ''Kalle'', ''salt'' =&gt; 856412),\n    array(''name'' =&gt; ''Pierre'', ''salt'' =&gt; 215863)\n);\n\nfor($i = 0; $i &lt; count($people); ++$i) {\n    $people[$i][''salt''] = mt_rand(000000, 999999);\n}\n?&gt;</code></pre>\n\n<p>Вышеприведенный код может работать медленно, так как размер массива вычисляется в каждой итерации. Поскольку размер не меняется, цикл может быть легко оптимизирован с помощью промежуточной переменной, в которую будет записан размер массива, вместо повторяющихся вызовов функции&nbsp;<strong>count()</strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$people = array(\n    array(''name'' =&gt; ''Kalle'', ''salt'' =&gt; 856412),\n    array(''name'' =&gt; ''Pierre'', ''salt'' =&gt; 215863)\n);\n\nfor($i = 0, $size = count($people); $i &lt; $size; ++$i) {\n    $people[$i][''salt''] = mt_rand(000000, 999999);\n}\n?&gt;</code></pre>\n\n<p>Также в разделе Массивы будет рассмотрен немаловажный &quot;брат&quot; цикла <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">for</code> - цикл <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">foreach</code>, позволяющий итерироваться по объектам массивов.</p>\n', 25, '2020-04-30 00:16:17', '2020-04-30 00:16:17', 7393),
('b05e227789ea11eab1430cc47aaabd6c', 'cc51cd6889b711eab1430cc47aaabd6c', 'Создание переменной', '<h1><strong>Создание переменной</strong></h1>\n\n<p>PHP создан не только для форматирования статичного текста. Для того, чтобы обрабатывать различные данные были придуманы&nbsp;<strong>переменные</strong>. Переменная - контейнер c данными. Каждая переменная содержит определенное значение.</p>\n\n<p>Синтаксис переменной состоит из знака доллара -&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$</code>&nbsp;и &quot;свободного&quot; идентификатора которому присваивается какое-нибудь значение. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$name = "Виктор";\n?&gt;</code></pre>\n\n<ul>\n	<li><span style="color:#e74c3c">Имя (идентификатор) переменной не может начинаться с цифр и пробела</span></li>\n	<li><span style="color:#e74c3c">Имя переменной чувствительно к регистру</span></li>\n</ul>\n\n<p>Переменная создается тогда, когда ей присваивают какое-нибудь значение. Для присвоения значения переменной используют оператор присвоения, который состоит из знака равенства&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">=</code>. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$surname = "Петров"; \n$number = 1269794645; \n$pi = 3.14159265; \n$hello = "Hi all";\n?&gt;</code></pre>\n\n<p>Переменную можно вывести на экран с помощью оператора <strong><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">echo</code></strong>, вот так:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$name = "Анатолий"; \n\necho "Приветствую тебя, ", $name, "&lt;br&gt;"; \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Приветствую тебя, Анатолий</code></pre>\n\n<p>Теперь давайте создадим переменную, которая будет содержать значение количества яблок, вторая переменная количество персиков, а третья - их суммарное количество.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$apple = 7; // Яблоки\n$peach = 12; // Персики\n$sum = $apple + $peach; // Всего \n\necho "Количество фруктов ", $sum;\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Количество фруктов 19</code></pre>\n\n<p>Как вы видите, в третьей переменной мы сами ничего не складывали, за нас это сделал PHP.</p>\n\n<p>Если обратиться к переменной до её объявления, то при включенной настройке на вывод ошибок (см. статью про конфигурирование php) можно получить ошибку:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><em>Notice: Undefined variable: <strong>myVar</strong>&nbsp;in C:\\Web\\html\\test.php on line 7</em></div>\n\n<p>Здесь, при выполнении скрипта, интерпретатор PHP встретил переменную&nbsp;<em>$myVar</em>, не определенную ранее, и выдал соответсвующее сообщение. Забегая вперед, можно отметить, что для определения, того задана переменная или нет, используется функция&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><strong>isset($myVar)</strong></code>&nbsp;, аргументом ($myVar) которой является идентификатор интересующей нас переменной. Если она уже определена, функция вернет значение истины, в противном случае - ложь.</p>\n\n<ul>\n</ul>\n', 8, '2020-04-29 10:26:06', '2020-04-29 10:42:46', 4633),
('b70df49e8a5111eab1430cc47aaabd6c', 'cc51dca689b711eab1430cc47aaabd6c', 'Другие полезные операторы', '<h1><strong>Оператор управления ошибками</strong></h1>\n\n<p>PHP поддерживает один оператор управления ошибками: знак <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">@</code>. В случае, если он предшествует какому-либо выражению в PHP-коде, любые сообщения об ошибках, генерируемые этим выражением, будут проигнорированы.</p>\n\n<p>Если вы установили собственную функцию обработки ошибок с помощью&nbsp;<strong>set_error_handler()</strong>, то она все равно будет вызвана, однако, если внутри этой функции будет вызвана функция&nbsp;<strong>error_reporting()</strong>, то она вернет 0, если функция, вызвавшая данную ошибку, была подавлена с помощью <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">@</code>.</p>\n\n<p>В случае, если установлена опция&nbsp;<strong>track_errors</strong>&nbsp;, все генерируемые сообщения об ошибках будут сохраняться в переменной&nbsp;<var><var>$php_errormsg</var></var>. Эта переменная будет перезаписываться при каждой новой ошибке, поэтому в случае необходимости проверяйте ее сразу же.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// Преднамеренная ошибка при работе с файлами\n$my_file = @file (''non_existent_file'') or\n    die ("Ошибка при открытии файла: сообщение об ошибке было таким: ''$php_errormsg''");\n\n// работает для любых выражений, а не только для функций\n$value = @$cache[$key];\n// В случае если ключа $key нет, сообщение об ошибке (notice) не будет отображено\n\n?&gt;</code></pre>\n\n<h1><strong>Операторы исполнения</strong></h1>\n\n<p>PHP поддерживает один оператор исполнения: обратные кавычки <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">``</code>. Обратите внимание, что это не одинарные кавычки! PHP попытается выполнить строку, заключенную в обратные кавычки, как консольную команду, и вернет полученный вывод (то есть он не просто выводится на экран, а, например, может быть присвоен переменной). Использование обратных кавычек аналогично использованию функции&nbsp;<strong>shell_exec()</strong>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$output = `ls -al`;\necho "&lt;pre&gt;$output&lt;/pre&gt;";\n?&gt;</code></pre>\n\n<h1><strong>Оператор проверки экземпляра</strong></h1>\n\n<p>Оператор&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px"><em>instanceof</em></code>&nbsp;используется для определения того, является ли текущий объект экземпляром указанного&nbsp;класса. Работает также для наследования.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nclass MyClass\n{\n}\n\nclass NotMyClass\n{\n}\n$a = new MyClass;\n\nvar_dump($a instanceof MyClass);\nvar_dump($a instanceof NotMyClass);\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">bool(true)<br />\nbool(false)</div>\n\n<h1><strong>Операторы инкремента и декремента</strong></h1>\n\n<p>PHP поддерживает префиксные и постфиксные операторы инкремента и декремента в стиле C.</p>\n\n<blockquote>\n<p><strong>Замечание</strong>:&nbsp;Операторы инкремента/декремента влияют только на числа и строки. Массивы, объекты, булевы значения и ресурсы не будут изменены. Декремент&nbsp;<strong><code>NULL</code></strong>&nbsp;также не даст никакого эффекта, однако инкремент даст значение&nbsp;<em>1</em>.</p>\n</blockquote>\n\n<table border="4" cellpadding="3">\n	<caption><strong>Операторы инкремента и декремента</strong></caption>\n	<thead>\n		<tr>\n			<th>Пример</th>\n			<th>Название</th>\n			<th>Действие</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">++$a</code></td>\n			<td>Префиксный инкремент</td>\n			<td>Увеличивает&nbsp;<var><var>$a</var></var>&nbsp;на единицу, затем возвращает значение&nbsp;<var><var>$a</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a++</code></td>\n			<td>Постфиксный инкремент</td>\n			<td>Возвращает значение&nbsp;<var><var>$a</var></var>, затем увеличивает&nbsp;<var><var>$a</var></var>&nbsp;на единицу.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">--$a</code></td>\n			<td>Префиксный декремент</td>\n			<td>Уменьшает&nbsp;<var><var>$a</var></var>&nbsp;на единицу, затем возвращает значение&nbsp;<var><var>$a</var></var>.</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">$a--</code></td>\n			<td>Постфиксный декремент</td>\n			<td>Возвращает значение&nbsp;<var><var>$a</var></var>, затем уменьшает&nbsp;<var><var>$a</var></var>&nbsp;на единицу.</td>\n		</tr>\n	</tbody>\n</table>\n\n<pre>\n<code class="language-php">&lt;?php\necho "&lt;h3&gt;Постфиксный инкремент&lt;/h3&gt;";\n$a = 5;\necho "Должно быть 5: " . $a++ . "&lt;br /&gt;\\n";\necho "Должно быть 6: " . $a . "&lt;br /&gt;\\n";\n\necho "&lt;h3&gt;Префиксный инкремент&lt;/h3&gt;";\n$a = 5;\necho "Должно быть 6: " . ++$a . "&lt;br /&gt;\\n";\necho "Должно быть 6: " . $a . "&lt;br /&gt;\\n";\n\necho "&lt;h3&gt;Постфиксный декремент&lt;/h3&gt;";\n$a = 5;\necho "Должно быть 5: " . $a-- . "&lt;br /&gt;\\n";\necho "Должно быть 4: " . $a . "&lt;br /&gt;\\n";\n\necho "&lt;h3&gt;Префиксный декремент&lt;/h3&gt;";\n$a = 5;\necho "Должно быть 4: " . --$a . "&lt;br /&gt;\\n";\necho "Должно быть 4: " . $a . "&lt;br /&gt;\\n";\n?&gt;</code></pre>\n\n<hr />\n<p><a href="https://www.php.net/manual/ru/language.operators.increment.php">Полная справка об операторах в PHP</a></p>\n', 17, '2020-04-29 22:43:35', '2020-04-29 22:43:35', 7835),
('ba3921dd89b611eab1430cc47aaabd6c', '9ed9ea43890311eab1430cc47aaabd6c', 'История', '<h1><strong>История PHP</strong></h1>\n\n<h2>PHP/FI</h2>\n\n<p>В&nbsp;<a href="https://ru.wikipedia.org/wiki/1995_%D0%B3%D0%BE%D0%B4" title="1995 год">1995 году</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B0%D0%BD%D0%B8%D1%8F" title="Дания">датский</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82" title="Программист">программист</a>&nbsp;(ныне живущий в&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D0%BD%D0%B0%D0%B4%D0%B0" title="Канада">Канаде</a>)&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B5%D1%80%D0%B4%D0%BE%D1%80%D1%84,_%D0%A0%D0%B0%D1%81%D0%BC%D1%83%D1%81" title="Лердорф, Расмус">Расмус Лердорф</a>&nbsp;(Rasmus Lerdorf) создал набор&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Скриптовый язык">скриптов</a>&nbsp;на&nbsp;<a href="https://ru.wikipedia.org/wiki/Perl" title="Perl">Perl/CGI</a>&nbsp;для вывода и учёта посетителе<img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Wikirl.jpg/188px-Wikirl.jpg" style="float:right; height:179px; width:188px" />й его&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD" title="Онлайн">онлайн</a>-<a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B7%D1%8E%D0%BC%D0%B5" title="Резюме">резюме</a>, обрабатывающий шаблоны&nbsp;<a href="https://ru.wikipedia.org/wiki/HTML" title="HTML">HTML</a>-документов. Лердорф назвал набор&nbsp;<em>Personal Home Page</em>&nbsp;(<em>Личная Домашняя Страница</em>). Вскоре функциональности и быстроты Perl &mdash; интерпретатора скриптов &mdash; перестало хватать, и Лердорф разработал с использованием языка&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">C</a>&nbsp;новый интерпретатор шаблонов PHP/FI (<a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Английский язык">англ.</a>&nbsp;Personal Home Page / Forms Interpreter&nbsp;&mdash; &laquo;Личная Домашняя Страница /&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80" title="Интерпретатор">Интерпретатор</a>&nbsp;форм&raquo;). PHP/FI включал базовую функциональность современного PHP: оформление переменных в стиле Perl (<tt>$<em>имя_переменной</em></tt>&nbsp;для вывода значения), автоматическую обработку форм и встраиваемость в HTML-текст и многое другое. Новорождённый язык отличался от своего прародителя более простым и ограниченным синтаксисом.</p>\n\n<p>В&nbsp;<a href="https://ru.wikipedia.org/wiki/1997_%D0%B3%D0%BE%D0%B4" title="1997 год">1997 году</a>&nbsp;после длительного&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%91%D0%B5%D1%82%D0%B0-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Бета-тестирование">бета-тестирования</a>&nbsp;вышла вторая версия обработчика, написанного на&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" title="Си (язык программирования)">C</a>&nbsp;&mdash; PHP/FI 2.0. Её использовали около 1&nbsp;% (приблизительно 50 тысяч) всех&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%BE%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D0%B7%D0%BE%D0%BD%D0%B0" title="Доменная зона">интернет-доменов</a>&nbsp;мира.</p>\n\n<h2>PHP 3</h2>\n\n<p>Версия PHP 3.0 подверглась значительной переработке, определившей современный облик и стиль языка программирования. В&nbsp;<a href="https://ru.wikipedia.org/wiki/1997_%D0%B3%D0%BE%D0%B4" title="1997 год">1997 году</a>&nbsp;два&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%B7%D1%80%D0%B0%D0%B8%D0%BB%D1%8C" title="Израиль">израильских</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82" title="Программист">программиста</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%93%D1%83%D1%82%D0%BC%D0%B0%D0%BD%D1%81,_%D0%AD%D0%BD%D0%B4%D0%B8" title="Гутманс, Энди">Энди Гутманс</a>&nbsp;(<em>Andi Gutmans</em>) и&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%83%D1%80%D0%B0%D1%81%D0%BA%D0%B8,_%D0%97%D0%B5%D0%B5%D0%B2" title="Сураски, Зеев">Зеев Сураски</a>&nbsp;(<em>Zeev Suraski</em>), разработчики из&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%B7%D1%80%D0%B0%D0%B8%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D1%82%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B8%D0%BD%D1%81%D1%82%D0%B8%D1%82%D1%83%D1%82" title="Израильский технологический институт">израильского технологического института</a>, расположенного в израильском городе&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A5%D0%B0%D0%B9%D1%84%D0%B0" title="Хайфа">Хайфе</a>, полностью переписали код интерпретатора. PHP/FI 2.0 был сочтён ими непригодным для разработки приложения электронной коммерции, над которым они в то время работали. Для совместной работы над PHP 3.0 с помощью базы разработчиков PHP/FI 2.0 Энди, Расмус и Зеев решили объединиться и объявить PHP 3.0 официальным преемнико<img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Andi_Gutmans_1.jpg/188px-Andi_Gutmans_1.jpg" style="float:right; height:254px; width:188px" />м PHP/FI, разработка же PHP/FI была практически полностью прекращена. После 9 месяцев публичного тестирования PHP 3.0 был официально выпущен в июне&nbsp;<a href="https://ru.wikipedia.org/wiki/1998_%D0%B3%D0%BE%D0%B4" title="1998 год">1998 года</a>.</p>\n\n<p>Одной из сильнейших сторон PHP 3.0 была возможность расширения ядра дополнительными модулями. Впоследствии интерфейс написания расширений привлёк к PHP множество сторонних разработчиков, работающих над своими модулями, что дало PHP возможность работать с огромным количеством&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" title="База данных">баз данных</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%BE%D0%B9_%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB" title="Сетевой протокол">протоколов</a>, поддерживать большое число&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9" title="Интерфейс программирования приложений">API</a>. Большое количество разработчиков привело к быстрому развитию языка и стремительному росту его популярности.</p>\n\n<p>Абсолютно новый язык программирования получил новое имя. Разработчики отказались от дополнения о персональном использовании, которое имелось в аббревиатуре PHP/FI и язык был переименован в&nbsp;<strong>PHP</strong>.</p>\n\n<p>К концу&nbsp;<a href="https://ru.wikipedia.org/wiki/1998_%D0%B3%D0%BE%D0%B4" title="1998 год">1998 года</a>&nbsp;PHP использовался десятками тысяч пользователей. Сотни тысяч&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%B0%D0%B9%D1%82" title="Веб-сайт">веб-сайтов</a>&nbsp;сообщали об использовании языка программирования PHP. В то время PHP 3.0 был установлен приблизительно на 10&nbsp;% веб-серверов Интернета.</p>\n\n<h2>PHP 4</h2>\n\n<p>К зиме&nbsp;<a href="https://ru.wikipedia.org/wiki/1998_%D0%B3%D0%BE%D0%B4" title="1998 год">1998 года</a>, практически сразу после официального выхода PHP 3.0, Энди Гутманс и Зив Сураски начали переработку ядра PHP. В задачи входило увеличение производительности сложных приложений и улучшение модульности базиса кода PHP. Расширения дали PHP 3.0 возможность успешно работать с набором баз данных и поддерживать большое количество различных&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9" title="Интерфейс программирования приложений">API</a>&nbsp;и протоколов, но PHP 3.0 не имел качественной поддержки модулей и приложения работали неэффективно.</p>\n\n<p>Новый движок, названный&nbsp;<a href="https://ru.wikipedia.org/wiki/Zend_Engine" title="Zend Engine">Zend Engine</a>&nbsp;(от имён создателей, Зива и Энди, также основателей&nbsp;<a href="https://ru.wikipedia.org/wiki/Zend_Technologies" title="Zend Technologies">Zend Technologies</a>), успешно справлялся с поставленными задачами и впервые был представлен в середине&nbsp;<a href="https://ru.wikipedia.org/wiki/1999_%D0%B3%D0%BE%D0%B4" title="1999 год">1999 года</a>. PHP 4.0, основанный на этом движке и принёсший с собой набор дополнительных функций, официально вышел в мае&nbsp;<a href="https://ru.wikipedia.org/wiki/2000_%D0%B3%D0%BE%D0%B4" title="2000 год">2000 года</a>, почти через два года после выхода своего предшественника PHP 3.0. В дополнение к улучшению производительности, PHP 4.0 имел ещё несколько ключевых нововведений, таких как поддержка сессий,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%91%D1%83%D1%84%D0%B5%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" title="Буферизация (информатика)">буферизация</a>&nbsp;вывода, более безопасные способы обработки вводимой пользователем информации и несколько новых языковых конструкций.</p>\n\n<p>Прекращение выпуска обновлений PHP 4 было запланировано на конец&nbsp;<a href="https://ru.wikipedia.org/wiki/2007_%D0%B3%D0%BE%D0%B4" title="2007 год">2007 года</a>. Однако вплоть до&nbsp;<a href="https://ru.wikipedia.org/wiki/8_%D0%B0%D0%B2%D0%B3%D1%83%D1%81%D1%82%D0%B0" title="8 августа">8 августа</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/2008_%D0%B3%D0%BE%D0%B4" title="2008 год">2008 года</a>&nbsp;выпускались критические обновления безопасности. С&nbsp;<a href="https://ru.wikipedia.org/wiki/9_%D0%B0%D0%B2%D0%B3%D1%83%D1%81%D1%82%D0%B0" title="9 августа">9 августа</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/2008_%D0%B3%D0%BE%D0%B4" title="2008 год">2008 года</a>&nbsp;всякая поддержка версии PHP 4.x была прекращена.</p>\n\n<h2>PHP 5</h2>\n\n<p>Пятая версия PHP была выпущена разработчиками&nbsp;<a href="https://ru.wikipedia.org/wiki/13_%D0%B8%D1%8E%D0%BB%D1%8F" title="13 июля">13 июля</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/2004_%D0%B3%D0%BE%D0%B4" title="2004 год">2004 года</a>. Изменения включают обновление ядра Zend (Zend Engine 2), что существенно увеличило эффективность&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%86%D0%B8%D1%8F" title="Интерпретация">интерпретатора</a>. Введена поддержка языка разметки&nbsp;<a href="https://ru.wikipedia.org/wiki/XML" title="XML">XML</a>. Полностью переработаны функции&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Объектно-ориентированное программирование">ООП</a>, которые стали во многом схожи с моделью, используемой в&nbsp;<a href="https://ru.wikipedia.org/wiki/Java" title="Java">Java</a>. В частности, введён&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D0%BE%D1%80" title="Деструктор">деструктор</a>,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%BA%D0%B0%D0%BF%D1%81%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Инкапсуляция (программирование)">открытые, закрытые и защищённые члены и методы</a>, окончательные члены и методы,&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Интерфейс (объектно-ориентированное программирование)">интерфейсы</a>&nbsp;и клонирование объектов. Нововведения, однако, были сделаны с расчётом сохранить наибольшую совместимость с кодом на предыдущих версиях языка. На данный момент последней стабильной веткой является PHP 5.6, которая содержит ряд изменений и дополнений:</p>\n\n<ul>\n	<li>Увеличена скорость работы, примерно на 10-20%</li>\n	<li>Введено&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE_%D0%B8%D0%BC%D1%91%D0%BD_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Пространство имён (программирование)">пространство имён</a></li>\n	<li>Позднее статическое связывание и специальный метод&nbsp;<tt>__callStatic()</tt></li>\n	<li>Лямбда-функции и&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Замыкание (программирование)">замыкания</a></li>\n	<li>Добавление расширений: intl, phar, fileinfo и sqlite3</li>\n	<li>Опциональный&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" title="Сборка мусора (программирование)">сборщик мусора</a></li>\n	<li>Был написан драйвер MySQLnd для самой популярной у PHP разработчиков базы данных&nbsp;<a href="https://ru.wikipedia.org/wiki/MySQL" title="MySQL">MySQL</a>. С появлением нативного драйвера скорость работы с Mysql значительно увеличилась, также новый драйвер доступен уже в стандартной сборке(ранее это было невозможно из-за лицензии, связанной с libmysql)</li>\n	<li>Отмена поддержки версий операционной системы до&nbsp;<a href="https://ru.wikipedia.org/wiki/Windows_2000" title="Windows 2000">Windows 2000</a>&nbsp;(<a href="https://ru.wikipedia.org/wiki/Windows_98" title="Windows 98">Windows 98</a>, NT4, и.т.д.)</li>\n	<li>Новые синтаксические конструкции, такие как NOWDOC, ограниченный GOTO, короткий вид&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%BD%D0%B0%D1%80%D0%BD%D0%B0%D1%8F_%D1%83%D1%81%D0%BB%D0%BE%D0%B2%D0%BD%D0%B0%D1%8F_%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F" title="Тернарная условная операция">тернарного оператора</a>&nbsp;&laquo;?:&raquo;</li>\n</ul>\n\n<p>и другое.</p>\n\n<h2>PHP 6</h2>\n\n<p>Шестая версия PHP находилась в стадии&nbsp;разработки с&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%BA%D1%82%D1%8F%D0%B1%D1%80%D1%8C_2006_%D0%B3%D0%BE%D0%B4%D0%B0" title="Октябрь 2006 года">октября 2006</a>&nbsp;года. В ней уже было сделано&nbsp;множество нововведений, как, например, исключение из ядра регулярных выражений&nbsp;<a href="https://ru.wikipedia.org/wiki/POSIX" title="POSIX">POSIX</a>&nbsp;и &laquo;длинных&raquo; суперглобальных массивов, удаление директив&nbsp;<em>safe_mode</em>,&nbsp;<em>magic_quotes_gpc</em>&nbsp;и&nbsp;<em>register_globals</em>&nbsp;из конфигурационного файла php.ini. Основные усилия были сосредоточены на поддержке&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4" title="Юникод">Юникода</a>. Однако в&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D1%82_2010_%D0%B3%D0%BE%D0%B4%D0%B0" title="Март 2010 года">марте 2010</a>&nbsp;года разработка PHP6 была признана бесперспективной<span style="font-size:10.8333px"> </span>из-за сложностей с поддержкой&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4" title="Юникод">Юникода</a>. Исходный код PHP6 перемещён на&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D1%82%D0%B2%D1%8C_(%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8)" title="Ветвь (управление версиями)">ветвь</a>, а основной линией разработки стала версия 5.4.</p>\n\n<p>&nbsp;</p>\n\n<h2>PHP 7</h2>\n\n<p>В 2014 году было проведено голосование, по результатам которого следующая версия получила название PHP 7. Выход новой версии планировался в середине октября 2015 года. В марте 2015 года&nbsp;<a href="https://ru.wikipedia.org/wiki/Zend_Technologies" title="Zend Technologies">Zend</a>&nbsp;представили&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%84%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA%D0%B0" title="Инфографика">инфографику</a>, в которой описаны основные нововведения PHP 7.</p>\n\n<p><a href="https://ru.wikipedia.org/wiki/3_%D0%B4%D0%B5%D0%BA%D0%B0%D0%B1%D1%80%D1%8F" title="3 декабря">3 декабря</a>&nbsp;<a href="https://ru.wikipedia.org/wiki/2015" title="2015">2015</a>&nbsp;года было объявлено о выходе PHP версии 7.0.0.</p>\n\n<p>Новая версия основывается на экспериментальной&nbsp;<a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D1%82%D0%B2%D1%8C_(%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8)" title="Ветвь (управление версиями)">ветви</a>&nbsp;PHP, которая изначально называлась&nbsp;<em>phpng</em>&nbsp;(<em>PHP Next Generation &mdash; следующее поколение</em>), и разрабатывалась с упором на увеличение производительности и уменьшение потребления памяти. В новой версии добавлена возможность указывать тип возвращаемых из функции данных, добавлен контроль передаваемых типов для данных, а также новые операторы.</p>\n', 2, '2020-04-29 04:14:08', '2020-04-29 07:23:00', 23535),
('c8d9990c8afc11eab1430cc47aaabd6c', '4d65624589b811eab1430cc47aaabd6c', 'Часть 2', '<h2><strong>IntlChar</strong></h2>\n\n<p>Новый класс&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">IntlChar</code>&nbsp;добавляет новую функциональность в ICU. Класс определяет несколько статических методов и констант для манипулирования символами Unicode.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\nprintf(''%x'', IntlChar::CODEPOINT_MAX);\necho IntlChar::charName(''@'');\nvar_dump(IntlChar::ispunct(''!''));&lt;?php\n\nprintf(''%x'', IntlChar::CODEPOINT_MAX);\necho IntlChar::charName(''@'');\nvar_dump(IntlChar::ispunct(''!''));</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">10ffff<br />\nCOMMERCIAL AT<br />\nbool(true)</div>\n\n<p>Для использования это класса необходимо установить расширение&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">Intl</code>.</p>\n\n<h2><strong>Ожидания</strong></h2>\n\n<p><strong>Ожидания</strong>&nbsp;являются улучшенной, обратно совместимой версией старой функции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">assert()</code>. Они позволяют делать предположения с нулевой стоимостью в промышленном коде и предоставляют возможность выбрасывать пользовательские исключения в случае провала ожидания.</p>\n\n<p>Вместе тем, что старое API поддерживается,&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">assert()</code>&nbsp;теперь является языковой конструкцией, принимающей первым аргументом выражения, а не только строки для оценки или логические значения для проверки.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nini_set(''assert.exception'', 1);\n\nclass CustomError extends AssertionError {}\n\nassert(false, new CustomError(''Сообщение об ошибке''));\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<pre style="background: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); padding: 5px 10px;">\nFatal error: Uncaught CustomError: Сообщение об ошибке\n</pre>\n\n<h2><strong>Групповые объявления&nbsp;<em>use</em></strong></h2>\n\n<p>Классы, функции и константы импортируемые из одного и того же&nbsp;<em>namespace</em>, теперь можно группировать в одном операторе&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>use</em></code>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n// До PHP 7\nuse some\\namespace\\ClassA;\nuse some\\namespace\\ClassB;\nuse some\\namespace\\ClassC as C;\n\nuse function some\\namespace\\fn_a;\nuse function some\\namespace\\fn_b;\nuse function some\\namespace\\fn_c;\n\nuse const some\\namespace\\ConstA;\nuse const some\\namespace\\ConstB;\nuse const some\\namespace\\ConstC;\n\n// PHP 7+\nuse some\\namespace\\{ClassA, ClassB, ClassC as C};\nuse function some\\namespace\\{fn_a, fn_b, fn_c};\nuse const some\\namespace\\{ConstA, ConstB, ConstC};\n?&gt;</code></pre>\n\n<h2><strong>Выражение return в генераторах</strong></h2>\n\n<p>Эта функциональность добавлена к генераторам, введенным в PHP 5.5. Она позволяет использовать оператор&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>return</em></code>&nbsp;в генераторах в качестве окончательного возвращаемого значения (возврат по ссылке недопустим). Это значение можно извлечь с помощью нового метода&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>Generator::getReturn()</em></code>, который можно использовать только после того, как генератор вернул все сгенерированные значение.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\n$gen = (function() {\n    yield 1;\n    yield 2;\n\n    return 3;\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen-&gt;getReturn(), PHP_EOL; ?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">1<br />\n2<br />\n3</div>\n\n<p>Возможность явно получать окончательное значение генератора является очень полезной, так как позволяет клиентскому коду, использующему генератор, получать и обработать самое последнее значение генератора, после которого точно ничего больше не будет. Это сильно проще, чем вынуждать разработчика проверять, последнее ли значение вернулось и как-то по особенному его обрабатывать.</p>\n\n<h2><strong>Делегация генератора</strong></h2>\n\n<p>Теперь генератор может автоматически делегировать другому генератору, объекту класса, реализующий&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">Traversable</code>&nbsp;или массиву без необходимости писать в нем дополнительную обработку полученных значений. Достигается это с помощью конструкции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>yield from</em></code>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfunction gen()\n{\n    yield 1;\n    yield 2;\n    yield from gen2();\n}\n\nfunction gen2()\n{\n    yield 3;\n    yield 4;\n}\n\nforeach (gen() as $val)\n{\n    echo $val, PHP_EOL;\n}\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">1<br />\n2<br />\n3<br />\n4</div>\n\n<h2><strong>Функция целочисленного деления&nbsp;intdiv()</strong></h2>\n\n<p>Новая функция&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">intdiv()</code>&nbsp;производит целочисленное деление операндов и возвращает его результат.</p>\n\n<pre>\n<code class="language-php">&lt;?php\nvar_dump(intdiv(10, 3));\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">int(3)</div>\n\n<h2><strong>Опции сессий</strong></h2>\n\n<p>Теперь&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">session_start()</code>&nbsp;принимает массив опций, которые переопределят&nbsp;<em>конфигурационные директивы сессии</em>&nbsp;установленные в php.ini.</p>\n\n<p>Также опции были расширены включенной по умолчанию опцией&nbsp;session.lazy_write, которая говорит PHP о том, что файл сессии надо перезаписывать, только если изменились данные сессии, и опцией&nbsp;<em>read_and_close</em>, которую можно задать только через&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">session_start()</code>&nbsp;для того, чтобы PHP закрывал сессию сразу же как прочитает ее данные и не вносил в нее каких-либо изменений.</p>\n\n<p>К примеру, для установки&nbsp;session.cache_limiter&nbsp;равным&nbsp;<em>private</em>&nbsp;и немедленному закрытию сессии после чтения ее данных:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nsession_start([\n    ''cache_limiter'' =&gt; ''private'',\n    ''read_and_close'' =&gt; true,\n]);\n?&gt;</code></pre>\n\n<h2><strong>preg_replace_callback_array()</strong></h2>\n\n<p>Новая функция&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">preg_replace_callback_array()</code>&nbsp;позволяет писать более чистый код, когда требуется использовать функцию&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">preg_replace_callback()</code>. До PHP 7 при необходимости обработать разные регулярные выражения разными функциями приходилось для каждой такой обработки писать отдельный вызов функции.</p>\n\n<p>Теперь можно использовать одну функцию, передавая в нее ассоциативный массив, ключами которого являются регулярные выражения, а значениями - функции обратного вызова.</p>\n\n<h2><strong>Функции&nbsp;CSPRNG</strong></h2>\n\n<p>Были добавлены две новые кроссплатформенные функции для генерации криптографически безопасных строк и целых чисел:&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">random_bytes()</code>&nbsp;и&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">random_int()</code>.</p>\n\n<h2>Теперь функция&nbsp;<strong>list()</strong>&nbsp;всегда может распаковывать объекты, реализующие&nbsp;ArrayAccess</h2>\n\n<p>Ранее функция&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">list()</code>&nbsp;не гарантировала корректную обработку объектов, реализующих&nbsp;ArrayAccess. Теперь это исправлено.</p>\n\n<h2>Прочие изменения</h2>\n\n<ul>\n	<li>Добавлена возможность доступа к методам и свойствам класса при клонировании, то есть&nbsp;<em>(clone $foo)-&gt;bar()</em>.</li>\n</ul>\n', 59, '2020-04-30 19:08:09', '2020-04-30 19:08:09', 11743);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('ce60546e8a6f11eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Другие операции', '<h1>Преобразование строк в массивы</h1>\n\n<p>PHP умеет преобразовывать данные из строки в массив и наоборот, для этого в PHP есть функция&nbsp;<strong><code>implode</code></strong>&nbsp;и&nbsp;<strong><code>explode</code></strong>.</p>\n\n<p><strong><code>implode</code></strong>&nbsp;- формирует строку из массива.</p>\n\n<p><strong><code>explode</code></strong>&nbsp;- формирует массив из строки.</p>\n\n<p>Использование функции&nbsp;<strong><code>implode</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[0] = "PHP"; \n$arr[1] = "HTML"; \n$arr[2] = "CSS";\n\n$string = implode(", ", $arr);\necho $string; \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">PHP, HTML, CSS</code></pre>\n\n<p>Использование функции&nbsp;<strong><code>explode</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$string = "PHP, HTML, CSS";\n$arr = explode(", ", $string);\nprint_r($arr); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; PHP [1] =&gt; HTML [2] =&gt; CSS )</code></pre>\n\n<p>&nbsp;&nbsp;</p>\n\n<h1><strong>Слияние и разделение массивов</strong></h1>\n\n<p>Если вам нужно добавить в массив несколько элементов другого массива, то вам поможет функция&nbsp;<strong><code>array_slice</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr["one"] = "PHP"; \n$arr["two"] = "HTML"; \n$arr["three"] = "CSS";\n\n$new_arr = array_slice($arr, 0, 2); \nprint_r($new_arr);\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [one] =&gt; PHP [two] =&gt; HTML )</code></pre>\n\n<p>Первый параметр функции&nbsp;<strong><code>array_slice</code></strong>&nbsp;- это название того массива, с которого будут браться элементы; второй - начальный номер элемента (с какого элемента начинать брать элементы); третий - количество элементов выборки.</p>\n\n<p>Для соединения массивов в один нужно использовать функцию&nbsp;<strong><code>array_merge</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[1] = "PHP"; \n$arr[2] = "HTML"; \n$arr[3] = "CSS";\n\n$arr2[1] = "PHOTOSHOP"; \n$arr2[2] = "PAINT.NET"; \n$arr2[3] = "DREAMWEAVER";\n\n$new_arr = array_merge($arr, $arr2); \nprint_r($new_arr); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; PHP [1] =&gt; HTML [2] =&gt; CSS [3] =&gt; PHOTOSHOP [4] =&gt; PAINT.NET [5] =&gt; DREAMWEAVER )</code></pre>\n\n<p>&nbsp;</p>\n\n<h1><strong>Сравнение массивов</strong></h1>\n\n<p>Если нужно проверить какой элемент совпадает в том, или ином массиве, или наоборот НЕ совпадает, то можно использовать функцию&nbsp;<strong><code>array_diff</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[1] = "PHP"; \n$arr[2] = "HTML"; \n$arr[3] = "CSS";\n\n$arr2[1] = "PHP"; \n$arr2[2] = "PAINT.NET"; \n$arr2[3] = "DREAMWEAVER";\n\n$diff = array_diff($arr, $arr2); \nprint_r($diff);\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [2] =&gt; HTML [3] =&gt; CSS )</code></pre>\n\n<p>Если нужно, чтобы сравнивался еще и строковый индекс массивов, то тут уже нужно использовать функцию&nbsp;<strong><code>array_diff_assoc</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr["one"] = "PHP"; \n$arr["two"] = "HTML"; \n$arr["three"] = "CSS";\n\n$arr2[1] = "PHP"; \n$arr2["two"] = "HTML"; \n$arr2[3] = "DREAMWEAVER";\n\n$diff = array_diff_assoc($arr, $arr2); \nprint_r($diff); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [one] =&gt; PHP [three] =&gt; CSS )</code></pre>\n\n<p>Если вам нужно найти общие элементы массивов, то вам поможет функция&nbsp;<strong><code>array_intersect</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[1] = "PHP"; \n$arr[2] = "HTML"; \n$arr[3] = "CSS";\n\n$arr2[1] = "PHP"; \n$arr2[2] = "PAINT.NET"; \n$arr2[3] = "DREAMWEAVER";\n\n$diff = array_intersect($arr, $arr2); \nprint_r($diff); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [1] =&gt; PHP )</code></pre>\n\n<p>Если при нахождении общих элементов массивов нужно учесть и индекс, то, по аналогии&nbsp;<strong><code>array_diff_assoc</code></strong>, используйте функцию&nbsp;<strong><code>array_intersect_assoc</code></strong>.</p>\n\n<h1><strong>Обработка данных в массивах PHP</strong></h1>\n\n<p>PHP имеет множество функций для обработки данных в массивах. Например, если нужно вычислить сумму всех элементов массив, то можно воспользоваться функцией&nbsp;<strong><code>array_sum</code></strong>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr[1] = 31; \n$arr[2] = 1; \n$arr[3] = 94;\n\n$sum = array_sum($arr); \n\necho $sum; \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">126</code></pre>\n\n<p>Если, требуется избавиться от элементов с повторяющимся значением, то стоит использовать функцию&nbsp;<code>array_unique</code>:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array(30, 44, 97, 30);\nprint_r($arr); \n\n$new_arr = array_unique($arr);\nprint_r($new_arr); \n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Array ( [0] =&gt; 30 [1] =&gt; 44 [2] =&gt; 97 [3] =&gt; 30 ) \nArray ( [0] =&gt; 30 [1] =&gt; 44 [2] =&gt; 97 )</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;&nbsp;Более подробную информацию вы можете найти на&nbsp;<a href="http://php.net/manual/ru/ref.array.php" rel="nofollow" target="_blank">странице официальной документации</a>.</p>\n', 35, '2020-04-30 02:18:59', '2020-04-30 02:26:42', 6812),
('cedabedd8a8e11eab1430cc47aaabd6c', '4d655ed489b811eab1430cc47aaabd6c', 'Наследование', '<h1><strong>Наследование</strong></h1>\n\n<p><strong>Наследование</strong> &mdash; это хорошо зарекомендовавший себя принцип программирования, и PHP использует этот принцип в своей объектной модели. Этот принцип повлияет на то, как многие классы и объекты связаны друг с другом.</p>\n\n<p>Например, при расширении класса дочерний класс наследует все общедоступные и защищенные методы из родительского класса. До тех пор пока эти методы не будут переопределены, они будут сохранять свою исходную функциональность.</p>\n\n<p>Это полезно для определения и абстрагирования функциональности и позволяет реализовать дополнительную функциональность в похожих объектах без необходимости реализовывать всю общую функциональность.</p>\n\n<blockquote>\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><strong>Замечание</strong>: Если не используется автозагрузка, классы должны быть объявлены до того, как они будут использоваться. Если класс расширяет другой, то родительский класс должен быть объявлен до наследующего класса. Это правило применяется к классам, которые наследуют другие классы или интерфейсы.</div>\n</blockquote>\n\n<p><strong>Пример наследования</strong></p>\n\n<pre>\n<code class="language-php">&lt;?php\n\nclass Foo\n{\n    public function printItem($string)\n    {\n        echo ''Foo: '' . $string . PHP_EOL;\n    }\n    \n    public function printPHP()\n    {\n        echo ''PHP просто супер.'' . PHP_EOL;\n    }\n}\n\nclass Bar extends Foo\n{\n    public function printItem($string)\n    {\n        echo ''Bar: '' . $string . PHP_EOL;\n    }\n}\n\n$foo = new Foo();\n$bar = new Bar();\n$foo-&gt;printItem(''baz''); // Выведет: ''Foo: baz''\n$foo-&gt;printPHP();       // Выведет: ''PHP просто супер'' \n$bar-&gt;printItem(''baz''); // Выведет: ''Bar: baz''\n$bar-&gt;printPHP();       // Выведет: ''PHP просто супер''\n\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 55, '2020-04-30 06:00:54', '2020-04-30 06:00:54', 2838),
('d6d97ba989b611eab1430cc47aaabd6c', '046b312f89b711eab1430cc47aaabd6c', 'Подключение модуля PHP', '<h1><strong>Подключение модуля PHP</strong></h1>\n\n<p>Прежде чем переходить непосредственно к установке PHP, необходимо иметь в наличии его дистрибутив. Получить его можно стандартным путем, обратившись на официальный сайт PHP <a href="http://www.php.net">http://www.php.net</a> .<br />\nПакет установки PHP, как правило, создан в формате zip-файла для ОС Windows. Иногда вместе с дистрибутивом предлагается программа автоматизации установки PHP. Честно говоря, не совсем понятно зачем нужны эти &quot;инсталлеры&quot;. Существенно проще установить PHP просто распаковав zip-архив дистрибутива в выбранный нами каталог (кстати, рабочий каталог PHP может быть размещен в любом месте файловой системы).<br />\nИтак, будем считать что дистрибутив PHP мы достали и определились с диском и каталогом куда будем производить распаковку программного обеспечения. Мы будем устанавливать PHP в, выделенный для этих целей, каталог C:/WEB, собственно говоря, куда и устанавливаем все web-приложения, необходимые нам для работы. Весь процесс установки (но не настройки) - это распаковка zip-файла дистрибутива PHP в заданный каталог.</p>\n\n<p><img alt="" src="uploads/63a9f0ea7bb98050796b649e85481845/phpdir.png" style="height:169px; width:350px" /><br />\nЗдесь, кроме установленного ранее web-сервера Apache (каталог Apache24) и перенастроенного корневого каталога html-документов (каталог documents - бывший Apache24/htdocs), мы имеем, установленный сейчас, пакет PHP - каталог PHP-7.4.2.В общем случае, наименование каталога PHP не имеет значения. Оно может быть любым. Но, если вы планируете экпериментировать с различными версиями PHP, то лучше иметь в названии каталога номер версии дистрибутива для простоты переключения между различными версиями PHP.</p>\n\n<p><br />\nИтак, PHP мы установили. Теперь подключим его в качестве загружаемого модуля к web-серверу Apache. Для этого надо сделать кое-какие правки в конфигурационном файле Apache httpd.conf, а именно, добавить (можно в конец файла) один из приведенных ниже наборов строк (директив):</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>LoadModule php7_module &quot;c:/web/php7.4.2/php7apache2_4.dll&quot;<br />\nAddType application/x-httpd-php .php</strong></div>\n\n<p>Также, возможно, потребуется добавить данный MIME-тип в хранилище типов&nbsp;Apache24/conf/mime.types. Для этого нужно добавить в данное хранилище следующую строчку:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>application/x-httpd-php</strong></div>\n\n<p>После этого нужно перезагрузить web-сервер Apache. Ну вот, собственно говоря, и все. Теперь остается протестировать подключение php-модуля к Apache. Для этого, в корневом каталоге html-документов (у нас это каталог C:/WEB/DOCUMENTS) или одном из его подкаталогов создадим файл <strong>testphp.php</strong> следующего содержания:</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>&lt;?php<br />\n&nbsp; &nbsp; phpinfo();<br />\n?&gt;</strong></div>\n\n<p>Теперь, запустите web-браузер и наберите адрес этого файла (например, http://localhost/testphp.php). И если вы увидите на экране что-то подобное этому , то это говорит о том, что модуль php работает корректно и можно переходить к изучению основ языка программирования в Internet - PHP.<br />\nВ данном разделе мы рассматривали установку PHP 7 (точнее релиза 7.4.2) и подключение его к Apache в виде модуля (у нас это php7apache2_4.dll). Практически в каждом развернутом дистрибутиве PHP присутствует файл <strong>install.txt</strong>,в котором содержится достаточно много полезной информации об использовании PHP в различных web-серверах. Поэтому, если вам не хватает какой-либо информации или вы что-то не поняли, можно обратиться к файлу <strong>install.txt</strong>.<br />\nИ еще, что хотелось бы отметить в заключении данного раздела. Не смотря на то, что мы рассматривали применение PHP в качестве модуля web-сервера Apache (и это будет основным применением в нашем курсе), возможности дистрибутива PHP только этим не ограничиваются. Можно воспользоваться следующими интересными приложениями:</p>\n\n<ul>\n	<li><em><strong>php.exe</strong> </em>- интерпретатор языка PHP. Запускается из командной строки непосредственно в операционной среде (без всяких web-серверов) и обрабатывает (исполняет) тексты программ (скрипты), написанные на языке PHP.</li>\n	<li><strong><em>php-win.exe</em></strong> - аналогичен php.exe, но может работать в фоновом режиме ОС Windows.</li>\n	<li><strong><em>php-cgi.exe</em></strong> - интерпретатор языка PHP. Используется при разработке web-приложений работающих по технологии CGI (Common Gate Interface).</li>\n</ul>\n', 5, '2020-04-29 04:14:56', '2020-04-29 11:35:43', 7363),
('dbf4d76389ee11eab1430cc47aaabd6c', 'cc51cd6889b711eab1430cc47aaabd6c', 'Интерполяция переменных', '<h1><strong>Интерполяция переменных в PHP</strong></h1>\n\n<p>Значение переменной может быть отображено например так:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$fruit = "яблоко"; \n\necho "Я купил сегодня ", $fruit,"&lt;br /&gt;";\n?&gt;</code></pre>\n\n<p>Но есть способ сделать это проще. Если имя переменной заключено в двойные (не одинарные) кавычки, то переменная интерполируется. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$fruit = "яблоко"; \n\necho "Я купил сегодня $fruit &lt;br /&gt;";\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code>Я купил сегодня яблоко</code></pre>\n\n<p>Также существует одна тонкость при использовании интерполяции переменных. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$text = "news"; \necho "Where''s the $textpaper &lt;br /&gt;"; \n?&gt;</code></pre>\n\n<p>Ожидается, что имя переменной&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$text</code>&nbsp;будет заменено на ее значение. Но в результате будет выведено сообщение об ошибке. Чтобы этого не случалось нужно указать,&nbsp;какую часть слова&nbsp;<em>textpaper</em>&nbsp;мы имеем введу за имя переменной. Для этого нужно взять ту часть которая нам нужна в фигурные скобки:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$text = "news"; \necho "Where''s the {$text}paper &lt;br /&gt;";\n?&gt;</code></pre>\n\n<h2><strong>Переменные, содержащие имена других переменных</strong></h2>\n\n<p>В PHP возможно размещать в значение переменных не только обычные значения, но и имена других переменных.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$apples = 5;    // Создаем переменную $apples \n$fruit = "apples";    /* Создаем переменную $fruit, которая содержит имя переменной $apples */ \n\n// Сейчас мы можем вывести $apples, как $$fruit\n\necho "Число яблок - ", $$fruit;\n?&gt;</code></pre>\n\n<p>Для корректного отображения подобных переменных в строковых константах, заключенных в двойные кавычки, следует также использовать фигурные скобки:&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">${$fruit}</code>. Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho "Число яблок - ${$fruit}";\n?&gt;</code></pre>\n\n<pre>\n<code class="language-php">Число яблок - 5</code></pre>\n', 10, '2020-04-29 10:55:57', '2020-04-29 10:55:57', 3235),
('e714e5448a8611eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Анонимные функции', '<h1><strong>Анонимные функции</strong></h1>\n\n<p>Анонимные функции, также известные как замыкания (<em>closures</em>), позволяют создавать функции, не имеющие определенных имен. Они наиболее полезны в качестве значений&nbsp;callback-параметров, но также могут иметь и множество других применений.</p>\n\n<p>Анонимные функции реализуются с использованием класса&nbsp;<a href="https://www.php.net/manual/ru/class.closure.php">Closure</a>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho preg_replace_callback(''~-([a-z])~'', function ($match) {\n    return strtoupper($match[1]);\n}, ''hello-world'');\n// выведет helloWorld\n?&gt;</code></pre>\n\n<p>Замыкания также могут быть использованы в качестве значений переменных; PHP автоматически преобразует такие выражения в экземпляры внутреннего класса&nbsp;<a href="https://www.php.net/manual/ru/class.closure.php">Closure</a>. Присвоение замыкания переменной использует тот же синтаксис, что и для любого другого присвоения, включая завершающую точку с запятой:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$greet = function($name)\n{\n    printf("Привет, %s\\r\\n", $name);\n};\n\n$greet(''Мир'');\n$greet(''PHP'');\n?&gt;</code></pre>\n\n<p>Замыкания могут также наследовать переменные из родительской области видимости. Любая подобная переменная должна быть объявлена в конструкции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">use</code>. Начиная с PHP 7.1, эти переменные не должны включать&nbsp;superglobals,&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><var><var>$this</var></var></code>&nbsp;и переменные с теми же именами, что и параметры функции.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$message = ''привет'';\n\n// Без "use"\n$example = function () {\n    var_dump($message);\n};\n$example();\n\n// Наследуем $message\n$example = function () use ($message) {\n    var_dump($message);\n};\n$example();\n\n// Значение унаследованной переменной задано там, где функция определена, \n// но не там, где вызвана\n$message = ''мир'';\n$example();\n\n// Сбросим message\n$message = ''привет'';\n\n// Наследование по ссылке\n$example = function () use (&amp;$message) {\n    var_dump($message);\n};\n$example();\n\n// Измененное в родительской области видимости значение\n// остается тем же внутри вызова функции\n$message = ''мир'';\necho $example();\n\n// Замыкания могут принимать обычные аргументы\n$example = function ($arg) use ($message) {\n    var_dump($arg . '', '' . $message);\n};\n$example("привет");\n?&gt;</code></pre>\n\n<p>Результатом выполнения данного примера будет что-то подобное:</p>\n\n<pre>\n<code class="language-php">Notice: Undefined variable: message in /example.php on line 6\nNULL\nstring(5) "привет"\nstring(5) "привет"\nstring(5) "привет"\nstring(5) "мир"\nstring(11) "привет мир"</code></pre>\n\n<h2><strong>Статические анонимные функции</strong></h2>\n\n<p>Начиная с PHP 5.4, анонимные функции могут быть объявлены статически. Это предотвратит их автоматическое связывание с текущим классом. Объекты также не будут с ними связаны во время выполнения.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n\nclass Foo\n{\n    function __construct()\n    {\n        $func = static function() {\n            var_dump($this);\n        };\n        $func();\n    }\n};\nnew Foo();\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<pre>\n<code class="language-php">Notice: Undefined variable: this in %s on line %d\nNULL</code></pre>\n\n<p>&nbsp;</p>\n', 42, '2020-04-30 05:04:19', '2020-04-30 05:04:19', 4894),
('ef59d8488a4711eab1430cc47aaabd6c', 'cc51cd6889b711eab1430cc47aaabd6c', 'Константы', '<h1><strong>Константы</strong></h1>\n\n<p>Когда не нужно менять заданное значение для переменной, то имеет смысл создать константу и потом использовать ее в любой части скрипта. Для описания константы используют функцию&nbsp;<code>define</code>, которой передается ее имя и значение, например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\ndefine("pi", 3.14);\n?&gt;</code></pre>\n\n<p>Имя константы нужно всегда заключать в кавычки, а ее значение только тогда когда оно является строкой.</p>\n\n<p>Пример использования константы:</p>\n\n<pre>\n<code class="language-php">&lt;?php\ndefine("pi", 3.14); \n\necho "Математическая константа Пи равняется ", pi;\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">Математическая константа Пи равняется 3.14</code></pre>\n\n<p>Попытка изменения константы приведет к неработоспособности скрипта !<br />\nВ качестве имени константы нельзя использовать зарезервированные слова в PHP, которые описанные ниже:</p>\n\n<table border="2" cellpadding="2">\n	<tbody>\n		<tr>\n			<th>__CLASS__</th>\n			<th>__FILE__</th>\n			<th>__FUNCTION__</th>\n			<th>__LINE__</th>\n			<th>__METHOD__</th>\n		</tr>\n		<tr>\n			<td>and</td>\n			<td>default</td>\n			<td>endif</td>\n			<td>global</td>\n			<td>print</td>\n		</tr>\n		<tr>\n			<td>array</td>\n			<td>die</td>\n			<td>endswitch</td>\n			<td>if</td>\n			<td>require</td>\n		</tr>\n		<tr>\n			<td>as</td>\n			<td>do</td>\n			<td>endwhile</td>\n			<td>include</td>\n			<td>require_once</td>\n		</tr>\n		<tr>\n			<td>break</td>\n			<td>echo</td>\n			<td>eval</td>\n			<td>include_once</td>\n			<td>return</td>\n		</tr>\n		<tr>\n			<td>case</td>\n			<td>else</td>\n			<td>exception</td>\n			<td>isset</td>\n			<td>static</td>\n		</tr>\n		<tr>\n			<td>cfunction</td>\n			<td>elseif</td>\n			<td>exit</td>\n			<td>list</td>\n			<td>switch</td>\n		</tr>\n		<tr>\n			<td>class</td>\n			<td>empty</td>\n			<td>extends</td>\n			<td>new</td>\n			<td>unset</td>\n		</tr>\n		<tr>\n			<td>const</td>\n			<td>enddeclare</td>\n			<td>for</td>\n			<td>old_function</td>\n			<td>use</td>\n		</tr>\n		<tr>\n			<td>continue</td>\n			<td>endfor</td>\n			<td>foreach</td>\n			<td>or</td>\n			<td>while</td>\n		</tr>\n		<tr>\n			<td>declare</td>\n			<td>endforeach</td>\n			<td>function</td>\n			<td>php_user_filter</td>\n			<td>xor</td>\n		</tr>\n	</tbody>\n</table>\n\n<p><strong>__LINE__</strong></p>\n\n<p>Номер текущей строки скрипта</p>\n\n<p><strong>__FILE__</strong></p>\n\n<p>Полное имя файла текущего скрипта</p>\n\n<p><strong>__FUNCTION_</strong>_</p>\n\n<p>Имя текущей исполняемой функции</p>\n\n<p><strong>__CLASS__</strong></p>\n\n<p>Имя текущего класса</p>\n\n<p><strong>__METHOD__</strong></p>\n\n<p>Имя текущего метода класса</p>\n\n<p><strong>PHP_VERSION</strong></p>\n\n<p>Версия PHP</p>\n\n<p><strong>PHP_OS</strong></p>\n\n<p>Операционная система под управлением которой работает PHP</p>\n\n<p><strong>DEFAULT_INCLUDE_PATH</strong></p>\n\n<p>Список путей, в которых PHP ищет подключаемые файлы</p>\n\n<h2><strong>Предварительно определенные переменные</strong></h2>\n\n<p>Предварительно определенные переменные в PHP относятся к элементам языка, которые остаются неизменными при выполнении всех приложений в конкретной среде. Они во многом схожи с переменными среды, которые встречаются в операционных системах UNIX и Windows. Следует сразу отметить, что таких переменных весьма немало и их индентификаторы могут видоизменяться от версии PHP к версии. Поэтому, прежде чем использовать ту или иную встроенную переменную, лучше свериться с технической документацией на используемую вами версию PHP. Ниже в таблице приведено лишь несколько, наиболее типичных предопределенных переменных:<br />\n<br />\n<strong>Предопределенные переменные в PHP</strong></p>\n\n<table align="center" border="2" cellpadding="2" style="width:100%">\n	<tbody>\n		<tr>\n			<th>Переменная</th>\n			<th>Описание</th>\n		</tr>\n		<tr>\n			<td>$QUERY_STRING</td>\n			<td>Данная переменная содержит часть строки URL, пересылаемой на сервер, после символа &quot;?&quot;. Иными словами, она содержит пары &quot;перменная=значение&quot;, разделенные символом &quot;&amp;&quot;.</td>\n		</tr>\n		<tr>\n			<td>$REMOTE_ADDR</td>\n			<td>Cодержит IP-арес пользовательской машины, которая выполняет запрос к web-серверу.</td>\n		</tr>\n		<tr>\n			<td>$SCRIPT_NAME</td>\n			<td>Cодержит путь к текущему (обрабатываемому) скрипту PHP.</td>\n		</tr>\n		<tr>\n			<td>$SERVER_NAME</td>\n			<td>Cодержит имя хоста сервера, который обрабатывает текущий PHP-скрипт.</td>\n		</tr>\n	</tbody>\n</table>\n', 11, '2020-04-29 21:33:35', '2020-04-29 21:33:35', 6038),
('f02053ea8a6911eab1430cc47aaabd6c', 'e0d0ca9989b711eab1430cc47aaabd6c', 'Примеры использования', '<h1><strong>Функция&nbsp;<code>substr</code></strong></h1>\n\n<p>Функция&nbsp;<code>substr</code>&nbsp;используется для получения части строки. Синтаксис:</p>\n\n<pre>\n<code class="language-php">string substr (string $string, int $start [, int $length ])</code></pre>\n\n<p>Первый параметр&nbsp;<code>$string</code>&nbsp;- строка из которой нужно получить подстроку начиная с позиции&nbsp;<code>$start</code>&nbsp;и длиной в&nbsp;<code>$length</code>.<br />\nПример:</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho substr("Hello world", 6, 5);\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">world</code></pre>\n\n<p>&nbsp;Последний параметр&nbsp;<em><code>$length</code></em>&nbsp;необязательный</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho substr("Hello world !!!", 6);\n?&gt;</code></pre>\n\n<p>Отображение в браузере:</p>\n\n<pre>\n<code class="language-php">world !!!</code></pre>\n\n<p>Если&nbsp;<em><code>$start</code></em>&nbsp;отрицательный, то возвращаемая подстрока будет иметь значение от конца строки до позиции&nbsp;<code>$start</code>&nbsp;с конца строки.</p>\n\n<p>&nbsp;Для многобайтовых кодировок (например, для кириллицы) используйте функцию&nbsp;<strong><code>mb_substr</code></strong>&nbsp;с тем же синтаксисом что и в&nbsp;<strong><code>substr.</code></strong></p>\n\n<h1><strong>Функция&nbsp;<code>strpos</code></strong></h1>\n\n<p>Функция возвращает позицию первого вхождения подстроки в строку.</p>\n\n<pre>\n<code class="language-php">int strpos (string $string , mixed $needle [, int $offset = 0 ])</code></pre>\n\n<p>Первый параметр&nbsp;<em><code>$string</code></em>&nbsp;- строка в которой будет произведен поиск,&nbsp;<em><code>$needle</code></em>&nbsp;- строка, которую нужно найти,&nbsp;<em><code>$offset</code></em>&nbsp;- необязательный параметр, если этот параметр указан, то поиск будет начат с указанного количества символов с начала строки<br />\nПример:</p>\n\n<pre>\n<code class="language-php">&lt;?php\necho strpos("Hello world", "world"); // получим 6\n?&gt;</code></pre>\n\n<p>В результате, получим 6, так как строка &quot;world&quot; впервые встречается на 6 позиции</p>\n\n<p>&nbsp;Для многобайтовых кодировок (например, для кириллицы) используйте функцию&nbsp;<strong><code>mb_strpos</code></strong>&nbsp;с тем же синтаксисом что и в&nbsp;<strong><code>strpos</code></strong></p>\n\n<h1><strong>Функция&nbsp;<code>str_replace</code></strong></h1>\n\n<p>Функция заменяет все вхождения строки поиска на строку замены.</p>\n\n<pre>\n<code class="language-php">mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )</code></pre>\n\n<ul>\n	<li><em>mixed - это один из псевдотипов. </em>Он&nbsp;говорит о том, что параметр может принимать много (но необязательно все) типов.</li>\n</ul>\n\n<p>Если не нужны сложные правила поиска/замены (например, регулярные выражения), использование этой функции предпочтительнее&nbsp;<strong>preg_replace()</strong>. Эта функция позволяет работать с регулярными выражениями (они же <em>regex</em>). В данном курсе данная тема не рассматривается и является продвинутой, но очень полезной вещью. Любые шаблонизации, парсинг (разбор) языковых и строковых объектов, сложные валидации элементов форм - решаются в большинстве случаев с помощью регулярных выражений. Регулярные выражения в PHP можно изучить, например, на данном ресурсе:&nbsp;<a href="http://archive-ipq-co.narod.ru/l1/regexp.html">http://archive-ipq-co.narod.ru/l1/regexp.html</a></p>\n\n<p>Если&nbsp;<code>search</code>&nbsp;и&nbsp;<code>replace</code>&nbsp;- массивы, то&nbsp;<strong>str_replace()</strong>&nbsp;использует каждое значение из соответствующего массива для поиска и замены в&nbsp;<code>subject</code>. Если в массиве&nbsp;<code>replace</code>&nbsp;меньше элементов, чем в&nbsp;<code>search</code>, в качестве строки замены для оставшихся значений будет использована пустая строка. Если&nbsp;<code>search</code>&nbsp;- массив, а&nbsp;<code>replace</code>&nbsp;- строка, то эта строка замены будет использована для каждого элемента массива&nbsp;<code>search</code>. Обратный случай смысла не имеет.</p>\n\n<p><strong><code>search</code></strong></p>\n\n<ul>\n	<li>Искомое значение, также известное как&nbsp;<em>needle</em>&nbsp;(иголка). Для множества искомых значений можно использовать массив.</li>\n</ul>\n\n<p><strong><code>replace</code></strong></p>\n\n<ul>\n	<li>Значение замены, будет использовано для замены искомых значений&nbsp;<code>search</code>. Для множества значений можно использовать массив.</li>\n</ul>\n\n<p><strong><code>subject</code></strong></p>\n\n<ul>\n	<li>Строка или массив, в котором производится поиск и замена, также известный как&nbsp;<em>haystack</em>&nbsp;(стог сена).</li>\n</ul>\n\n<p>Если&nbsp;<strong><code>subject</code></strong>&nbsp;является массивом, то поиск с заменой будет осуществляться над каждым элементом&nbsp;<code>subject</code>, а результатом функции также будет являться массив.</p>\n\n<p><strong><code>count</code></strong></p>\n\n<ul>\n	<li>Если передан, то будет установлен в количество произведенных замен.</li>\n</ul>\n\n<p>Актуальный пример на работу с str_replace. Пример также демонстрирует работу с функциями даты и времени, встроенными в PHP,&nbsp; и с функцией <strong>nl2br()</strong>, которая заменяет все переносы строк на html-тег <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">&lt;br /&gt;</code></p>\n\n<p><a href="uploads/63a9f0ea7bb98050796b649e85481845/strreplace-example.php" onclick="window.open(this.href, ''strreplaceExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=400,left=10,height=600,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\n	date_default_timezone_set("Europe/Moscow");\n	// Установка временной зоны\n	$responseTemplate = &lt;&lt;&lt;START\nЗдравствуйте, {username}. Ваше обращение #{ticketId} было рассмотрено в {considerTime}.\nСверка заявки:\n&lt;b&gt;Номер:&lt;/b&gt; {ticketId}\n&lt;b&gt;Время обращения:&lt;/b&gt; {ticketTime}\n&lt;b&gt;Пользователь:&lt;/b&gt; {username}\n&lt;b&gt;Суть обращения:&lt;/b&gt; \n{ticketDescription}\n	\n&lt;b&gt;Ответ по заявке:&lt;/b&gt;\n{ticketResponse}\n\n&lt;b&gt;Обработал:&lt;/b&gt; {manager}\n&lt;b&gt;Время:&lt;/b&gt; {considerTime}\nSTART;\n\n$username = "vasya_pupkin";\n$ticketId = "123456";\n$considerTime = date("d.m.Y H:i",time());    \n// Формат 00.00.0000 00:00\n$ticketTime = date("d.m.Y H:i",time()-7200); \n// Два часа назад\n$ticketDescription = "Не работает интернет. Просьба позвонить по телефону 8-999-999-99-99";\n$ticketResponse = "Здравствуйте, Василий. Тех. работы завершены. Ваше оборудование подключено";\n$manager = "Петр Смирнов, менеджер тех. поддержки";\n\n$response = str_replace("{username}",$username,$responseTemplate); \n// Сначала замена в шаблоне\n$response = str_replace("{ticketId}",$ticketId,$response); \n// Затем замена в строке, которая будет итоговой\n$response = str_replace("{considerTime}",$considerTime,$response);\n$response = str_replace("{ticketTime}",$ticketTime,$response);\n$response = str_replace("{ticketDescription}",$ticketDescription,$response);\n$response = str_replace("{ticketResponse}",$ticketResponse,$response);\n$response = str_replace("{manager}",$manager,$response);\n$response = nl2br($response); \n// Замена переносов строк на тег &lt;br /&gt; для отображения в HTML\n\necho $response;\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 30, '2020-04-30 01:36:59', '2020-04-30 01:43:38', 10021),
('f02510ba8a8811eab1430cc47aaabd6c', '4d6557a689b811eab1430cc47aaabd6c', 'Механизм сессий', '<h1><strong>Механизм сессий</strong></h1>\n\n<p>Сессии и cookies хранят сведения о пользователях при переходах между несколькими страницами. При использовании сессий данные сохраняются во временных файлах на сервере. Использование сессий и cookies очень удобно и используется в таких приложениях как доски объявлений, Интернет-магазины, форумы. Т.е. в тех случаях, когда необходимо сохранять информацию о пользователях на протяжении нескольких станиц и своевременно предоставлять пользователю новую информацию.</p>\n\n<p><em>Протокол HTTP</em> - это протокол &quot;без сохранения состояния&quot;. Т.е. данный протокол не имеет встроенного способа сохранения состояния между двумя транзакциями. Когда пользователь открывает сначала одну страницу сайта, а затем переходит на другую страницу этого же сайта, то средствами, предоставляемыми протоколом HTTP, невозможно установить, что оба запроса относятся к одному пользователю. Одним из методов, при помощи которых можно отслеживать информацию о пользователе в течение одного сеанса связи с Web-сайтов, является управление сеансами (сессиями). Важно то, что сеанс представляет собой группу переменных, которые, в отличие от обычных переменных, сохраняются и после завершения выполнения PHP-сценария.</p>\n\n<p>При работе с сессиями различают следующие этапы:</p>\n\n<ul>\n	<li>\n	<p>открытие сессии</p>\n	</li>\n	<li>\n	<p>регистрация переменных сессии и их использование</p>\n	</li>\n	<li>\n	<p>закрытие сессии</p>\n	</li>\n</ul>\n\n<p>Один из способов открытия сессии заключается в использовании функции&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">session_start</code></strong>. Она вызывается в начале PHP-сценария:</p>\n\n<p>Эта функция проверяет, существует ли идентификатор сессии, и создает его, если он не существует. Если идентификатор текущей сессии уже существует, то загружаются зарегистрированные переменные сессии.</p>\n\n<p>После инициализации сессии можно сохранять информацию в суперглобальном массиве&nbsp;<strong><code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$_SESSION</code></strong>. Пусть имеется файл&nbsp;index.php&nbsp;в котором в массив&nbsp;$_SESSION&nbsp;сохраняется переменная и массив.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n  // Инициируем сессию\n  session_start();\n\n  // Помещаем значение в сессию\n  $_SESSION[''name''] = "value";\n\n  // Помещаем массив в сессию\n  $arr = array("first", "second", "third");\n\n  $_SESSION[''arr''] = $arr;\n\n  // Выводим ссылку на другую страницу\n  echo "&lt;a href=''other.php''&gt;другая страница&lt;/a&gt;";\n?&gt;\n</code></pre>\n\n<p>Значения данных переменных можно извлечь из суперглобального массива&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>$_SESSION</strong></code>&nbsp;на страницах, где происходит вызов функции&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>session_start()</strong></code>. Ниже приводится содержимое страницы&nbsp;<strong>other.php</strong>, где извлекаются данные, ранее помещенные на странице&nbsp;index.php.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n  // Инициируем сессию\n  session_start();\n\n  // Выводим содержимое суперглобального массива $_SESSION\n  echo "&lt;pre&gt;";\n  print_r($_SESSION);\n  echo "&lt;/pre&gt;";\n?&gt;\n</code></pre>\n\n<p>Результат работы скрипта выглядит следующим образом:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><tt>Array<br />\n(<br />\n&nbsp;&nbsp;&nbsp; [name] =&gt; value<br />\n&nbsp;&nbsp;&nbsp; [arr] =&gt; Array<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [0] =&gt; first<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [1] =&gt; second<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [2] =&gt; third<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br />\n)</tt></div>\n\n<p>После завершения работы с сессией сначала нужно разрегистрировать все переменные сессии, а затем вызвать функцию&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><strong>unset()</strong></code>:</p>\n\n<pre>\n<code class="language-php">unset($_SESSION["username"]);\n</code></pre>\n\n<p>Ниже представлены все функции сессий:<br />\n&nbsp;</p>\n\n<ul>\n	<li>session_abort&nbsp;&mdash; Отменяет изменения в массиве сессии и завершает ее</li>\n	<li>session_cache_expire&nbsp;&mdash; Вернуть текущее время жизни кеша</li>\n	<li>session_cache_limiter&nbsp;&mdash; Получить и/или установить текущий режим кеширования</li>\n	<li>session_commit&nbsp;&mdash; Псевдоним session_write_close</li>\n	<li>session_create_id&nbsp;&mdash; Создаёт новый идентификатор сессии</li>\n	<li>session_decode&nbsp;&mdash; Декодирует данные сессии из закодированной строки сессии</li>\n	<li>session_destroy&nbsp;&mdash; Уничтожает все данные сессии</li>\n	<li>session_encode&nbsp;&mdash; Кодирует данные текущей сессии в формате строки сессии</li>\n	<li>session_gc&nbsp;&mdash; Выполняет сборку мусора данных сессии</li>\n	<li>session_get_cookie_params&nbsp;&mdash; Возвращает параметры cookie сессии</li>\n	<li>session_id&nbsp;&mdash; Получает и/или устанавливает идентификатор текущей сессии</li>\n	<li>session_is_registered&nbsp;&mdash; Определяет, зарегистрирована ли глобальная переменная в сессии</li>\n	<li>session_module_name&nbsp;&mdash; Возвращает и/или устанавливает модуль текущей сессии</li>\n	<li>session_name&nbsp;&mdash; Получить или установить имя текущей сессии</li>\n	<li>session_regenerate_id&nbsp;&mdash; Генерирует и обновляет идентификатор текущей сессии</li>\n	<li>session_register_shutdown&nbsp;&mdash; Функция завершения сессии</li>\n	<li>session_register&nbsp;&mdash; Регистрация одной или нескольких глобальных переменных текущей сессии</li>\n	<li>session_reset&nbsp;&mdash; Реинициализирует сессию оригинальными значениями</li>\n	<li>session_save_path&nbsp;&mdash; Получает и/или устанавливает путь сохранения сессии</li>\n	<li>session_set_cookie_params&nbsp;&mdash; Устанавливает параметры сессионной cookie</li>\n	<li>session_set_save_handler&nbsp;&mdash; Устанавливает пользовательские обработчики хранения сессии</li>\n	<li>session_start&nbsp;&mdash; Стартует новую сессию, либо возобновляет существующую</li>\n	<li>session_status&nbsp;&mdash; Возвращает состояние текущей сессии</li>\n	<li>session_unregister&nbsp;&mdash; Отмена регистрации глобальной переменной в текущей сессии</li>\n	<li>session_unset&nbsp;&mdash; Удалить все переменные сессии</li>\n	<li>session_write_close&nbsp;&mdash; Записывает данные сессии и завершает её</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>Подробную документацию по сессиям можно найти в <a href="https://www.php.net/manual/ru/ref.session.php">официальном источнике</a>.</p>\n', 45, '2020-04-30 05:18:53', '2020-04-30 05:18:53', 9945),
('f8a71d238a8911eab1430cc47aaabd6c', '4d655b7b89b811eab1430cc47aaabd6c', 'Подключение расширения mysqli', '<h1><strong>Подключение расширения mysqli</strong></h1>\n\n<div>PHP7 предоставляет новый удобный интерфейс для взаимодействия с базами данных MySQL. Данное расширение называется <strong>mysqli</strong> (MySQL improved). Оно обычно поставляется в базовом дистрибутиве php.&nbsp;</div>\n\n<p>Чтобы подключить расширение <strong>mysqli</strong>, нужно изменить конфигурационный&nbsp;файл PHP <strong>php.ini</strong></p>\n\n<p><strong>php.ini</strong></p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><strong>extension_dir = &quot;C:\\web\\php7.4.2\\ext&quot;<br />\nextension=mysqli</strong></div>\n\n<p>В качестве директории должен быть указан актуальный путь до каталога <tt>/ext</tt> основного расположения модуля PHP.&nbsp;</p>\n\n<p>После внесения изменения, нужно перезагрузить веб-сервер, а затем зайти на скрипт, содержащий</p>\n\n<pre>\n<code class="language-php">&lt;?php\n  phpinfo();\n?&gt;</code></pre>\n\n<p>На данной странице можно посмотреть все настройки как php, так и сервера. Там же можно узнать, какие расширения подключены, а также какая у них версия.</p>\n\n<p>&nbsp;</p>\n', 46, '2020-04-30 05:26:17', '2020-04-30 05:26:17', 1594),
('f983bb478a8511eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Параметры по умолчанию', '<h1><strong>Параметры по умолчанию</strong></h1>\n\n<p>В некоторых случаях могут возникать ситуации когда у функции должно быть довольно много параметров, причем некоторые из них будут постоянно иметь одно и тоже значение (значение по умолчанию). Синтаксис описания таких параметров имеет следующий вид:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;"><em>имя_параметра=значение<br />\nНапример,&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"> function my_func($a=14, $b=11)</code></em></div>\n\n<p>Данный параметр (параметр по умолчанию) может быть переопределен каким-либо значением при вызове функции и он является более приоритетным по отношению к параметру, заданному по умолчанию, например:</p>\n\n<pre>\n<code class="language-php">&lt;?php \nfunction func($a=1) { \n  echo "$a&lt;br&gt;"; \n} \n\nfunc(); // выведет 1 func(100); // выведет 100 \n?&gt;</code></pre>\n\n<p>Любая пользовательская функция, помимо параметров по умолчанию, может также иметь и обычные (неопределенные заранее) параметры. Но, существует одно неукоснительное правило: все параметры по умолчанию должны располагаться в правой части списка всех параметров при описании функции:</p>\n\n<pre>\n<code class="language-php">function GetMax($arr, $i=0,$j=1) // правильное объявление \nfunction GetMax($i=0,$arr,$j=1) // ошибка </code></pre>\n\n<h1><strong>Переменное число параметров</strong></h1>\n\n<p>В результате существующей возможности использования в функции параметров по умолчанию, может возникнуть ситуация когда, передаваемое функции число параметров, будет разным, в зависимости от алгоритма сценария. Иными словами, мы заранее не знаем, сколько параметров будет передано нашей функции. Специально для такого случая в PHP предусмотрели возможность использования переменного числа параметров, основанного на использовании некоторых функций:<br />\n&nbsp;</p>\n\n<table border="4" cellpadding="4">\n	<tbody>\n		<tr>\n			<th>Синтаксис</th>\n			<th>Описание</th>\n		</tr>\n		<tr>\n			<td>string&nbsp;<strong>func_get_arg</strong>(int&nbsp;<strong>$arg_num</strong>);</td>\n			<td>Функция возвращает аргумент с номером $arg_num в списке аргументов, переданных функции. Нумерация аргументов начинается с 0. При вызове ее вне рамок пользовательской функции генерируется предупреждение. Если значение $arg_num превышает реальное количество аргументов функции пользователя, генерируется предупреждение и возвращается false.</td>\n		</tr>\n		<tr>\n			<td>array&nbsp;<strong>func_get_args</strong>();</td>\n			<td>Возвращает массив аргументов текущей функции пользователя. Нумерация элементов массива начинается с нуля. Попытка обращения к элементу массива с индексом больше максимального приводит к предупреждению интерпретатора. При вызове вне рамок функции пользователя генерируется предупреждение и возвращается false.</td>\n		</tr>\n		<tr>\n			<td>int&nbsp;<strong>func_num_args</strong>();</td>\n			<td>Возвращает количество аргументов, переданных в текущую функцию пользователя. При вызове вне рамок функции генерируется предупреждение и возврашается false.</td>\n		</tr>\n	</tbody>\n</table>\n', 41, '2020-04-30 04:57:40', '2020-04-30 04:57:40', 4909),
('facccf418a5f11eab1430cc47aaabd6c', 'e0d0c46489b711eab1430cc47aaabd6c', 'Операторы break и continue', '<h1><strong>break</strong></h1>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">break</code>&nbsp;прерывает выполнение текущей структуры&nbsp;<em>for</em>,&nbsp;<em>foreach</em>,&nbsp;<em>while</em>,&nbsp;<em>do-while</em>&nbsp;или&nbsp;<em>switch</em>.</p>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">break</code>&nbsp;принимает необязательный числовой аргумент, который сообщает ему выполнение какого количества вложенных структур необходимо прервать. Значение по умолчанию&nbsp;<em>1</em>, только ближайшая структура будет прервана.</p>\n\n<p>В следующем примере также есть возможность ознакомиться с азами использования массивов и управляющей конструкции <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">foreach</code>.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array(''один'', ''два'', ''три'', ''четыре'', ''стоп'', ''пять'');\nforeach ($arr as $val) {\n    if ($val == ''стоп'') {\n        break;    /* Тут можно было написать ''break 1;''. */\n    }\n    echo "$val&lt;br /&gt;\\n";\n}\n\n/* Использование дополнительного аргумента. */\n\n$i = 0;\nwhile (++$i) {\n    switch ($i) {\n        case 5:\n            echo "Итерация 5&lt;br /&gt;\\n";\n            break 1;  /* Выйти только из конструкции switch. */\n        case 10:\n            echo "Итерация 10; выходим&lt;br /&gt;\\n";\n            break 2;  /* Выходим из конструкции switch и из цикла while. */\n        default:\n            break;\n    }\n}\n?&gt;</code></pre>\n\n<h1><strong>continue</strong></h1>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">continue</code>&nbsp;используется внутри циклических структур для пропуска оставшейся части текущей итерации цикла и, при соблюдении условий, начала следующей итерации.</p>\n\n<blockquote>\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>Замечание</strong>:&nbsp;В PHP оператор&nbsp;switch&nbsp;считается циклическим и внутри него может использоваться&nbsp;<em>continue</em>. Если&nbsp;<em>continue</em>&nbsp;не передано аргументов, то он ведет себя аналогично&nbsp;<em>break</em>, но выдает предупреждение о возможной ошибке. Если&nbsp;<em>switch</em>&nbsp;расположен внутри цикла,&nbsp;<em>continue 2</em>&nbsp;продолжит выполнение внешнего цикла со следующей итерации.</div>\n</blockquote>\n\n<p><code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">continue</code>&nbsp;принимает необязательный числовой аргумент, который указывает на скольких уровнях вложенных циклов будет пропущена оставшаяся часть итерации. Значением по умолчанию является&nbsp;<em>1</em>, при которой пропускается оставшаяся часть текущего цикла.</p>\n\n<p>Следующий пример помимо работы с <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">continue</code>, также демонстрирует работу с массивами с помощью цикла <code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">foreach</code>.</p>\n\n<p><a href="uploads/63a9f0ea7bb98050796b649e85481845/continue-example.php" onclick="window.open(this.href, ''continueExample'', ''resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=yes,dependent=no,width=400,left=10,height=400,top=10''); return false;">Запустить пример</a></p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array(1,2,3,4,5,6,7,8,9,10); \nforeach ($arr as $key =&gt; $value) {\n    if (!($key % 2)) { // пропуск четных чисел\n        continue;\n    }\n    echo "$value &lt;br ?&gt;"; // вывод нечетных чисел\n}\n\n$i = 0;\nwhile ($i++ &lt; 5) {\n    echo "Снаружи&lt;br /&gt;\\n";\n    while (1) {\n        echo "В середине&lt;br /&gt;\\n";\n        while (1) {\n            echo "Внутри&lt;br /&gt;\\n";\n            continue 3;\n        }\n        echo "Это никогда не будет выведено.&lt;br /&gt;\\n";\n    }\n    echo "Это тоже.&lt;br /&gt;\\n";\n}\n?&gt;</code></pre>\n\n<p>&nbsp;</p>\n', 28, '2020-04-30 00:25:42', '2020-04-30 00:42:28', 5585);
INSERT INTO `articles` (`article_id`, `container_id`, `article_title`, `content`, `article_sort_order`, `datetime_created`, `datetime_modified`, `content_size`) VALUES
('fc82b2478a8411eab1430cc47aaabd6c', '4d654ab089b811eab1430cc47aaabd6c', 'Параметры функций', '<h1><strong>Параметры функций</strong></h1>\n\n<p>1.&nbsp;<strong>Передача значений.</strong>&nbsp;При объявлении функции можно указать список параметров, которые будут передаваться функции, например</p>\n\n<pre>\n<code class="language-php">function func($a,$b,$c)  {\n       ...\n       ...\n  [return ...]\n}</code></pre>\n\n<p>Чтобы функция корректно работала, необходимо ввести столько же (не менее) аргументов при ее вызове, сколько было при описании функции. Идентификаторы при описании функции и при ее вызове - могут совпадать, а могут не совпадать. Важно что 1-ый аргумент при вызове функции будет соответствовать 1-ому аргументу при ее описании; 2-ой - 2-ому и т.д. Например, ниже приведен ряд вызовов функции&nbsp;<em>func</em>&nbsp;(рассмотренной выше):</p>\n\n<pre>\n<code class="language-php">func($a,$b,$c); // корректно\nfunc($x,$a,$zzzz); // корректно\nfunc(12,"Кафедра ЭФ",111.11); // корректно\nfunc($k,$mumu); // предупреждение\nfun($a,$b,$c); // ошибка</code></pre>\n\n<p><strong>2. Передача переменных по ссылке.</strong>&nbsp;Иногда, при программировании, возникают задачи в результате которых необходимо изменять (вычислять) с помощью некоторой функции переменные, определенные в основной программе. Напрямую это сделать не получится. Рассмотрим, например,&nbsp;следующий скрипт:</p>\n\n<pre>\n<code class="language-php">&lt;?php\nfunction test($x,$y)\n{\n    $y=cos($x);\n    $x=15;\n    echo "x=$x y=$y&lt;br&gt;";\n}\n$x=3.14;\n$y=10;\necho "x=$x y=$y&lt;br&gt;";\ntest($x,$y);\necho "x=$x y=$y&lt;br&gt;";\n?&gt;</code></pre>\n\n<p>Здесь сначала, в основном теле скрипта, определяются и выводятся на экран переменные <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$x</code> и <code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">$y</code> которые мы хотим изменить с помощью функции <strong>test</strong>. Далее вызывается функция test с параметрами $x и $y, которая изменяет их внутри функции и выводит на экран. После этого на экран опять выводятся значения $x и $y в основном теле программы. Все эти запутанные манипуляции с $x и $y предприняты лишь для того, чтобы показать - функция не может обычным образом изменять переменные, определенные в основном теле программы. Иными словами, все переменные определенные внутри функции являются локальными и существуют только в ней.</p>\n\n<p>И все же, изменить переменные в функции можно и делается это слудующим образом:</p>\n\n<ul>\n	<li>передать данную переменную в функцию и возвратить результат вычисления\n	<pre>\n<code class="language-php">&lt;?php\nfunction Test1($x,$y)\n{\n    $y=cos($x);\n    $x=15;\n    return array($x,$y)\n}\n$x=3.14;\n$y=10;\necho "x=$x y=$y&lt;br&gt;";\n$a=test1($x,$y);\necho "x=$x y=$y&lt;br&gt;";\necho "a[0]=$a[0] a[1]=$a[1]&lt;br&gt;";\n?&gt;</code></pre>\n\n	<p>&nbsp;</p>\n	</li>\n	<li>\n	<p>передать в функцию ссылку (<strong>&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">&amp;</code>&nbsp;</strong>) на переменную, например:</p>\n\n	<pre>\n<code class="language-php">&lt;?php \nfunction Test2(&amp;$x,&amp;$y) { \n  $y=cos($x); $x=15; \n} \n$x=3.14; \n$y=10; \necho "x=$x y=$y&lt;br&gt;"; \ntest2($x,$y); \necho "x=$x y=$y&lt;br&gt;"; \n?&gt;</code></pre>\n\n	<p>&nbsp;</p>\n	</li>\n</ul>\n\n<h2>&nbsp;</h2>\n', 39, '2020-04-30 04:50:36', '2020-04-30 04:50:36', 4694),
('fc8bba788a6b11eab1430cc47aaabd6c', 'cc51d98989b711eab1430cc47aaabd6c', 'Цикл foreach', '<h1><strong>foreach</strong></h1>\n\n<p>Конструкция&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>foreach</em></code>&nbsp;предоставляет простой способ перебора массивов.&nbsp;<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;"><em>foreach</em></code>&nbsp;работает только с массивами и объектами и будет генерировать ошибку при попытке использования с переменными других типов или неинициализированными переменными. Существует два вида синтаксиса:</p>\n\n<pre>\n<code style="background-color:#f8f9fa;border-radius:2px;border:1px solid #eaecf0;padding:1px 4px;">foreach (array_expression as $value)\n    statement\nforeach (array_expression as $key =&gt; $value)\n    statement</code>\n</pre>\n\n<p>Первый цикл перебирает массив, задаваемый с помощью&nbsp;<em>array_expression</em>. На каждой итерации значение текущего элемента присваивается переменной&nbsp;<em>$value</em>&nbsp;и внутренний указатель массива увеличивается на единицу (таким образом, на следующей итерации цикла работа будет происходить со следующим элементом).</p>\n\n<p>Второй цикл дополнительно присвоит ключ текущего элемента переменной&nbsp;<em>$key</em>&nbsp;на каждой итерации.</p>\n\n<p>Для того, чтобы напрямую изменять элементы массива внутри цикла, переменной&nbsp;<em>$value</em>&nbsp;должен предшествовать знак &amp;. В этом случае значение будет присвоено по&nbsp;ссылке.</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$arr = array(1, 2, 3, 4);\nforeach ($arr as &amp;$value) {\n    $value = $value * 2;\n}\n// массив $arr сейчас таков: array(2, 4, 6, 8)\nunset($value); // разорвать ссылку на последний элемент\n?&gt;</code></pre>\n\n<h2><strong>Распаковка вложенных массивов с помощью list()</strong></h2>\n\n<p>В PHP 5.5 была добавлена возможность обхода массива массивов с распаковкой вложенного массива в переменные цикла, передав&nbsp;<strong>list()</strong>&nbsp;в качестве значения.</p>\n\n<p>Например:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$array = [\n    [1, 2],\n    [3, 4],\n];\n\nforeach ($array as list($a, $b)) {\n    // $a содержит первый элемент вложенного массива,\n    // а $b содержит второй элемент.\n    echo "A: $a; B: $b\\n";\n}\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">A: 1; B: 2<br />\nA: 3; B: 4</div>\n\n<p>Можно передавать меньшее количество элементов в&nbsp;<strong>list()</strong>, чем находится во вложенном массиве, в этом случае оставшиеся значения массива будут проигнорированы:</p>\n\n<pre>\n<code class="language-php">&lt;?php\n$array = [\n    [1, 2],\n    [3, 4],\n];\n\nforeach ($array as list($a)) {\n    // Обратите внимание на отсутствие $b.\n    echo "$a\\n";\n}\n?&gt;</code></pre>\n\n<p>Результат выполнения данного примера:</p>\n\n<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">1<br />\n3</div>\n', 32, '2020-04-30 01:51:39', '2020-04-30 01:51:39', 4164);

--
-- Триггеры `articles`
--
DROP TRIGGER IF EXISTS `ins_articles_trigger`;
DELIMITER $$
CREATE TRIGGER `ins_articles_trigger` BEFORE INSERT ON `articles`
 FOR EACH ROW begin
if new.article_sort_order IS NULL then set new.article_sort_order = (SELECT MAX(article_sort_order) from articles)+1; end if;
if new.datetime_created IS NULL then set new.datetime_created = CURRENT_TIMESTAMP(); end if;
if new.datetime_modified IS NULL then set new.datetime_modified = CURRENT_TIMESTAMP(); end if;
if new.content_size IS NULL then set new.content_size = LENGTH(new.content); end if;
if new.article_id IS NULL then set new.article_id = replace(UUID(),'-',''); end if;
end
$$
DELIMITER ;
DROP TRIGGER IF EXISTS `upd_articles_trigger`;
DELIMITER $$
CREATE TRIGGER `upd_articles_trigger` BEFORE UPDATE ON `articles`
 FOR EACH ROW begin
set new.datetime_modified = CURRENT_TIMESTAMP();
set new.content_size = LENGTH(new.content);
end
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `board`
--

DROP TABLE IF EXISTS `board`;
CREATE TABLE IF NOT EXISTS `board` (
  `board_id` varchar(255) DEFAULT NULL,
  `board_title` varchar(255) DEFAULT NULL,
  `content` mediumtext,
  `date` date DEFAULT NULL,
  `board_sort_order` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `board`
--

INSERT INTO `board` (`board_id`, `board_title`, `content`, `date`, `board_sort_order`) VALUES
('7907d13088e211ea8b1200059a3c7a00', 'Срочные новости', '<p>Пропал кiт!</p>\n\n<p><img alt="" src="uploads/63a9f0ea7bb98050796b649e85481845/cat.jpg" style="height:250px; width:169px" /></p>\n', '2020-04-25', 5),
('8d17a2cf8b0111eab1430cc47aaabd6c', 'Преподавателю', '<div style="font-family: Times New Roman; font-size: 16px">\n<p>Здравствуйте! Так как у меня на данный момент отсутствует пояснительная записка, даю некоторые рекомендации по сайту.</p>\n\n<ol>\n	<li>Все статьи находятся во вкладке PHP7. В некоторых статьях есть возможность воспроизвести php-пример во всплывающем окне. Такие скрипты есть, например, <a href="index.php?mode=view_article&amp;container=cc51d98989b711eab1430cc47aaabd6c&amp;article=753589978a6f11eab1430cc47aaabd6c">в этой</a> или <a href="index.php?mode=view_article&amp;container=e0d0ca9989b711eab1430cc47aaabd6c&amp;article=f02053ea8a6911eab1430cc47aaabd6c">в этой статье</a>. Все скрипты и картинки лежат на сервере в каталоге пользователя <strong>root</strong>&nbsp;(об этом чуть ниже). Все статьи написаны с использованием разработанного функционала.</li>\n	<li>На сайте есть форма обратной связи, которая позволяет асинхронно оставить отзыв администраторам. Администратор через админ-тулз затем может просматривать данные отзывы (они записываются особым образом в txt файлы).</li>\n	<li>Сайт использует cookie, нацеленное на запоминание имени и роли пользователя. По умолчанию куки устанавливаются на час. Если нажать при авторизации на чекбокс &quot;Запомнить меня&quot;, то куки установятся без ограничений по времени, до нажатия на вкладку &quot;Выход&quot;. Выход сбрасывает пользовательскую сессию.</li>\n	<li>Было приложено много сил к тому, чтобы написать кроссбраузерный JS код. На данный момент все фичи поддерживаются во всех последниях версиях браузеров.</li>\n	<li>Хотел бы обратить внимание на то, что было уделено также много внимания мелочам: например, кнопка &quot;Наверх&quot; при скроллинге, разворачивающиеся секции, кнопочки &quot;удалить&quot; при администрировании сайта (в админ-панеле). Также много внимания было уделено внешнему виду сайта.</li>\n	<li>Ядром веб-приложения являются <strong>AdminTools.&nbsp;</strong>Данная вкладка реализует интерфейс &quot;табов&quot; (вкладок), каждая вкладка из которого отвечает за определенный объект управления на сайте.\n	<ul>\n		<li>Вкладка &quot;Управление статьями&quot; позволяет создавать, редактировать и удалять статьи. Все запросы, загрузки происходят асинхронно. Однако сами выпадающие списки асинхронно не обновляются, поэтому предусмотрена кнопочка &quot;Обновить страницу&quot;.</li>\n		<li>Вкладка &quot;Управление контейнерами&quot; позволяет управлять контейнерами (разделами) статей. Взаимодействие с контейнерами на данной вкладке полностью функционирует на AJAX. Кнопки &quot;Загрузить контейнеры&quot; и &quot;Отправить изменения&quot; работают с внутренними сервисами сайта (самостоятельные php-скрипты, которые работают с POST-запросами).</li>\n		<li>Вкладка &quot;Управление объявлениями&quot; аналогична вкладке &quot;Управление статьями&quot; за исключением того, что отличаются некоторые поля и отсутствуют контейнеры.</li>\n		<li>Вкладка &quot;Регистрация пользователей&quot; также полностью функционирует на AJAX и общается с внутренним сервисом php (отсылает асинхронно post-запросы на скрипт и получает результаты). Функционал позволяет зарегистрировать любое количество пользователей, причём каждая такая операция завернута в ТРАНЗАКЦИЮ (относительно работы с бд), поэтому если что-то пойдет не так в середине запроса, то произойдёт откат транзакции и пользователь получит поп-ап с ошибкой.</li>\n		<li>Вкладка &quot;Просмотр обратной связи&quot; позволяет просматривать обратную связь, оставленную пользователями по форме обратной связи.<br />\n		&nbsp;</li>\n	</ul>\n	</li>\n	<li>Также на вкладках &quot;Управление статьями&quot; и &quot;Управление объявленими&quot; есть возможность загружать переменное количество файлов (также взаимодействие по принципу сервиса) и просматривать свои файлы (можно также снова скачать их с сервера или удалить). Загруженные файлы можно использовать в своих статьях. Таким образом, я использую картинки и исполнение примеров&nbsp;php-скриптов.</li>\n	<li>Также просьба обратить внимание, что CKEditor выбран специально версии 4 для совместимости с IE (все те же идеи кроссбраузерности), при этом имеет нестандартный фон, высоту, имеет в своих стилях кастомный элемент, который я назвал&nbsp;<code style="background-color:#f8f9fa; border-radius:2px; border:1px solid #eaecf0; padding:1px 4px">Code Element</code>&nbsp;. Помимо этого, используются дополнительно три нестандартных плагина: codesnippet (сниппеты кода с подсветкой синтаксиса), colorbutton (кнопочки цвета текста и заливки его фоном) и panelbutton (требуется для функционирования colorbutton). Для вывода сниппетов в статьях подключена библиотека highlight.js.</li>\n	<li>Вы можете заметить, что все статьи и контейнеры имеют UUID. Данный универсальный идентификатор реализуется триггерами в БД. Также в БД присутствует триггер, который автоматически устанавливает дату создания/дату модификации и размер контента в байтах при insert и update операциях.</li>\n	<li>Также все операции с сервисами, транзакции с БД и лог-ины и лог-ауты логируются. Ниже пример, как это выглядит.</li>\n</ol>\n\n<p><img alt="" src="uploads/63a9f0ea7bb98050796b649e85481845/log.png" style="height:140px; width:700px" /></p>\n\n<p><strong>Памятка:</strong></p>\n\n<p><em>пользователь с ролью администратора</em></p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>login:</strong> root<br />\n<strong>password:</strong> root</div>\n\n<p><em>пользователь без админских прав</em> (также вы можете зарегистрировать любого пользователя сами):</p>\n\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><strong>login:</strong> user<br />\n<strong>password:</strong> user&nbsp;</div>\n</div>\n', '2020-04-30', 0);

--
-- Триггеры `board`
--
DROP TRIGGER IF EXISTS `ins_board_trigger`;
DELIMITER $$
CREATE TRIGGER `ins_board_trigger` BEFORE INSERT ON `board`
 FOR EACH ROW begin
if new.board_id IS NULL then set new.board_id = replace(UUID(),'-',''); end if;
if new.board_sort_order IS NULL then set new.board_sort_order = (SELECT MAX(board_sort_order) FROM board)+1; end if;
end
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `containers`
--

DROP TABLE IF EXISTS `containers`;
CREATE TABLE IF NOT EXISTS `containers` (
  `container_id` varchar(255) NOT NULL,
  `container_title` text,
  `container_sort_order` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `containers`
--

INSERT INTO `containers` (`container_id`, `container_title`, `container_sort_order`) VALUES
('046b312f89b711eab1430cc47aaabd6c', 'Быстрый старт', 2),
('4d654ab089b811eab1430cc47aaabd6c', 'Функции', 9),
('4d6557a689b811eab1430cc47aaabd6c', 'Сессии и Cookies', 10),
('4d655b7b89b811eab1430cc47aaabd6c', 'Связка с MySQL', 11),
('4d655ed489b811eab1430cc47aaabd6c', 'ООП', 12),
('4d65624589b811eab1430cc47aaabd6c', 'Новая функциональность PHP7', 13),
('9ed9ea43890311eab1430cc47aaabd6c', 'Введение', 1),
('cc51cd6889b711eab1430cc47aaabd6c', 'Переменные', 3),
('cc51d5da89b711eab1430cc47aaabd6c', 'Условные конструкции', 5),
('cc51d98989b711eab1430cc47aaabd6c', 'Массивы', 8),
('cc51dca689b711eab1430cc47aaabd6c', 'Операторы', 4),
('e0d0c46489b711eab1430cc47aaabd6c', 'Циклические конструкции', 6),
('e0d0ca9989b711eab1430cc47aaabd6c', 'Строки', 7);

--
-- Триггеры `containers`
--
DROP TRIGGER IF EXISTS `ins_containers_trigger`;
DELIMITER $$
CREATE TRIGGER `ins_containers_trigger` BEFORE INSERT ON `containers`
 FOR EACH ROW begin
if new.container_id IS NULL then set new.container_id = replace(UUID(),'-',''); end if;
if new.container_sort_order IS NULL then set new.container_sort_order = (SELECT MAX(container_sort_order) FROM containers)+1; end if;
end
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `role` varchar(255) DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `role`) VALUES
(1, 'root', 'root', 'admin'),
(2, 'testuser1', 'myPassword', 'user'),
(3, 'test_user_2', 'my_password', 'user'),
(11, 'user', 'user', 'user'),
(14, 'root_enterprise', 'root', 'admin'),
(15, 'qwerty', '12qw', 'admin'),
(16, 'testuser4', 'pass', 'user'),
(17, 'tEstUser5', 'test', 'user');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`article_id`);

--
-- Индексы таблицы `containers`
--
ALTER TABLE `containers`
  ADD PRIMARY KEY (`container_id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_user` (`username`,`password`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=18;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
