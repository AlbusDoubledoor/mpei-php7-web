-- phpMyAdmin SQL Dump
-- version 3.5.4
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Апр 26 2020 г., 23:09
-- Версия сервера: 5.5.23
-- Версия PHP: 5.3.5

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `curs`
--

-- --------------------------------------------------------

--
-- Структура таблицы `auth`
--

CREATE TABLE IF NOT EXISTS `auth` (
  `username` varchar(20) NOT NULL,
  `password` varchar(32) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `auth`
--

INSERT INTO `auth` (`username`, `password`) VALUES
('admin', '21232f297a57a5a743894a0e4a801fc3'),
('stud', 'b9ac0988cdd72928bc964d81d5858bb7');

-- --------------------------------------------------------

--
-- Структура таблицы `content`
--

CREATE TABLE IF NOT EXISTS `content` (
  `id` varchar(20) NOT NULL,
  `text` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `content`
--

INSERT INTO `content` (`id`, `text`) VALUES
('markup', '<p><strong>Язы́к разме́тки</strong> (текста) в компьютерной терминологии &mdash; набор символов или <a href="image/markup_1.jpg" target="_blank"><img alt="" src="image/markup_1.jpg" style="float:right; height:204px; margin:15px; width:400px" /></a>последовательностей, вставляемых в текст для передачи информации о его выводе или строении. Принадлежит классу <em>компьютерных языков</em>.&nbsp;</p>\r\n\r\n<p>Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст (как последовательность слов и знаков препинания), но и дополнительную информацию о различных его участках &mdash; например, указание на заголовки, выделения, списки и т. д. В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.Следует отметить, что язык разметки обычно не считается языком программирования.</p>\r\n\r\n<p>Различают <em>логическую и визуальную разметки</em>. В первом случае речь идёт только о том, какую роль играет данный участок документа в его общей структуре (например, &laquo;данная строка является заголовком&raquo;). Во втором &mdash; определяется, как именно будет отображаться этот элемент (например, &laquo;данную строку следует отображать жирным шрифтом&raquo;).&nbsp;</p>\r\n\r\n<p><strong>Идея языков разметки состоит в том, что визуальное отображение документа должно автоматически получаться из логической разметки и не зависеть от его непосредственного содержания.&nbsp;</strong>Это упрощает автоматическую обработку документа и его отображение в различных условиях (например, один и тот же файл может по-разному отображаться на экране компьютера, мобильного телефона и на печати, поскольку свойства этих устройств вывода существенно различаются).&nbsp;</p>\r\n\r\n<h2><strong>Примеры языков разметки</strong></h2>\r\n\r\n<p>Языки разметки используются везде, где требуется получение форматированного текста на основании неформатированного:<a href="image/markup_2.png" target="_blank"><img alt="" src="image/markup_2.png" style="float:right; height:172px; margin:15px; width:300px" /></a></p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>в типографии (<a href="gml.php">GML</a>, <a href="gml.php#SGML">SGML</a>, TeX, PostScript, RTF),</p>\r\n	</li>\r\n	<li>\r\n	<p>пользовательских интерфейсах компьютеров (Microsoft Word, OpenOffice, troff),</p>\r\n	</li>\r\n	<li>\r\n	<p>Всемирной Сети (<a href="html.php">HTML</a>, <a href="xhtml.php">XHTML</a>, <a href="xml.php">XML</a>, <a href="html5.php">HTML5</a>, WML, VML, PGML, SVG, XBRL).</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Для написания исходных текстов Википедии её участники используют особый язык разметки, а для отображения сложных математических формул &mdash; язык TeX.</p>\r\n'),
('logo', '<p><img alt="" src="image/web.jpg" style="height:81px; width:578px" /></p>\r\n'),
('tag_str', '<p><strong><a href="image/tag.webp" target="_blank"><img alt="" src="image/tag.webp" style="float:right; height:204px; margin:15px; width:500px" /></a>Тег </strong>(иногда тэг, англ. <strong>tag </strong>&mdash; именованная метка, читается; более правильное название &mdash; <strong>дескриптор</strong>). В <a href="gml.php">SGML </a>(<a href="html.php">HTML</a>, WML, AmigaGuide, языках семейства <a href="xml.php">XML</a>) &mdash; элемент языка разметки гипертекста. Текст, содержащийся между начальным и конечным тегом, <strong>отображается и размещается в соответствии со свойствами, указанными в начальном теге</strong>.</p>\r\n\r\n<p>Обычно используются парные теги &mdash; открывающий, или начальный, и закрывающий, или конечный. Возможно также применение одиночного тега. Например, тег отступа абзаца может оформлять абзац между тегами <strong>&lt;p&gt;</strong> и <strong>&lt;/p&gt;</strong>, а может в одиночной форме до следующего первого попавшегося тега <strong>&lt;p&gt;</strong>.</p>\r\n\r\n<p>Тег с пустым текстом: <strong>&lt;HR&gt;&lt;/HR&gt;</strong> вставляет разрыв текста без сохранения отступов, можно также использовать специальную форму записи тега &mdash; <strong>&lt;HR/&gt;</strong>.<br />\r\nНабор и рекомендуемые интерпретации тегов определены организацией <a href="http://w3c.org.ru/index.html" target="_blank">W3C</a>.</p>\r\n\r\n<p>В SGML можно назначать другие символы для обрамления тега (например, фигурные скобки), но в некоторых подмножествах этого языка (например, HTML и XML) такая возможность отсутствует.</p>\r\n\r\n<p>Кроме того, существуют разные системы языков-подмножеств с меньшими возможностями. Например, на веб-форумах и досках объявлений используется язык разметки <strong>BBCode</strong>, теги которого ограничиваются символами квадратных скобок: <strong>[ ]</strong>.</p>\r\n\r\n<p><strong>Весь текст, заключённый между начальным и конечным тегом, включая и сами эти теги, называется элементом</strong>. Сам же текст между тегами &mdash; содержанием элемента. Содержание элемента может включать в себя любой текст, в том числе и другие элементы.</p>\r\n\r\n<h2><strong>Атрибуты</strong></h2>\r\n\r\n<p><strong>У тега могут быть свойства, называемые атрибутами, дающие дополнительные возможности форматирования текста.</strong> Они записываются в виде сочетания: <em>имя атрибута-значения</em>, причём текстовые значения заключаются в кавычки.<br />\r\nНапример, можно выделить фрагмент текста определённым шрифтом, используя тег <strong>&lt;font&gt;</strong> и указав в этом теге название шрифта и желаемый размер:</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;font face="Times, Arial, Courier" size=4&gt;</code></pre>\r\n\r\n<p>оформляемый текст<strong> &lt;/font&gt;</strong>.</p>\r\n\r\n<h2><strong>Тип элемента документа</strong></h2>\r\n\r\n<p>Имя тега определяет тип элемента. В HTML имя тега определяет лишь правило разметки, так, имя тега <strong>&lt;i&gt;</strong>&nbsp;(например <strong>&lt;i&gt;</strong> Курсивный текст<strong>&lt;/i&gt;</strong>) определяет, что между тегами расположен текст, который следует отображать в браузере в курсивном начертании. XML представляет собой более гибкий стандарт. Имена тегов в нём не регламентируются жёстко: <em>пользователи могут вводить и использовать для своих нужд новые теги </em>(см. XML).</p>\r\n\r\n<p>Например, мы сами для себя можем определить, что элементом с именем тега <strong>&lt;person&gt;</strong>&nbsp;мы определяем тип этого XML элемента, как фамилия имя и отчество. И скажем, год рождения, как часть информации по данному человеку:</p>\r\n\r\n<p><strong>XML</strong>:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;person&gt;Иванов Иван Иванович &lt;year&gt;1984&lt;/year&gt;&lt;/person&gt;</code></pre>\r\n\r\n<p>Можно даже задать дополнительно в таблицах CSS, что все теги <strong>&lt;person&gt;</strong> будут определённого цвета.</p>\r\n\r\n<p><strong>HTML</strong>:</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;div name="person"&gt; Иванов Иван Иванович, 1984 &lt;/div&gt;</code></pre>\r\n\r\n<p>Тут уже нет возможности сформировать элемент документа для анализа текста, но оформить можно.</p>\r\n\r\n<p>Таким образом, <em>HTML представляет собой неструктурированный текст, а XML &mdash; документ с иерархической структурой</em>, что даёт возможность обработки документа: трансформацию данных, поиск нужных элементов документа и т. д.</p>\r\n\r\n<h2><strong>Структура элемента</strong></h2>\r\n\r\n<p>В SGML и основанных на нём языках (HTML версий 2&mdash;4.01, языки семейства XML и т. д.) элементы должны быть строго вложенными друг в друга, &laquo;перехлёст&raquo; элементов недопустим:</p>\r\n\r\n<p>неправильно:</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code></pre>\r\n\r\n<p>правильно:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;person&gt;&lt;i&gt;Имя Фамилия&lt;/i&gt;&lt;/person&gt;</code></pre>\r\n\r\n<p>Распространённое заблуждение, что SGML и HTML разрешают &laquo;перехлёст&raquo; элементов, основано на нарушающем стандарты&nbsp;поведении старых версий браузеров, пытавшихся &laquo;исправлять&raquo; ошибки разметки по собственным алгоритмам.<br />\r\nОднако SGML (и HTML) допускают применение ряда сокращённых синтаксических конструкций, в том числе необязательные (опциональные) закрывающие и даже открывающие теги (автоматически достраиваемые при разборе документа на основе указанной схемы документа и текущего контекста). <em>В XML</em>, напротив, <em>все теги должны быть открыты и закрыты явным образом, что значительно упрощает алгоритм его разбора и снижает требования к аппаратному обеспечению для него</em>.</p>\r\n'),
('menu', '<ul>\n	<li><a href="markup.php" target="content">Язык разметки: понятие и классификация</a></li>\n	<li><a href="gml.php" target="content">GML.&nbsp;SGML</a></li>\n	<li><a href="html.php" target="content">Язык гипертекстовой разметки HTML</a></li>\n	<li><a href="xml.php" target="content">XML</a></li>\n	<li><a href="xhtml.php" target="content">XHTML</a></li>\n	<li><a href="html5.php" target="content">HTML5</a></li>\n	<li><a href="tag_str.php" target="content">Структура тега</a></li>\n	<li><a href="doc_str.php" target="content">Структура документа</a></li>\n	<li><a href="dtd.php" target="content">DTD</a></li>\n</ul>\n\n<p><a href="index.php?do=logout" target="_parent">Выход</a></p>\n'),
('html', '<p><strong><a href="image/diag.jpg" target="_blank"><img alt="" src="image/diag.jpg" style="float:right; height:263px; margin:15px; width:300px" /></a>HTML </strong>(от англ. HyperText Markup Language &mdash; &laquo;язык гипертекстовой разметки&raquo;) &mdash; стандартизированный&nbsp;язык разметки документов во Всемирной паутине.</p>\r\n\r\n<p>Большинство веб-страниц содержат описание разметки на языке HTML (или <a href="xhtml.php"><strong>XHTML</strong></a>). Язык HTML интерпретируется браузерами; полученный в результате интерпретации форматированный текст отображается на экране монитора компьютера или мобильного устройства.</p>\r\n\r\n<p><a href="image/html.jpeg" target="_blank"><img alt="" src="image/html.jpeg" style="float:left; height:300px; margin:15px; width:300px" /></a>Язык HTML был создан британским ученым&nbsp;<strong>Тимом Бернерсом-Ли</strong>, создателем World Wide Web,&nbsp;приблизительно в 1986&mdash;1991 годах в стенах <a href="https://home.cern/" target="_blank">ЦЕРНа </a>в Женеве в Швейцарии&nbsp;для передачи гипертекстовых документов через web-браузер.&nbsp;HTML создавался как язык для обмена научной и технической документацией, пригодный для использования людьми, не являющимися специалистами в области вёрстки. HTML успешно справлялся с проблемой сложности <a href="gml.php">SGML</a>&nbsp;путём определения небольшого набора структурных и семантических элементов &mdash; дескрипторов. Дескрипторы также часто называют &laquo;тегами&raquo;. С помощью HTML можно легко создать относительно простой, но красиво оформленный документ. Помимо упрощения структуры документа, в HTML внесена поддержка гипертекста. Мультимедийные возможности были добавлены позже.&nbsp;Язык HTML является подмножеством языка <strong>SGML</strong> (стандартного обобщённого языка разметки по стандарту&nbsp;<a href="https://www.iso.org/ru/home.html" target="_blank">ISO</a>&nbsp;8879) и вплоть до 5-й версии определялся как его приложение. Начиная с HTML5 спецификации языка формулируются в терминах <a href="html5.php#DOM"><strong>DOM</strong> </a>(объектной модели документа).</p>\r\n\r\n<p>Первым общедоступным описанием HTML был документ &laquo;<a href="https://www.w3.org/History/19921103-hypertext/hypertext/WWW/MarkUp/Tags.html" target="_blank">Теги HTML</a>&raquo;, впервые упомянутый в Интернете Тимом Бернерсом-Ли в конце 1991 года. В нём описываются 18 элементов, составляющих первоначальный, относительно простой дизайн HTML. За исключением тега гиперссылки, на них сильно повлиял SGMLguid, внутренний формат документации, основанный на стандартном обобщенном языке разметки (SGML), в CERN. Одиннадцать из этих элементов всё ещё существуют в HTML.</p>\r\n\r\n<p>Официальной спецификации HTML 1.0 не существует. До 1995 года существовало множество неофициальных стандартов HTML.&nbsp;Это привело к так называемой&nbsp;<strong>&laquo;войне браузеров&raquo;</strong>, в ходе которой разработчики браузеров начали создавать свои собственные усовершенствования языка HTML. Эти модификации существенно отклонялись от идеи работы с единым стандартом HTML и вызвали настоящий хаос среди разработчиков, которые хотели создавать web-сайты, не зависящие от браузера. Более того, долгий период неопределенности в области стандартов привел к тому, что разработчики вывели язык из первоначально задуманных границ.&nbsp;Чтобы стандартная версия отличалась от них, ей сразу присвоили второй номер.<a href="image/html5.png" target="_blank"><img alt="" src="image/html5.png" style="float:right; height:300px; margin:15px; width:300px" /></a></p>\r\n\r\n<p>Версия 3 была предложена <a href="https://w3c.org.ru/index.html" target="_blank">Консорциумом Всемирной паутины</a> (W3C) в марте 1995 года и обеспечивала много новых возможностей, таких как создание таблиц, &laquo;обтекание&raquo; изображений текстом и отображение сложных математических формул, поддержка gif-формата. Даже при том, что этот стандарт был совместим со второй версией, реализация его была сложна для браузеров того времени. Версия 3.1 официально никогда не предлагалась, и следующей версией стандарта HTML стала 3.2, в которой были опущены многие нововведения версии 3.0, но добавлены нестандартные элементы, поддерживаемые браузерами Netscape Navigator и Mosaic.</p>\r\n\r\n<p>В версии HTML 4.0 произошла некоторая &laquo;очистка&raquo; стандарта. Многие элементы были отмечены как устаревшие и не рекомендованные. В частности, тег , используемый для изменения свойств шрифта, был помечен как устаревший (вместо него рекомендуется использовать таблицы стилей CSS).</p>\r\n\r\n<p>В настоящее время Консорциум Всемирной паутины разработал <a href="html5.php">HTML версии 5</a>. В соответствующем разделе нашего сайта вы найдете больше информации об HTML5.</p>\r\n\r\n<p><strong>Рассмотрим некоторые основные теги языка HTML</strong>.</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:1000px">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">Тег</th>\r\n			<th scope="col">\r\n			<p>Описание</p>\r\n			</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td><strong>&lt;html&gt;&lt;/html&gt;</strong></td>\r\n			<td>\r\n			<p>Тег <strong>&lt;html&gt;</strong> является контейнером, который заключает в себе все содержимое веб-страницы, включая теги <strong>&lt;head&gt;</strong> и <strong>&lt;body&gt;</strong>. Открывающий и закрывающий теги <strong>&lt;html&gt;</strong> в документе необязательны, но хороший стиль диктует непременное их использование. Как правило, тег<strong> &lt;html&gt;</strong> идет в документе вторым, после определения типа документа (Document Type Definition, DTD), устанавливаемого через элемент <strong>&lt;!DOCTYPE&gt;</strong>. Закрывающий тег <strong>&lt;html&gt;</strong> должен всегда стоять в документе последним.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;head&gt;&lt;/head&gt;</strong></td>\r\n			<td>Тег <strong>&lt;head&gt;</strong> предназначен для хранения других элементов, цель которых &mdash; помочь браузеру в работе с данными. Также внутри контейнера<strong> &lt;head&gt;</strong> находятся метатеги, которые используются для хранения информации предназначенной для браузеров и поисковых систем. Например, механизмы поисковых систем обращаются к метатегам для получения описания сайта, ключевых слов и других данных.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;title&gt;&lt;/title&gt;</strong></td>\r\n			<td>Определяет заголовок документа. Элемент <strong>&lt;title&gt;</strong> не является частью документа и не показывается напрямую на веб-странице. В операционной системе Windows текст заголовка отображается в левом верхнем углу окна браузера (рис. 1). Допускается использовать только один тег <strong>&lt;title&gt;</strong> на документ и размещать его в контейнере <strong>&lt;head&gt;</strong>.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;body&gt;&lt;/body&gt;</strong></td>\r\n			<td>Элемент <strong>&lt;body&gt;</strong> предназначен для хранения содержания веб-страницы (контента), отображаемого в окне браузера. Информацию, которую следует выводить в документе, следует располагать именно внутри контейнера <strong>&lt;body&gt;</strong>. К такой информации относится текст, изображения, теги, скрипты JavaScript и т.д.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;p&gt;&lt;/p</strong>&gt;</td>\r\n			<td>\r\n			<p>Определяет текстовый абзац. Тег <strong>&lt;p&gt;</strong> является блочным элементом, всегда начинается с новой строки, абзацы текста идущие друг за другом разделяются между собой отбивкой. Величиной отбивки можно управлять с помощью стилей. Если закрывающего тега нет, считается, что конец абзаца совпадает с началом следующего блочного элемента.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;h№&gt;&lt;/h№&gt;</strong>, где № - цифра от 1 до 6</td>\r\n			<td>\r\n			<p>HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <strong>&lt;h1&gt;</strong> представляет собой наиболее важный заголовок первого уровня, а тег <strong>&lt;h6&gt;</strong> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <strong>&lt;h1&gt;</strong>,...,<strong>&lt;h6&gt;</strong> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;br&gt;</strong></td>\r\n			<td>Тег <strong>&lt;br&gt;</strong> устанавливает перевод строки в том месте, где этот тег находится. В отличие от тега абзаца <strong>&lt;p&gt;</strong>, использование тега <strong>&lt;br&gt;</strong> не добавляет пустой отступ перед строкой. Если текст, в котором используется перевод строки, обтекает плавающий элемент, то с помощью атрибута clear тега <strong>&lt;br&gt;</strong> можно сделать так, чтобы следующая строка начиналась ниже элемента.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;hr&gt;</strong></td>\r\n			<td>\r\n			<p>Рисует горизонтальную линию, которая по своему виду зависит от используемых параметров, а также браузера. Тег <strong>&lt;hr&gt;</strong> относится к блочным элементам, линия всегда начинается с новой строки, а после нее все элементы отображаются на следующей строке.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;b&gt;&lt;/b&gt;</strong></td>\r\n			<td>Устанавливает жирное начертание шрифта. Допустимо использовать этот тег совместно с другими тегами, которые определяют начертание текста.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;i&gt;&lt;/i&gt;</strong></td>\r\n			<td>Устанавливает курсивное начертание шрифта. Допустимо использовать этот тег совместно с другими тегами, которые определяют начертание текста.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;div&gt;&lt;/div&gt;</strong></td>\r\n			<td>\r\n			<p>Элемент <strong>&lt;div&gt;</strong> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;ul&gt;&lt;li&gt;&lt;/ul&gt;</strong></td>\r\n			<td>Тег <strong>&lt;ul&gt;</strong> устанавливает маркированный список. Каждый элемент списка должен начинаться с тега <strong>&lt;li&gt;</strong>. Если к тегу <strong>&lt;ul&gt;</strong> применяется таблица стилей, то элементы <strong>&lt;li&gt;</strong> наследуют эти свойства.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;ol&gt;&lt;li&gt;&lt;/ol&gt;</strong></td>\r\n			<td>\r\n			<p>Тег <strong>&lt;ol&gt;</strong> устанавливает нумерованный список. Каждый элемент списка должен начинаться с тега <strong>&lt;li&gt;</strong>. Если к тегу <strong>&lt;ol&gt;</strong> применяется таблица стилей, то элементы <strong>&lt;li&gt;</strong> наследуют эти свойства.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;table&gt;&lt;/table&gt;</strong></td>\r\n			<td>Элемент <strong>&lt;table&gt;</strong> служит контейнером для элементов, определяющих содержимое таблицы. Любая таблица состоит из строк и ячеек, которые задаются с помощью тегов <strong>&lt;tr&gt;</strong> и <strong>&lt;td&gt;</strong>. Внутри <strong>&lt;table&gt;</strong> допустимо использовать следующие элементы: <strong>&lt;caption&gt;</strong>, <strong>&lt;col&gt;</strong>, <strong>&lt;colgroup&gt;</strong>, <strong>&lt;tbody&gt;</strong>, <strong>&lt;td&gt;</strong>, <strong>&lt;tfoot&gt;</strong>, <strong>&lt;th&gt;</strong>, <strong>&lt;thead&gt; </strong>и <strong>&lt;tr&gt;</strong>.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Рассмотрим пример HTML-кода, результат выполнения которого можно посмотреть <a href="ex_html.html" onclick="window.open(this.href, '''', ''resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no''); return false;">здесь</a>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n   &lt;head&gt;\r\n      &lt;meta charset="utf-8" /&gt;\r\n      &lt;title&gt;HTML Document&lt;/title&gt;\r\n   &lt;/head&gt;\r\n   &lt;body&gt;\r\n      &lt;p&gt;\r\n         &lt;b&gt;\r\n            Этот текст будет полужирным, &lt;i&gt;а этот — ещё и курсивным&lt;/i&gt;.\r\n         &lt;/b&gt;\r\n      &lt;/p&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Конечно, данный список не является конечным: этот портал не ставит своей целью подробное описание спецификации языка HTML, а является лишь кратким обзором. Более того, практически каждый из приведенных выше тегов имеет атрибуты, которые разработчик может задавать, тем самым изменяя внешний вид и функционал страницы. Вот ссылки на книги и интернет-ресурсы, посвященные языку HTML:</p>\r\n\r\n<ul>\r\n	<li><strong><strong><a href="http://htmlbook.ru/" target="_blank">htmlbook.ru</a></strong></strong></li>\r\n	<li><strong><strong><a href="https://htmlbase.ru/" target="_blank">HTMLBASE</a></strong></strong></li>\r\n	<li><strong><strong><a href="https://html5book.ru/osnovy-html/" target="_blank">HTML5Book</a></strong></strong></li>\r\n	<li><strong><strong>Б. Лоусон, Р. Шарп. &mdash; Изучаем HTML 5.</strong></strong></li>\r\n	<li><strong><strong>П. Лабберс. &mdash; HTML 5 для профессионалов.</strong></strong></li>\r\n	<li><strong><strong>Ч. Муссиано, Б Кеннеди. &mdash; HTML &amp; XHTML. Подробное руководство.</strong></strong></li>\r\n	<li><strong><strong>Бен Хеник. &mdash; HTML и CSS Путь к совершенству.</strong></strong></li>\r\n	<li><strong><strong>Дронов. В.&nbsp;&mdash;&nbsp;HTML.5.CSS.3.и.Web 2.0.Разработка.современных.Web-сайтов.</strong></strong></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n'),
('xml', '<p><a href="image/diag.jpg" target="_blank"><img alt="" src="image/diag.jpg" style="float:right; height:263px; margin:15px; width:300px" /></a>Спецификация <strong>XML</strong> (Extensible Markup Language) была разработана в 1996 году Рабочей группой <a href="https://w3c.org.ru/index.html" target="_blank">консорциума Всемирной паутины</a> (World Wide Web Consortium (W3C)) и впоследствии предложена в качестве рекомендации. По своему замыслу технология XML должна обеспечить <em>отделение информации от разметки, что позволяет производить обработку, поиск и представление информации на более высоком технологическом уровне</em>. Отметим, что спецификация XML является основой для построения грамматики языков разметки, и лишь условно сам XML можно назвать языком разметки. Правильнее сказать, что XML, как и <strong><a href="gml.php">SGML</a></strong>, не является языком; он также представляет собой набор рекомендаций, на базе которых создаются другие языки. Точнее говоря, XML является подмножеством языка SGML и представляет из себя конгломерат&nbsp;из трех отдельных спецификаций:</p>\r\n\r\n<p>1. <strong>XML </strong>(Extensible Markup Language) &mdash; спецификация, определяющая базовый синтаксис XML;</p>\r\n\r\n<p>2. <strong>XSL </strong>(Extensible Style Language) &mdash; спецификация, направленная на отделение визуального оформления страницы от ее содержимого за счет применения к документу стилей (style sheets), определяющих конкретные атрибуты форматирования;</p>\r\n\r\n<p>3. <strong>XLL </strong>(Extensible Linking Language) &mdash; спецификация, определяющая представление ссылок на другие ресурсы.</p>\r\n\r\n<p><a href="image/xml_1.png" target="_blank"><img alt="" src="image/xml_1.png" style="float:left; height:342px; margin:15px; width:300px" /></a>На основе этой технологии обработка, поиск и представление информации переходят на совершенно иной уровень. Первоначальный веб был ориентирован на работу человека, но веб следующего поколения (семантический веб) должен в значительной мере опираться на <em>машинную обработку информации</em>, стандарту XML при этом отводится роль одной из ключевых технологий. Синтаксис XML построен на основе тегов, но в отличие от HTML, в котором множество тегов фиксировано, в рамках XML <em>пользователь создает собственное множество тегов и задает структурные отношения между ними</em>.</p>\r\n\r\n<p>В настоящее время создано большое число языков разметки, являющихся подмножествами XML, как пример укажем язык беспроводной разметки <strong>WML</strong> (Wireless Markup Language ), программная поддержка которого встроена во все мобильные телефоны и коммуникационные устройства, заявленные как WAP&ndash;совместимые.&nbsp;&nbsp;</p>\r\n\r\n<h2><strong>Правильно построенные XML-документы</strong></h2>\r\n\r\n<p>При создании документов необходимо учитывать правила, основная задача которых &ndash; в отделении данных и формата. Эти правила определены в рекомендации консорциума W3C и состоят из следующих требований:</p>\r\n\r\n<ul>\r\n	<li>документы XML должны начинаться с объявления XML, в котором определяется версия XML, например, <!--?xml version=”1.0”-->(это объявление является инструкцией приложению, обрабатывающему документ, в частности, браузеру);</li>\r\n	<li>любому открывающему тегу должен соответствовать закрывающий тег;</li>\r\n	<li>в XML учитывается регистр символов;</li>\r\n	<li>значения атрибутов, используемых в определении тегов, должны заключаться в кавычки;</li>\r\n	<li>в любом XML-документе должен содержаться один корневой элемент для всего документа;</li>\r\n	<li>элементы не должны перекрываться;</li>\r\n	<li>вся информация, размещенная между открывающим и закрывающим тегами, рассматривается как данные, при этом учитываются все символы форматирования (пробелы, конец строки, табуляция);</li>\r\n	<li>в XML имеются зарезервированные символы, которые используются как элементы синтаксиса;</li>\r\n	<li>в тексте эти символы нужно заменять последовательностями других символов, называемых объектами (entities; в русскоязычной литературе часто используют термин сущности).<a href="image/xml_2.jpg" target="_blank"><img alt="" src="image/xml_2.jpg" style="float:right; height:381px; margin:15px; width:300px" /></a></li>\r\n</ul>\r\n\r\n<p><strong>Зарезервированные символы и объекты</strong></p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p><strong>Зарезервированный</strong></p>\r\n\r\n			<p><strong>символ</strong></p>\r\n			</td>\r\n			<td style="text-align:center"><strong>Объект</strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>&lt;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>&gt;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>&amp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&quot;</td>\r\n			<td>&quot;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&#39;</td>\r\n			<td>&amp;apos</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>Если перечисленные правила выполнены, то говорят, что документ правильно построен (well-formed), и только в этом случае он является документом XML.</strong> Такой документ будет правильно отображен в браузере, в ином случае будет выдано сообщение об ошибке. Для обработки документов XML используется программный модуль, называемый <em>XML-процессором.</em> Поддержка XML браузером зависит от того, включен ли в него XML-процессор и какие возможности этот процессор имеет. Например, браузеры Mozilla и Firefox поддерживают почти все технологии, основанные на XML.<!--?xml version="1.0" encoding="windows-1251" standalone="yes"?--><!-- XML вЂ“ РїСЂРёРјРµСЂ --></p>\r\n\r\n<p>Рассмотрим небольшой пример: простейшее описание электронного журнала. Данный&nbsp;можно набрать в любом текстовом редакторе. При просмотре этого файла в каком-либо браузере будет выведено представление XML-документа в виде дерева (посмотреть можно <a href="ex_xml.xml" onclick="window.open(this.href, '''', ''resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no''); return false;">здесь</a>).</p>\r\n\r\n<pre>\r\n<code>&lt;?xml version="1.0" encoding="windows-1251" standalone="yes"?&gt;\r\n&lt;!-- XML пример --&gt;\r\n&lt;journal&gt;\r\n&lt;title&gt;Lobachevsky&amp;apos;Journal&lt;/title&gt;\r\n9\r\n&lt;contacts&gt;\r\n&lt;address&gt;Kazan State University&lt;/address&gt;\r\n&lt;url&gt;ljm.ksu.ru&lt;/url&gt;\r\n&lt;/contacts&gt;\r\n&lt;articles&gt;\r\n&lt;article ID="1"&gt;\r\n&lt;title&gt;MathML and TeX&lt;/title&gt;\r\n&lt;author&gt;M. Malakhaltsev&lt;/author&gt;\r\n&lt;/article&gt;\r\n&lt;article ID="2"&gt;\r\n&lt;title&gt;MathML and RDF&lt;/title&gt;\r\n&lt;author&gt;E. Lipachev&lt;/author&gt;\r\n&lt;/article&gt;\r\n&lt;/articles&gt;\r\n&lt;/journal&gt;</code></pre>\r\n\r\n<p>Все документы XML начинаются с <strong>пролога,</strong> в котором сообщается, что документ написан на XML, а также указывает, какая версия XML при этом использовалась. Атрибут <strong>version</strong> является обязательным и указывает на версию XML, применяемую для структурирования. Например, стандартный XML-файл начинается строкой:</p>\r\n\r\n<pre>\r\n<code>&lt;?xml version="1.0"?&gt;</code></pre>\r\n\r\n<p>Получая документ, версию которого он не поддерживает, XML-процессор должен выдать соответствующие сообщения. Пролог может содержать другие инструкции. Например, объявление можно расширить, указав, что документ является автономным:</p>\r\n\r\n<pre>\r\n<code>&lt;?xml version="1.0" standalone="yes"?&gt;</code></pre>\r\n\r\n<p>Присваивание yes атрибуту <strong>standalone</strong> сообщает механизму обработки XML-кода о том, что документ не импортирует других файлов (например, <a href="dtd.php">DTD</a>). Атрибут <strong>encoding</strong> определяет кодировку документа, и его желательно указывать. Например, если документ содержит символы в одной из кодировок кириллицы (к примеру, CP1251, KOI8-R, CP866, UTF-8), в отсутствие этого атрибута XML-процессор выдаст сообщение об ошибке и прекратит обработку. Во второй строке показано, как добавить комментарии, &ndash; правила те же, что и в HTML.</p>\r\n\r\n<p>В последующих строках объявлены элементы. Элемент состоит из открывающего и закрывающего тегов, а также данных между этими тегами. Пустой элемент, например <strong>&lt;br&gt;&lt;/br&gt;</strong>, может записываться в виде <strong>&lt;br/&gt;</strong>. Имена не могут содержать пробелы, кроме того, имеет значение регистр символов. Одни элементы могут быть вложены в другие, как, например, элемент <strong>&lt;author&gt;&lt;/author&gt;</strong> из приведенного примера вложен в элемент <strong>&lt;article&gt;&lt;/article&gt;</strong>, который в свою очередь вложен в элемент <strong>&lt;articles&gt;&lt;/articles&gt;</strong>.&nbsp;Непустые элементы должны содержать как открывающий, так и закрывающий тег. В элементах, которые логически не могут иметь закрывающего тега, используется альтернативная форма синтаксиса <strong>&lt;элемент/&gt;</strong>. Один из элементов документа должен содержать все остальные, этот элемент называют корневым элементом или элементом документа. В нашем примере таким элементом является <strong>&lt;journal&gt;&lt;/journal&gt;</strong>. Таким образом, элементы документа должны образовывать древовидную структуру.</p>\r\n\r\n<p><strong>Теги XML могут обладать атрибутами</strong>. Атрибуты содержат дополнительную информацию о содержании, которая в дальнейшем используется при форматировании или обработке XML. Значения атрибутов присваиваются в формате &laquo;имя=значение&raquo;, атрибуты XML должны быть заключены в апострофы или кавычки. В приведенном примере элемент <strong>&lt;article&gt;&lt;/article&gt;</strong> содержит атрибут <strong>ID</strong>, с помощью которого каждой статье присваивается числовой идентификатор.</p>\r\n\r\n<p>Вот ссылки на некоторые учебные пособия по языку XML:</p>\r\n\r\n<ul>\r\n	<li>Шеперд Д. - Освой самостоятельно XML за 21 день;</li>\r\n	<li>Маршал Б. -&nbsp;XML в действии;</li>\r\n	<li>Штайнер Гюнтер&nbsp;-&nbsp;HTML/XML/CSS справочник;</li>\r\n	<li>Мартин Д. и др.&nbsp;-&nbsp;XML для профессионалов;</li>\r\n	<li><a href="https://myrusakov.ru/xml.html" target="_blank">&lt;MyRusakov.ru&gt;</a>.</li>\r\n</ul>\r\n');
INSERT INTO `content` (`id`, `text`) VALUES
('html5', '<p><a href="image/html5.png" target="_blank"><img alt="" src="image/html5.png" style="float:right; height:300px; margin:15px; width:300px" /></a>&nbsp;<strong>HTML5 </strong>(англ. HyperText Markup Language, version 5) &mdash; язык для структурирования и представления содержимого всемирной паутины. Это пятая версия <a href="html.php">HTML</a>. Хотя стандарт был завершён (рекомендованная версия к использованию) только в 2014 году,&nbsp;уже с 2013 года&nbsp;браузерами оперативно осуществлялась поддержка, а разработчиками &mdash; использование рабочего стандарта (англ. HTML Living Standard). Цель разработки HTML5 &mdash; улучшение уровня поддержки мультимедиа-технологий с одновременным сохранением обратной совместимости, удобочитаемости кода для человека и простоты анализа для парсеров.</p>\r\n\r\n<p>Во всемирной паутине долгое время использовались стандарты HTML 4.01, <a href="xhtml.php">XHTML </a>1.0 и XHTML 1.1. Веб-страницы на практике оказывались свёрстаны с использованием смеси особенностей, представленных различными спецификациями, включая спецификации программных продуктов, например веб-браузеров, а также сложившихся общеупотребительных приёмов. HTML5 был создан как единый язык разметки, который мог бы сочетать синтаксические нормы HTML и XHTML. <em>Он расширяет, улучшает и рационализирует разметку документов.</em></p>\r\n\r\n<p>В HTML5 реализовано множество новых синтаксических особенностей. Например, элементы <strong>&lt;video&gt;</strong>, <strong>&lt;audio&gt;</strong> и <strong>&lt;canvas&gt;</strong>, а также возможность использования <strong>SVG</strong> и математических формул. Эти новшества разработаны для упрощения создания и управления графическими и мультимедийными объектами в сети без необходимости использования сторонних API и плагинов. Другие новые элементы, такие как <strong>&lt;section&gt;</strong>, <strong>&lt;article&gt;</strong>,<strong> &lt;header&gt;</strong> и <strong>&lt;nav&gt;</strong>, разработаны для того, чтобы обогащать семантическое содержимое документа (страницы). Новые атрибуты были введены с той же целью, хотя ряд элементов и атрибутов был удалён. Некоторые элементы, например <strong>&lt;a&gt;</strong>, <strong>&lt;menu&gt;</strong> и <strong>&lt;cite&gt;</strong>, были изменены, переопределены или стандартизированы. Спецификация языка сформулирована в терминах <strong>DOM</strong>.</p>\r\n\r\n<p><strong><a id="DOM" name="DOM"></a><a href="image/dom.png" target="_blank"><img alt="" src="image/dom.png" style="float:right; height:293px; margin:15px; width:220px" /></a>DOM</strong> (от англ. Document Object Model &mdash; &laquo;объектная модель документа&raquo;) &mdash; это независящий от платформы и языка программный интерфейс, позволяющий программам и скриптам получить доступ к содержимому HTML-, XHTML- и XML-документов, а также изменять содержимое, структуру и оформление таких документов.</p>\r\n\r\n<p><em>Модель DOM не накладывает ограничений на структуру документа</em>. Любой документ известной структуры с помощью DOM может быть представлен в виде дерева узлов, каждый узел которого представляет собой элемент, атрибут, текстовый, графический или любой другой объект. Узлы связаны между собой отношениями &laquo;родительский-дочерний&raquo;. На рисунке представлен пример иерархии DOM.</p>\r\n\r\n<p>Изначально различные браузеры имели собственные модели документов (DOM), несовместимые с остальными. Для обеспечения взаимной и обратной совместимости специалисты международного консорциума W3C классифицировали эту модель по уровням, для каждого из которых была создана своя спецификация. Все эти спецификации объединены в общую группу, носящую название W3C DOM.</p>\r\n\r\n<h2><strong>Разметка</strong></h2>\r\n\r\n<p>HTML5&nbsp;вводит несколько новых элементов и атрибутов, которые отражают типичное использование разметки на современных веб-сайтах. Некоторые из них &mdash; семантические замены для использования универсальных блочных (<strong>&lt;div&gt;</strong>) и строчных (<strong>&lt;span&gt;</strong>) элементов, например, <strong>&lt;nav&gt;</strong> (блок навигации по сайту), <strong>&lt;footer&gt;</strong> (обычно относится к нижней части страницы или последней строке HTML кода) или <strong>&lt;audio&gt;</strong> и <strong>&lt;video&gt;</strong> вместо <strong>&lt;object&gt;</strong>. Некоторые устаревшие элементы, которые можно было использовать в HTML 4.01, были исключены, включая чисто оформительские элементы, такие как <strong>&lt;font&gt;</strong> и <strong>&lt;center&gt;</strong>, чьи эффекты выполняются с помощью каскадных таблиц стилей. Также в поведении гипертекстовых страниц снова заострено внимание на важности скриптов DOM (например, <strong>Javascript</strong>).</p>\r\n\r\n<p>Синтаксис HTML5 больше не базируется на SGML, несмотря на подобие его разметки. Однако он был разработан обратно совместимым с обычным парсингом более старых версий HTML. В HTML5 применяется новая вводная строка, которая выглядит как объявление типа документа в SGML, &lt;!DOCTYPE html&gt;, запускающая соответствующий стандартам режим визуализации.</p>\r\n\r\n<h2><strong>Новые API</strong></h2>\r\n\r\n<p><strong>API </strong>(программный интерфейс приложения, интерфейс прикладного программирования) (англ. application programming interface) &mdash; описание способов (набор классов, процедур, функций, структур или констант.</p>\r\n\r\n<p>Возможности DOM в HTML5&nbsp;расширены и фактически используемые свойства задокументированы. Также добавлены новые API, которыми одна компьютерная программа может взаимодействовать с другой программой), например:</p>\r\n\r\n<ul>\r\n	<li>элемент холст (<strong>canvas</strong>) для непосредственного метода рисования в 2D;</li>\r\n	<li>контроль над проигрыванием медиафайлов, который может использоваться, например, для синхронизации субтитров с видео;</li>\r\n	<li>хранение данных в браузере;</li>\r\n	<li>File API: возможность загрузки документа через выбор (тег <strong>&lt;input type=&quot;file&quot;&gt;</strong>) или перетаскиванием (Drag-and-drop);</li>\r\n	<li>Drag-and-drop: предоставляет набор событий для каждого элемента DOM, таких как появление и нахождение в его зоне, благодаря которым разработчик может информировать пользователя о необходимых действиях и идентификаторе перетаскиваемого файла, содержащего адрес, имя, тип, размер и дату изменения;</li>\r\n	<li>управление историей браузера;</li>\r\n	<li>и другие.</li>\r\n</ul>\r\n\r\n<p>Рассмотрим пример кода на HTML5, результат выполнения которого можно посмотреть <a href="ex_html5.html" onclick="window.open(this.href, '''', ''resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no''); return false;">здесь</a>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n   &lt;head&gt;\r\n      &lt;meta charset="utf-8"&gt;\r\n      &lt;title&gt;\r\n         (Это title) Пример страницы на HTML5\r\n      &lt;/title&gt;\r\n   &lt;/head&gt;\r\n   &lt;body&gt;\r\n      &lt;header&gt;\r\n         &lt;hgroup&gt;\r\n            &lt;h1&gt;\r\n               Заголовок "h1" из hgroup\r\n            &lt;/h1&gt;\r\n            &lt;h2&gt;\r\n               Заголовок "h2" из hgroup\r\n            &lt;/h2&gt;\r\n         &lt;/hgroup&gt;\r\n      &lt;/header&gt;\r\n      &lt;nav&gt;\r\n         &lt;menu&gt;\r\n            &lt;li&gt;\r\n               &lt;a href="link1.html"&gt;\r\n                  Первая ссылка из блока "nav"\r\n               &lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li&gt;\r\n               &lt;a href="link2.html"&gt;\r\n                  Вторая ссылка из блока "nav"\r\n               &lt;/a&gt;\r\n            &lt;/li&gt;\r\n         &lt;/menu&gt;\r\n      &lt;/nav&gt;\r\n      &lt;section&gt;\r\n         &lt;article&gt;\r\n            &lt;h1&gt;\r\n               Заголовок статьи из блока "article"\r\n            &lt;/h1&gt;\r\n            &lt;p&gt;\r\n               Текст абзаца статьи из блока "article"\r\n            &lt;/p&gt;\r\n            &lt;details&gt;\r\n               &lt;summary&gt;\r\n                  Блок "details", текст тега "summary"\r\n               &lt;/summary&gt;\r\n               &lt;p&gt;\r\n                  Абзац из блока "details"\r\n               &lt;/p&gt;\r\n            &lt;/details&gt;\r\n         &lt;/article&gt;\r\n      &lt;/section&gt;\r\n      &lt;footer&gt;\r\n         &lt;time&gt;\r\n            Содержимое тега "time" блока "footer"\r\n         &lt;/time&gt;\r\n         &lt;p&gt;\r\n            Содержимое абзаца из блока "footer"\r\n         &lt;/p&gt;\r\n      &lt;/footer&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Предполагается, что читатель уже знаком с языком HTML, поэтому изучение данного кода не должно вызвать затруднений. Поясним лишь некоторые теги:</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:1000px">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">Тег</th>\r\n			<th scope="col">Описание</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td><strong>&lt;hgroup&gt;&lt;/hgroup&gt;</strong></td>\r\n			<td>Используется для группирования заголовков веб-страницы или раздела. Внутри располагаются теги заголовков от&nbsp;<strong>&lt;h1&gt;</strong>&nbsp;до&nbsp;<strong>&lt;h6&gt;</strong>. Данный тег исключён из версии HTML от W3C, но остался в версии WHATWG, будущее элемента пока не определено.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;header&gt;&lt;/header&gt;</strong></td>\r\n			<td>Тег&nbsp;&lt;header&gt;&nbsp;задает &laquo;шапку&raquo; сайта или раздела, в которой обычно располагается заголовок.Тег&nbsp;<strong>&lt;header&gt;</strong>&nbsp;задает &laquo;шапку&raquo; сайта или раздела, в которой обычно располагается заголовок.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;nav&gt;&lt;/nav&gt;</strong></td>\r\n			<td>Тег&nbsp;<strong>&lt;nav&gt;</strong>&nbsp;задает навигацию по сайту. Если на странице несколько блоков ссылок, то в&nbsp;<strong>&lt;nav&gt;</strong>&nbsp;обычно помещают приоритетные ссылки. Также допустимо использовать несколько тегов<strong>&nbsp;&lt;nav&gt;</strong>&nbsp;в документе. Запрещается вкладывать&nbsp;<strong>&lt;nav&gt;</strong>&nbsp;внутрь&nbsp;<strong>&lt;address&gt;</strong>.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;menu&gt;&lt;/menu&gt;</strong></td>\r\n			<td>Тег&nbsp;<strong>&lt;menu&gt;</strong>&nbsp;предназначен для отображения списка пунктов меню. Аналогично тегам&nbsp;<strong>&lt;ol&gt;</strong>&nbsp;и&nbsp;<strong>&lt;ul&gt;</strong>&nbsp;внутри контейнера&nbsp;<strong>&lt;menu&gt;</strong>&nbsp;список формируется с помощью тегов&nbsp;<strong>&lt;li&gt;</strong>.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;section&gt;&lt;/section&gt;</strong></td>\r\n			<td>Задаёт раздел документа, может применяться для блока новостей, контактной информации, глав текста, вкладок в диалоговом окне и др. Раздел обычно содержит заголовок. Допускается вкладывать один тег&nbsp;<strong>&lt;section&gt;</strong>&nbsp;внутрь другого.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;article&gt;&lt;/article&gt;</strong></td>\r\n			<td>Тег&nbsp;<strong>&lt;article&gt;</strong>&nbsp;задает содержание сайта вроде новости, статьи, записи блога, форума или др.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;details&gt;&lt;/details&gt;</strong></td>\r\n			<td>Тег&nbsp;<strong>&lt;details&gt;</strong>&nbsp;используется для хранения информации, которую можно скрыть или показать по требованию пользователя. По умолчанию содержимое тега не отображается, для изменения статуса применяется атрибут&nbsp;open.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;summary&gt;&lt;/summary&gt;</strong></td>\r\n			<td>Указывает заголовок для тега&nbsp;<strong>&lt;details&gt;</strong>, по которому можно щелкать для разворачивания/сворачивания информации. Тег&nbsp;<strong>&lt;summary&gt;</strong>&nbsp;должен идти первым внутри&nbsp;<strong>&lt;details&gt;</strong>.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;footer&gt;&lt;/footer&gt;</strong></td>\r\n			<td>Тег&nbsp;<strong>&lt;footer&gt;</strong>&nbsp;задаёт &laquo;подвал&raquo; сайта или раздела, в нём может располагаться имя автора, дата документа, контактная и правовая информация.</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>&lt;time&gt;&lt;/time&gt;</strong></td>\r\n			<td>Помечает текст внутри тега&nbsp;<strong>&lt;time&gt;</strong>&nbsp;как дата, время или оба значения. Может указываться непосредственно внутри контейнера&nbsp;<strong>&lt;time&gt;</strong>, либо задаваться через атрибут&nbsp;datetime.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n'),
('gml', '<p><strong><a href="image/sgml.png" target="_blank"><img alt="" src="image/sgml.png" style="float:right; height:455px; margin:15px; width:400px" /></a>GML&nbsp;</strong>(англ.&nbsp;<strong>Generalized Markup Language&nbsp;</strong>&mdash; обобщённый язык разметки) представляет собой набор&nbsp;макросов, основной целью которых является реализация разметки текста на IBM, используя процедурную разметку SCRIPT. SCRIPT/VS &mdash; это основной компонент DCF (англ. Document Composition Facility &mdash; оборудование для составления документов) в IBM. Стартовый набор тегов в GML поставляется с продуктом DCF.</p>\r\n\r\n<p>GML стал одним из первых созданных языков разметки. Он был разработан в конце 1960-х годов тремя научными сотрудниками американской <a href="https://www.ibm.com/ru-ru" target="_blank">компании IBM</a>:&nbsp;Чарльзом Голдфарбом, Эдвардом Мошером и Рэймондом Лори. Название языка выбрано отчасти потому, что аббревиатуру GML образуют первые буквы фамилий разработчиков.</p>\r\n\r\n<p>Создателями языка были сформулированы <strong>три основных принципа языка разметки GML</strong>:</p>\r\n\r\n<ol>\r\n	<li>\r\n	<p><strong>Использование единых принципов форматирования</strong> во всех программах, выполняющих обработку документов. Наличие единого набора синтаксических конструкций и общей семантики заметно упрощает взаимодействие между программами.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Специализация языков форматирования</strong>. Благодаря возможности построения специализированного языка на базе набора стандартных правил программист перестает зависеть от внешних реализаций и их представлений о потребностях конечного пользователя</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Четкое определение формата документа</strong>. Правила, определяющие формат документа, задают количество и маркировку языковых конструкций, используемых в документе. Применение стандартного формата гарантирует, что пользователь будет точно знать структуру содержимого документа. Обратите внимание: речь идет не о формате отображения документа, а о его структурном формате. Набор правил, описывающих этот формат, называется &laquo;определением типа документа&raquo; (document type definition, <a href="dtd.php">DTD</a>).</p>\r\n	</li>\r\n</ol>\r\n\r\n<p>GML поддерживает редактирование и форматирование текстов, позволяет подсистемам извлечения информации обмениваться документами. В то же время вместо простой схемы разметки GML представляет концепцию формально определенных типов документов, содержащих строгую иерархию структурированных элементов. До 90% всех документов компании IBM созданы с использованием этого языка разметки.</p>\r\n\r\n<p>При использовании GML документ помечается тегами, которые определяют, чем является текст с точки зрения параграфов, заголовков, списков, таблиц. Такой документ может быть автоматически отформатирован для различных устройств, остается только указать разновидность устройства. Например, можно форматировать документ для лазерного принтера или матричного или просто вывести на экран, всего лишь указав профиль оборудования, без изменения самого документа.</p>\r\n\r\n<p>Рассмотрим пример GML-кода:<code> </code></p>\r\n\r\n<pre>\r\n<code>:h1.Chapter 1:  Introduction\r\n:p.GML supported hierarchical containers, such as\r\n:ol\r\n:li.Ordered lists (like this one),\r\n:li.Unordered lists, and\r\n:li.Definition lists\r\n:eol.\r\nas well as simple structures.\r\n:p.Markup minimization (later generalized and formalized in SGML),\r\nallowed the end-tags to be omitted for the "h1" and "p" elements.</code></pre>\r\n\r\n<p>Любой человек, так или иначе знакомый с популярным языком разметки <a href="html.php">HTML</a>, способен без труда определить смысл использованных в этом коде тэгов: <strong>:h1</strong>, <strong>:p</strong>, <strong>:ol</strong>, <strong>:li</strong>. Примерный результат выполнения данного кода можно посмотреть <a href="ex_gml.html" onclick="window.open(this.href, '''', ''resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no''); return false;">здесь</a>.</p>\r\n\r\n<p><a href="image/diag.jpg" target="_blank"><img alt="" src="image/diag.jpg" style="float:right; height:263px; margin:15px; width:300px" /></a>Исследования и разработка GML продолжались около десяти лет, пока в результате соглашения, заключенного международной группой разработчиков, не появился стандарт&nbsp;<strong>SGML</strong>&nbsp;(англ.&nbsp;Standard Generalized Markup Language&nbsp;&mdash; стандартный обобщённый язык разметки), который является <a href="https://www.iso.org/ru/home.html" target="_blank">ISO</a>-стандартом технологии для определения обобщенного языка разметки для документов.</p>\r\n\r\n<p><strong><a id="SGML" name="SGML"></a>SGML </strong>- это метаязык для создания других языков разметки документов.&nbsp;Тем не менее, он был мало известен до 1990 года, когда Тим Бернерc-Ли, автор идеи World Wide Web, создал Hypertext Markup Language, который является подмножеством SGML. Вскоре после этого все виды документов и данных в начале и в конце каждого текстового элемента стали содержать теги в стиле &lt;тег&gt;. В конце 1990-х годов появился Extensible Markup Language (<a href="xml.php"><strong>XML</strong></a>)... и вселенная ИТ необратимо изменилась.</p>\r\n\r\n<p>Язык разметки, определяемый с помощью SGML (приложение SGML), состоит из SGML-декларации, определения типа документа (Document Type Definition, DTD) и семантического описания, дополняющего определение типа документа. В SGML-декларации указывается, какие символы и разделители могут отображаться в данном типе документов. Термин DTD, если вы работали с XML, должен быть вам знаком. Определение типа документа содержит в себе описание синтаксиса языка разметки.</p>\r\n'),
('xhtml', '<p><strong><a href="image/diag.jpg" target="_blank"><img alt="" src="image/diag.jpg" style="float:right; height:263px; margin:15px; width:300px" /></a>XHTML</strong> (англ. Extensible Hypertext Markup Language &mdash; расширяемый язык гипертекстовой разметки) &mdash; семейство языков разметки веб-страниц на основе <a href="xml.php">XML</a>, повторяющих и расширяющих возможности <a href="html.php">HTML</a> 4. Спецификации XHTML 1.0 и XHTML 1.1 являются рекомендациями <a href="https://w3c.org.ru/index.html" target="_blank">консорциума Всемирной паутины</a>. Развитие XHTML остановлено; новые версии XHTML не выпускаются.<br />\r\n<em>Главное отличие XHTML от HTML заключается в обработке документа</em>. Документы XHTML обрабатываются своим модулем (парсером) аналогично документам XML. В процессе этой обработки ошибки, допущенные разработчиками, не исправляются. Если HTML &quot;закрывает глаза&quot; на мелкие огрехи разработчика, то XHTML будет выдавать сообщение о том, что документ неверно сформирован до тех пор, пока разработчик не исправит все ошибки и недочеты.</p>\r\n\r\n<p>XHTML соответствует спецификации SGML, поскольку XML является его подмножеством. HTML же, в свою очередь, обладает множеством особенностей в процессе обработки и фактически перестал относиться к семейству SGML, что и закреплено в спецификации HTML 5 (она сформулирована в терминах DOM).</p>\r\n\r\n<p>Согласно синтаксису XHTML:</p>\r\n\r\n<ul>\r\n	<li>все элементы должны быть закрыты. Теги, которые не имеют закрывающего тега (например, <strong>&lt;img&gt;</strong> или <strong>&lt;br&gt;</strong>), должны иметь на конце / (например, <strong>&lt;br /&gt;</strong>);</li>\r\n	<li>логические атрибуты записываются в развёрнутой форме. Например, следует писать <strong>&lt;option selected=&quot;selected&quot;&gt;</strong> или <strong>&lt;td nowrap=&quot;nowrap&quot;&gt;</strong>;</li>\r\n	<li>имена тегов и атрибутов должны быть записаны строчными буквами (например, <strong>&lt;img alt=&quot;&quot; /&gt;</strong> вместо &lt;IMG ALT=&quot;&quot; /&gt;);</li>\r\n	<li>XHTML гораздо строже относится к ошибкам в коде; По рекомендации консорциума Всемирной паутины браузеры, встретив ошибку в XHTML, должны сообщить о ней и не обрабатывать документ. Для HTML браузеры должны были попытаться понять, что хотел сказать автор.</li>\r\n	<li>&lt; и &amp; везде, даже в URL, должны замещаться <strong>&amp;lt; </strong>и <strong>&amp;amp;</strong> соответственно. ;</li>\r\n	<li>кодировкой по умолчанию является <strong>UTF-8</strong> (в отличие от HTML, где кодировкой по умолчанию является ISO 8859-1).</li>\r\n</ul>\r\n\r\n<p><a href="image/xhtml_1.png" target="_blank"><img alt="" src="image/xhtml_1.png" style="float:right; height:304px; margin:15px; width:267px" /></a>Существует три типа документов XHTML: <strong>strict</strong>, <strong>transitional </strong>и <strong>frameset</strong>. Наиболее употребительной и универсальной из версий XHTML является <strong>переходная </strong>(англ. transitional), поскольку она позволяет использовать <strong>iframe </strong>(включение содержимого одной веб-страницы в другую) и атрибут <strong>target </strong>у ссылок (для указания того, например, что ссылке необходимо открываться в новом окне). <strong>Фреймовая </strong>версия (англ. frameset) представляет собой расширенный вариант transitional и добавляет к нему, как следует из названия, возможность установки <strong>frameset </strong>вместо <strong>body</strong>. <strong>DTD </strong>(англ. document type definition -&nbsp;определение типа документа) <strong>строгой </strong>версии XHTML (англ. strict) не содержит многих тегов и атрибутов, описанных в DTD transitional и признанных устаревшими.</p>\r\n\r\n<p>Валидным (то есть отвечающим всем правилам) XHTML-документом считается документ, удовлетворяющий спецификации. В идеале все браузеры должны следовать веб-стандартам и, в соответствии с ними, валидные документы должны отображаться во всех браузерах на всех платформах. Валидация XHTML-документа рекомендована даже несмотря на то, что она не гарантирует кросс-браузерности. Соответствие документа спецификации может быть проверено на сайте <a href="http://validator.w3.org/" target="_blank">validator.w3.org</a>. При валидации будут обнаружены ошибки в XHTML-разметке; валидатор разъяснит суть ошибок.</p>\r\n\r\n<p><strong>Самыми распространёнными ошибками в XHTML-разметке являются</strong>:</p>\r\n\r\n<ul>\r\n	<li>незакрытые элементы (XHTML, в отличие от HTML, требует закрытия всех элементов, в том числе не имеющих закрывающего тега, как, например, <strong>&lt;br /&gt;</strong>);</li>\r\n	<li>отсутствие альтернативных текстов для изображений (достигающихся применением атрибута alt, который помогает сделать документы доступнее для устройств, которые не в состоянии отображать изображения, или предназначенных для слабовидящих людей);</li>\r\n	<li>присутствие текста непосредственно в теге <strong>&lt;body&gt;</strong> документа (должен быть объявлен блочный элемент, внутрь которого следует помещать содержимое);</li>\r\n	<li>вложение блочных элементов внутрь внутристрочных (inline) (например, блочные элементы <strong>&lt;div&gt;</strong> или <strong>&lt;p&gt;</strong> не могут быть вложены внутрь инлайновых элементов &lt;a&gt;, &lt;span&gt;, &lt;em&gt; и так далее);</li>\r\n	<li>пренебрежение заключением значений атрибутов в кавычки (&lt;a href=http://example.com/&gt; вместо &lt;a href=&quot;http://example.com/&quot;&gt;);</li>\r\n	<li>неправильное вложение элементов (конструкции вида <strong>&lt;strong&gt;&lt;em&gt; &lt;/strong&gt;&lt;/em&gt;</strong>);</li>\r\n	<li>неправильное использование ссылок-мнемоник (например, &amp; вместо <strong>&amp;amp;</strong>);</li>\r\n	<li>написание тегов и/или атрибутов прописными буквами вместо строчных (&lt;DIV STYLE=&quot;&hellip;&quot;&gt; вместо <strong>&lt;div style=&quot;...&quot;&gt;</strong>);</li>\r\n	<li>задание в теге <strong>&lt;!DOCTYPE &hellip;&gt;</strong> относительного пути к DTD-файлу (&quot;DTD/xhtml11.dtd&quot; вместо &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;).</li>\r\n</ul>\r\n\r\n<p>Этот список не полный и содержит самые частодопускаемые ошибки при составлении XHTML-документов.</p>\r\n\r\n<p>Рассмотрим пример верстки страницы на языке XHTML (результат исполнения можно посмотреть&nbsp;<a href="ex_xhtml.xhtml" onclick="window.open(this.href, '''', ''resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no''); return false;">здесь</a>):</p>\r\n\r\n<pre>\r\n<code class="language-xhtml">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\r\n&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv="Content-Type" content="text/html; charset=windows-1251" /&gt;\r\n&lt;title&gt;XHTML верстка&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body style="background-color:#ffffcc; color:#008800"&gt;\r\n&lt;br /&gt;\r\n&lt;h2 align="center"&gt;Пробная XHTML страничка&lt;/h2&gt;\r\n&lt;br /&gt;\r\n&lt;div align="center"&gt;\r\n&lt;img src="/image/xhtml_1.png" width="400" height="250" alt="XHTML" vspace="20" /&gt;\r\n&lt;/div&gt;\r\n&lt;p align="center" style="font-size:17px"&gt;Среди полей и диких трав,&lt;br /&gt;\r\nЖужжа на встречу ветру,&lt;br /&gt;\r\nОна летит, свой дикий нрав&lt;br /&gt;\r\nВплетая в песню лета.&lt;/p&gt;\r\n&lt;p align="center"&gt;&lt;em&gt;Эргэл&lt;/em&gt;&lt;/p&gt;\r\n&lt;br /&gt;\r\n&lt;hr /&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>В самом начале данного кода мы видим тег&nbsp;<strong>&lt;!DOCTYPE&gt;&nbsp;</strong>- это как раз и есть определение типа документа (<a href="dtd.php">DTD</a>).</p>\r\n'),
('dtd', '<p><strong><a href="image/dtd.jpg" target="_blank"><img alt="" src="image/dtd.jpg" style="float:right; height:450px; margin:15px; width:450px" /></a>DTD </strong>(англ. Document Type Definition &mdash; определение типа документа) &mdash; включает в себя два понятия:</p>\r\n\r\n<ul>\r\n	<li>Термин, который используется для описания схемы документа или его части языком схем DTD;</li>\r\n	<li>Язык схем DTD (DTD schema language) &mdash; компьютерный язык, который используется для записи фактических синтаксических правил метаязыков разметки текста SGML и XML. С момента его внедрения другие языки схем для спецификаций, такие как XML Schema и RELAX NG, выпускаются с дополнительной функциональностью.</li>\r\n</ul>\r\n\r\n<p><em>Из-за определённых различий между <a href="xml.php">XML</a> и <a href="gml.php">SGML </a>применение DTD также имеет некоторые особенности в зависимости от целевого документа</em>. В XML- документах DTD определяет набор действительных элементов, идентифицирует элементы, которые могут находиться в других элементах, и определяет действительные атрибуты для каждого из них. <em>Синтаксис DTD весьма своеобразен и от автора-разработчика требуются дополнительные усилия при создании таких документов</em>(сложность DTD является одной из причин того, что использование SGML, требующего определение DTD для любого документа, не получило столь широкого распространения как, например, <a href="html.php">HTML</a>). Как уже отмечалось,<em> в XML использовать DTD не обязательно</em> - документы, созданные без этих правил, будут правильно обрабатываться программой-анализатором, если они удовлетворяют основным требованиям синтаксиса XML. Однако контроль за типами элементов и корректностью отношений между ними в этом случае будет полностью возлагаться на автора документа. До тех пор, пока грамматика нашего нового языка не описана, его сможем использовать только мы, и для этого мы будем вынуждены применять специально разработанное программное обеспечение, а не универсальные программы-анализаторы..</p>\r\n\r\n<p>Для того, чтобы использовать DTD в нашем XML-документе, мы можем или описать его во внешнем файле и при описании DTD просто указать ссылку на этот файл или же непосредственно внутри самого документа выделить область, в которой определить нужные правила. В первом случае в документе указывается имя файла, содержащего DTD- описания:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;?xml version="1.0" standalone="yes" ?&gt;\r\n&lt;!DOCTYPE journal SYSTEM "journal.dtd"&gt;\r\n...</code></pre>\r\n\r\n<p><br />\r\nВнутри же документа DTD- декларации включаются следующим образом:</p>\r\n\r\n<pre>\r\n<code class="language-apache">...\r\n&lt;!DOCTYPE journal [\r\n&lt;!ELEMENT journal (contacts, issues, authors)&gt;\r\n...\r\n]&gt;\r\n...</code></pre>\r\n\r\n<p>В том случае, если используются одновременно внутренние и внешние описания, то программой-анализатором будут сначала рассматриваться внутренние, т.е. их приоритет выше. При проверке документа XML- процессор в первую очередь ищет DTD внутри документа. Если правила внутри документа не определены и не задан атрибут <strong>standalone =&quot;yes&quot;</strong> , то программа загрузит указанный внешний файл и правила, находящиеся в нем, будут считаны оттуда. Если же атрибут standalone имеет значение &quot;yes&quot;, то использование внешних DTD описаний будет запрещено.</p>\r\n\r\n<h2><strong>Определение элемента</strong></h2>\r\n\r\n<p>Элемент в DTD определяется с помощью дескриптора <strong>!ELEMENT</strong>, в котором указывается название элемента и структура его содержимого.</p>\r\n\r\n<p>Например, для элемента <strong>&lt;flower&gt;</strong> можно определить следующее правило:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;!ELEMENT flower  PCDATA&gt;</code></pre>\r\n\r\n<p>Ключевое слово <strong>ELEMENT</strong> указывает, что данной инструкцией будет описываться элемент XML. Внутри этой инструкции задается название элемента(<strong>flower</strong>) и тип его содержимого.</p>\r\n\r\n<p>В определении элемента мы указываем сначала название элемента(<strong>flower</strong>), а затем его модель содержимого - определяем, какие другие элементы или типы данных могут встречаться внутри него. В данном случае содержимое элемента <strong>flower</strong> будет определяться при помощи специального маркера <strong>PCDATA&nbsp;</strong>(что означает <em>parseable character data - любая информация, с которой может работать программа-анализатор</em>). Существует еще две инструкции, определяющие тип содержимого: <strong>EMPTY</strong>, <strong>ANY</strong>. Первая указывает на то, что элемент должен быть пустым (например, <strong>&lt;red/&gt;</strong>), вторая - на то, что содержимое элемента специально не описывается.</p>\r\n\r\n<p>Последовательность дочерних для текущего элемента объектов задается в виде списка разделенных запятыми названий элементов. При этом для того, чтобы указать количество повторений включений этих элементов могут использоваться символы <strong>+</strong>,<strong>*</strong>, <strong>?</strong>:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;!ELEMENT issue (title, author+, table-of-contents?)&gt;</code></pre>\r\n\r\n<p>В этом примере указывается, что внутри элемента <strong>&lt;issue&gt;</strong> должны быть определены элементы <strong>title</strong>, <strong>author </strong>и <strong>table-of-contents</strong>, причем элемент <strong>title </strong>является обязательным элементом и может встречаться лишь однажды, элемент <strong>author </strong>может встречаться несколько раз, а элемент <strong>table-of-contents</strong> является опциональным, т.е. может отсутствовать. В том случае, если существует несколько возможных вариантов содержимого определяемого элемента, их следует разделять при помощи символа &quot;<strong>|</strong>&quot; :</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;!ELEMENT flower (PCDATA | title )*&gt;</code></pre>\r\n\r\n<p>Символ <strong>* </strong>в этом примере указывает на то, что определяемая последовательность внутренних элементов может быть повторена несколько раз или же совсем не использоваться.</p>\r\n\r\n<p>Если в определении элемента указывается &quot;смешанное&quot; содержимое, т.е. текстовые данные или набор элементов, то необходимо сначала указать <strong>PCDATA</strong>, а затем разделенный символом &quot;<strong>|</strong>&quot; список элементов.</p>\r\n\r\n<p>Пример корректного XML- документа с явно определенным DTD:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;?xml version="1.0"?&gt;\r\n&lt;!DOCTYPE journal [\r\n&lt;!ELEMENT contacts (address, tel+, email?)&gt;\r\n&lt;!ELEMENT address (street, appt)&gt;\r\n&lt;!ELEMENT street PCDATA&gt;\r\n&lt;!ELEMENT appt (PCDATA | EMPTY)*&gt;\r\n&lt;!ELEMENT tel PCDATA&gt;\r\n&lt;!ELEMENT email PCDATA&gt;\r\n]&gt;\r\n...\r\n&lt;contacts&gt;\r\n&lt;address&gt;\r\n&lt;street&gt;Marks avenue&lt;/street&gt;\r\n&lt;appt id="4"&gt;\r\n&lt;/address&gt;\r\n&lt;tel&gt;12-12-12&lt;/tel&gt;\r\n&lt;tel&gt;46-23-62&lt;/tel&gt;\r\n&lt;email&gt;info@j.com&lt;/email&gt;\r\n&lt;/contacts&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n');
INSERT INTO `content` (`id`, `text`) VALUES
('doc_str', '<p><strong>Языки разметки предъявляют особые требования к структуре документа.</strong> Рассмотрим, к примеру, требования языка <a href="xml.php">XML</a>.</p>\r\n\r\n<p>Простейший XML- документ может выглядеть так, как это показано в примере:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;?xml version="1.0"?&gt;\r\n&lt;list_of_items&gt;\r\n&lt;item id="1"&gt;&lt;first/&gt;Первый&lt;/item&gt;\r\n&lt;item id="2"&gt;Второй &lt;sub_item&gt;подпункт 1&lt;/sub_item&gt;&lt;/item&gt;\r\n&lt;item id="3"&gt;Третий&lt;/item&gt;\r\n&lt;item id="4"&gt;&lt;last/&gt;Последний&lt;/item&gt;\r\n&lt;/list_of_items&gt;</code></pre>\r\n\r\n<p>Обратите внимание на то, что этот документ очень похож на обычную <a href="html.php">HTML</a>-страницу. Также, как и в HTML, инструкции, заключенные в угловые скобки называются тэгами и служат для разметки основного текста документа. В XML существуют открывающие, закрывающие и пустые тэги (в HTML понятие пустого тэга тоже существует, но специального его обозначения не требуется).</p>\r\n\r\n<p>Тело документа XML состоит из элементов <strong>разметки </strong>(<strong>markup</strong>) и непосредственно содержимого документа - <strong>данных </strong>(<strong>content</strong>). XML - тэги предназначены для определения элементов документа, их атрибутов и других конструкций языка. Более подробно о типах применяемой в документах разметки мы поговорим чуть позже.</p>\r\n\r\n<p>Любой XML-документ должен всегда начинаться с инструкции&nbsp;, внутри которой также можно задавать номер версии языка, номер кодовой страницы и другие параметры, необходимые программе-анализатору в процессе разбора документа.</p>\r\n\r\n<h2><strong>Правила создания XML- документа</strong></h2>\r\n\r\n<p>В общем случае XML- документы должны удовлетворять следующим требованиям:</p>\r\n\r\n<ul>\r\n	<li>В заголовке документа помещается объявление XML, в котором указывается язык разметки документа, номер его версии и дополнительная информация</li>\r\n	<li>Каждый открывающий тэг, определяющий некоторую область данных в документе обязательно должен иметь своего закрывающего &quot;напарника&quot;, т.е., в отличие от HTML, нельзя опускать закрывающие тэги</li>\r\n	<li>В XML учитывается регистр символов</li>\r\n	<li>Все значения атрибутов, используемых в определении тэгов, должны быть заключены в кавычки</li>\r\n	<li>Вложенность тэгов в XML строго контролируется, поэтому необходимо следить за порядком следования открывающих и закрывающих тэгов</li>\r\n	<li>Вся информация, располагающаяся между начальным и конечными тэгами, рассматривается в XML как данные и поэтому учитываются все символы форматирования ( т.е. пробелы, переводы строк, табуляции не игнорируются, как в HTML)</li>\r\n</ul>\r\n\r\n<p>Если XML- документ не нарушает приведенные правила, то он называется формально-правильным и все анализаторы, предназначенные для разбора XML- документов, смогут работать с ним корректно.</p>\r\n\r\n<p>Однако кроме проверки на формальное соответствие грамматике языка, в документе<strong> могут присутствовать средства контроля над содержанием документа</strong>, за соблюдением правил, определяющих необходимые соотношений между элементами и формирующих структуру документа. Например, следующий текст, являясь вполне правильным XML- документом, будет абсолютно бессмысленным:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;country&gt;&lt;title&gt;Russia&lt;/title&gt;&lt;city&gt;&lt;title&gt;Novosibirsk&lt;/country&gt;\r\n&lt;/title&gt;&lt;/city&gt;</code></pre>\r\n\r\n<p>Для того, чтобы обеспечить проверку корректности XML- документов, необходимо использовать анализаторы, производящие такую проверку и называемые верифицирующими.</p>\r\n\r\n<p>На сегодняшний день существует два способа контроля правильности XML- документа: <a href="dtd.php"><strong>DTD </strong></a>- определения (Document Type Definition) и <strong>схемы данных</strong> (Semantic Schema). Более подробно об использовании DTD и схемах будет описано в следующих разделах. В отличии от <a href="gml.php">SGML</a>, определение DTD- правил в XML не является необходимостью, и это обстоятельство позволяет нам создавать любые XML- документы, не ломая пока голову над весьма непростым синтаксисом DTD.</p>\r\n\r\n<p>Содержимое XML- документа представляет собой набор элементов, секций CDATA, директив анализатора, комментариев, спецсимволов, текстовых данных. Рассмотрим каждый из них подробней.</p>\r\n\r\n<h2><strong>Элементы данных</strong></h2>\r\n\r\n<p><strong>Элемент </strong>- это структурная единица XML- документа. Заключая слово в в тэги&nbsp;, мы определяем непустой элемент, называемый&nbsp;, содержимым которого является слово. В общем случае в качестве содержимого элементов могут выступать как просто какой-то текст, так и другие, вложенные, элементы документа, секции <strong>CDATA</strong>, инструкции по обработке, комментарии, - т.е. практически любые части XML- документа.</p>\r\n\r\n<p>Любой непустой элемент должен состоять из начального, конечного тэгов и данных, между ними заключенных. Например, следующие фрагменты будут являться элементами:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;flower&gt;rose&lt;/flower&gt;\r\n&lt;city&gt;Novosibirsk&lt;/city&gt;</code></pre>\r\n\r\n<p>а эти - нет:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;rose&gt;\r\n&lt;flower&gt;\r\nrose</code></pre>\r\n\r\n<p>Набором всех элементов, содержащихся в документе, задается его структура и определяются все иерархическое соотношения. <em>Плоская модель данных превращается с использованием элементов в сложную иерархическую систему со множеством возможных связей между элементами.</em> Например, в следующем примере мы описываем месторасположение Новосибирских университетов (указываем, что Новосибирский Университет расположен в городе Новосибирске, который, в свою очередь, находится в России), используя для этого вложенность элементов XML :</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;country id="Russia"&gt;\r\n&lt;cities-list&gt;\r\n&lt;city&gt;\r\n&lt;title&gt;Новосибирск&lt;/title&gt;\r\n&lt;universities-list&gt;\r\n&lt;university id="1"&gt;\r\n&lt;title&gt;Сибирский Государственный Университет Телекоммуникаций и Информатики&lt;/title&gt;\r\n&lt;address URL="www.neic.nsk.su"/&gt;\r\n&lt;/university&gt;  \r\n&lt;university id="2"&gt;\r\n&lt;title&gt;Новосибирский Государственный Университет&lt;/title&gt;\r\n&lt;address URL="www.nsu.ru"/&gt;\r\n&lt;/university&gt;  \r\n&lt;/universities-list&gt;\r\n&lt;/city&gt;\r\n&lt;city&gt;\r\n&lt;title&gt;Москва&lt;/title&gt;\r\n&lt;universities-list&gt;\r\n&lt;university id="1"&gt;\r\n&lt;title&gt;Московский Государственный Университет&lt;/title&gt;\r\n&lt;address URL="www.msu.ru"/&gt;\r\n&lt;/university&gt;  \r\n&lt;/universities-list&gt;\r\n&lt;/city&gt;\r\n&lt;/cities-list&gt;\r\n&lt;/country&gt;</code></pre>\r\n\r\n<p>Производя в последствии поиск в этом документе, программа клиента будет опираться на информацию, заложенную в его структуру - используя элементы документа. Т.е. если, например, требуется найти нужный университет в нужном городе, используя приведенный фрагмент документа, то необходимо будет просмотреть содержимое конкретного элемента <strong>&lt;university&gt;</strong>, находящегося внутри конкретного элемента <strong>&lt;city&gt;</strong>. <em>Поиск при этом, естественно, будет гораздо более эффективен, чем нахождение нужной последовательности по всему документу.</em></p>\r\n\r\n<p>В XML документе, как правило, определяется хотя бы один элемент, называемый корневым и с него программы-анализаторы начинают просмотр документа. В приведенном примере этим элементом является <strong>&lt;country&gt;</strong>.</p>\r\n\r\n<p>В некоторых случаях тэги могут изменять и уточнять семантику тех или иных фрагментов документа, по разному определяя одну и ту же информацию и тем самым предоставляя приложению-анализатору этого документа сведения о контексте использования описываемых данных. Например, прочитав фрагмент <strong>&lt;river&gt;Lena&lt;/river&gt;</strong> мы можем догадаться, что речь в этой части документа идет о реке, а вот во фрагменте <strong>&lt;name&gt;Lena&lt;/name&gt;</strong> - о имени.</p>\r\n\r\n<p>В случае, если элемент не имеет содержимого, т.е. нет данных, которые он должен определять, он называется пустым. Примером пустых элементов в HTML могут служить такие тэги HTML, как <strong>&lt;br&gt;,</strong> <strong>&lt;hr&gt;</strong>, <strong>&lt;img&gt;</strong>.&nbsp;Необходимо только помнить, что начальный и конечные тэги пустого элемента как бы объединяется в один, и надо обязательно ставить косую черту перед закрывающей угловой скобкой (например, <strong>&lt;empty/&gt;</strong>;)</p>\r\n\r\n<h2><strong>Комментарии</strong></h2>\r\n\r\n<p>Комментариями является любая область данных, заключенная между последовательностями символов&nbsp;Комментарии пропускаются анализатором и поэтому при разборе структуры документа в качестве значащей информации не рассматриваются.</p>\r\n\r\n<h2><strong>Атрибуты</strong></h2>\r\n\r\n<p>Если при определении элементов необходимо задать какие-либо параметры, уточняющие его характеристики, то имеется возможность использовать атрибуты эдлемента. Атрибут - это пара &quot;название&quot; = &quot;значение&quot;, которую надо задавать при определении элемента в начальном тэге. Пример:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;color RGB="true"&gt;#ff08ff&lt;/color&gt;\r\n&lt;color RGB="false"&gt;white&lt;/color&gt;</code></pre>\r\n\r\n<p>или</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;author id=0&gt;Ivan Petrov&lt;/autho&gt;</code></pre>\r\n\r\n<p>Примером использования атрибутов в HTML является описание элемента &lt;font&gt;:</p>\r\n\r\n<pre>\r\n<code class="language-xml">&lt;font color="white" name="Arial"&gt;Black&lt;/font&gt;</code></pre>\r\n\r\n<h2><strong>Cпециальные символы</strong></h2>\r\n\r\n<p>Для того, чтобы включить в документ символ, используемый для определения каких-либо конструкций языка (например, символ угловой скобки) и не вызвать при этом ошибок в процессе разбора такого документа, нужно использовать его специальный символьный либо числовой идентификатор. Например, &lt; , &gt; &quot; или $(десятичная форма записи), &amp;#x1a (шестнадцатеричная) и т.д. Строковые обозначения спецсиволов могут определяться в XML документе при помощи компонентов (entity).</p>\r\n\r\n<h2><strong>Директивы анализатора</strong></h2>\r\n\r\n<p>Инструкции, предназначенные для анализаторов языка, описываются в XML документе при помощи специальных тэгов -&nbsp;;. Программа клиента использует эти инструкции для управления процессом разбора документа. Наиболее часто инструкции используются при определении типа документа&nbsp;или создании пространства имен.</p>\r\n\r\n<h2><strong>CDATA</strong></h2>\r\n\r\n<p>Чтобы задать область документа, которую при разборе анализатор будет рассматривать как простой текст, игнорируя любые инструкции и специальные символы, но, в отличии от комментариев, иметь возможность использовать их в приложении, необходимо использовать тэги&nbsp;. Внутри этого блока можно помещать любую информацию, которая может понадобится программе- клиенту для выполнения каких-либо действий (в область CDATA, можно помещать, например, инструкции JavaScript). Естественно, надо следить за тем, чтобы в области, ограниченной этими тэгами не было последовательности символов ]].</p>\r\n');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
